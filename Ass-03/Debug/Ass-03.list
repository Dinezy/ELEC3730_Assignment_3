
Ass-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002434  0800d478  0800d478  0001d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8ac  0800f8ac  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8ac  0800f8ac  0001f8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8b4  0800f8b4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8b4  0800f8b4  0001f8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8b8  0800f8b8  0001f8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800f8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00004fc4  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200050c4  200050c4  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025159  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062aa  00000000  00000000  00045285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b8  00000000  00000000  0004b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d90  00000000  00000000  0004d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029eae  00000000  00000000  0004f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b147  00000000  00000000  00079226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e30d9  00000000  00000000  000a436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00187446  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009024  00000000  00000000  00187498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d460 	.word	0x0800d460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800d460 	.word	0x0800d460

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <StartLCDTask>:
void drawRegisterScreen(void);
void drawUserScreen(void);
void drawPinScreen(void);

void StartLCDTask(void const * argument)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	osMutexWait(LCDAccessHandle, osWaitForever);
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <StartLCDTask+0x58>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	4618      	mov	r0, r3
 8000de2:	f008 f81b 	bl	8008e1c <osMutexWait>
	BSP_LCD_Init();
 8000de6:	f001 fc93 	bl	8002710 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();
 8000dea:	f001 fefd 	bl	8002be8 <BSP_LCD_DisplayOn>
	TouchPanel_Calibrate();
 8000dee:	f002 fc67 	bl	80036c0 <TouchPanel_Calibrate>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000df2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000df6:	f001 fd09 	bl	800280c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font8);
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <StartLCDTask+0x5c>)
 8000dfc:	f001 fcea 	bl	80027d4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f001 fcd7 	bl	80027b4 <BSP_LCD_SetTextColor>
	osMutexRelease(LCDAccessHandle);
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <StartLCDTask+0x58>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f008 f854 	bl	8008eb8 <osMutexRelease>
	drawWelcomeScreen();
 8000e10:	f000 f810 	bl	8000e34 <drawWelcomeScreen>
	//drawRegisterScreen();
	//drawPinScreen();

	osSignalSet(touchTaskHandle, LCD_INIT);
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <StartLCDTask+0x60>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f007 ff5a 	bl	8008cd4 <osSignalSet>


  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f007 ff43 	bl	8008cac <osDelay>
 8000e26:	e7fb      	b.n	8000e20 <StartLCDTask+0x50>
 8000e28:	200001d4 	.word	0x200001d4
 8000e2c:	2000007c 	.word	0x2000007c
 8000e30:	200001c8 	.word	0x200001c8

08000e34 <drawWelcomeScreen>:
  }
  /* USER CODE END StartLCDTask */
}

void drawWelcomeScreen(void){
 8000e34:	b598      	push	{r3, r4, r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  // Prepare
  osMutexWait(LCDAccessHandle, osWaitForever);
 8000e38:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <drawWelcomeScreen+0xf4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	4618      	mov	r0, r3
 8000e42:	f007 ffeb 	bl	8008e1c <osMutexWait>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f001 fcb4 	bl	80027b4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8000e4c:	4837      	ldr	r0, [pc, #220]	; (8000f2c <drawWelcomeScreen+0xf8>)
 8000e4e:	f001 fcc1 	bl	80027d4 <BSP_LCD_SetFont>

  // Draw "WELCOME" at the top of the screen
  BSP_LCD_DisplayStringAt(0, LINE(0), (uint8_t *)WELCOME, CENTER_MODE);
 8000e52:	f001 fccf 	bl	80027f4 <BSP_LCD_GetFont>
 8000e56:	2301      	movs	r3, #1
 8000e58:	4a35      	ldr	r2, [pc, #212]	; (8000f30 <drawWelcomeScreen+0xfc>)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f001 fd33 	bl	80028c8 <BSP_LCD_DisplayStringAt>


  // Draw button 1
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000e62:	201f      	movs	r0, #31
 8000e64:	f001 fca6 	bl	80027b4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect((SCREENWIDTH / 2) - BUTTONWIDTH - 10, SCREENHEIGHT - BUTTONHEIGHT - 10, BUTTONWIDTH, BUTTONHEIGHT);
 8000e68:	231e      	movs	r3, #30
 8000e6a:	2232      	movs	r2, #50	; 0x32
 8000e6c:	21c8      	movs	r1, #200	; 0xc8
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f001 fe90 	bl	8002b94 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f001 fc9d 	bl	80027b4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt((SCREENWIDTH / 2) - BUTTONWIDTH - 10 + (BUTTONWIDTH - strlen(REGISTER) * BSP_LCD_GetFont()->Width) / 2,
 8000e7a:	482e      	ldr	r0, [pc, #184]	; (8000f34 <drawWelcomeScreen+0x100>)
 8000e7c:	f7ff f9a8 	bl	80001d0 <strlen>
 8000e80:	4604      	mov	r4, r0
 8000e82:	f001 fcb7 	bl	80027f4 <BSP_LCD_GetFont>
 8000e86:	4603      	mov	r3, r0
 8000e88:	889b      	ldrh	r3, [r3, #4]
 8000e8a:	fb04 f303 	mul.w	r3, r4, r3
 8000e8e:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	3364      	adds	r3, #100	; 0x64
 8000e98:	b29c      	uxth	r4, r3
                          SCREENHEIGHT - BUTTONHEIGHT - 10 + (BUTTONHEIGHT - BSP_LCD_GetFont()->Height) / 2,
 8000e9a:	f001 fcab 	bl	80027f4 <BSP_LCD_GetFont>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	88db      	ldrh	r3, [r3, #6]
 8000ea2:	f1c3 031e 	rsb	r3, r3, #30
 8000ea6:	0fda      	lsrs	r2, r3, #31
 8000ea8:	4413      	add	r3, r2
 8000eaa:	105b      	asrs	r3, r3, #1
  BSP_LCD_DisplayStringAt((SCREENWIDTH / 2) - BUTTONWIDTH - 10 + (BUTTONWIDTH - strlen(REGISTER) * BSP_LCD_GetFont()->Width) / 2,
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	33c8      	adds	r3, #200	; 0xc8
 8000eb0:	b299      	uxth	r1, r3
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <drawWelcomeScreen+0x100>)
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f001 fd06 	bl	80028c8 <BSP_LCD_DisplayStringAt>
                          (uint8_t *)REGISTER, LEFT_MODE);

  // Draw button 2
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ebc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000ec0:	f001 fc78 	bl	80027b4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect((SCREENWIDTH / 2) + 10, SCREENHEIGHT - BUTTONHEIGHT - 10, BUTTONWIDTH, BUTTONHEIGHT);
 8000ec4:	231e      	movs	r3, #30
 8000ec6:	2232      	movs	r2, #50	; 0x32
 8000ec8:	21c8      	movs	r1, #200	; 0xc8
 8000eca:	20aa      	movs	r0, #170	; 0xaa
 8000ecc:	f001 fe62 	bl	8002b94 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f001 fc6f 	bl	80027b4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt((SCREENWIDTH / 2) + 10 + (BUTTONWIDTH - strlen(LOGIN) * BSP_LCD_GetFont()->Width) / 2,
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <drawWelcomeScreen+0x104>)
 8000ed8:	f7ff f97a 	bl	80001d0 <strlen>
 8000edc:	4604      	mov	r4, r0
 8000ede:	f001 fc89 	bl	80027f4 <BSP_LCD_GetFont>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	889b      	ldrh	r3, [r3, #4]
 8000ee6:	fb04 f303 	mul.w	r3, r4, r3
 8000eea:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8000eee:	085b      	lsrs	r3, r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	33aa      	adds	r3, #170	; 0xaa
 8000ef4:	b29c      	uxth	r4, r3
                          SCREENHEIGHT - BUTTONHEIGHT - 10 + (BUTTONHEIGHT - BSP_LCD_GetFont()->Height) / 2,
 8000ef6:	f001 fc7d 	bl	80027f4 <BSP_LCD_GetFont>
 8000efa:	4603      	mov	r3, r0
 8000efc:	88db      	ldrh	r3, [r3, #6]
 8000efe:	f1c3 031e 	rsb	r3, r3, #30
 8000f02:	0fda      	lsrs	r2, r3, #31
 8000f04:	4413      	add	r3, r2
 8000f06:	105b      	asrs	r3, r3, #1
  BSP_LCD_DisplayStringAt((SCREENWIDTH / 2) + 10 + (BUTTONWIDTH - strlen(LOGIN) * BSP_LCD_GetFont()->Width) / 2,
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	33c8      	adds	r3, #200	; 0xc8
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	2303      	movs	r3, #3
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <drawWelcomeScreen+0x104>)
 8000f12:	4620      	mov	r0, r4
 8000f14:	f001 fcd8 	bl	80028c8 <BSP_LCD_DisplayStringAt>
                          (uint8_t *)LOGIN, LEFT_MODE);

  osMutexRelease(LCDAccessHandle);
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <drawWelcomeScreen+0xf4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 ffcb 	bl	8008eb8 <osMutexRelease>
}
 8000f22:	bf00      	nop
 8000f24:	bd98      	pop	{r3, r4, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001d4 	.word	0x200001d4
 8000f2c:	2000006c 	.word	0x2000006c
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000014 	.word	0x20000014

08000f3c <StartTouchTask>:
void loginState_Touch(void);



void StartTouchTask(void const * argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTouchTask */
	osSignalWait(LCD_INIT, osWaitForever);
 8000f44:	463b      	mov	r3, r7
 8000f46:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 ff01 	bl	8008d54 <osSignalWait>
  /* Infinite loop */
  for(;;)
  {
    getDisplayPoint(&display, Read_Ads7846(), &matrix);
 8000f52:	f002 f849 	bl	8002fe8 <Read_Ads7846>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <StartTouchTask+0x58>)
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480e      	ldr	r0, [pc, #56]	; (8000f98 <StartTouchTask+0x5c>)
 8000f5e:	f002 fb0c 	bl	800357a <getDisplayPoint>

    //Touch State Machine
    switch(LCD_State){
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <StartTouchTask+0x60>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d00c      	beq.n	8000f84 <StartTouchTask+0x48>
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d80d      	bhi.n	8000f8a <StartTouchTask+0x4e>
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d002      	beq.n	8000f78 <StartTouchTask+0x3c>
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d003      	beq.n	8000f7e <StartTouchTask+0x42>
 8000f76:	e008      	b.n	8000f8a <StartTouchTask+0x4e>
    case LCD_WELCOME:
    	welcomeState_Touch();
 8000f78:	f000 f812 	bl	8000fa0 <welcomeState_Touch>
    	break;
 8000f7c:	e005      	b.n	8000f8a <StartTouchTask+0x4e>
    case LCD_REGIS:
    	registerState_Touch();
 8000f7e:	f000 f84d 	bl	800101c <registerState_Touch>
    	break;
 8000f82:	e002      	b.n	8000f8a <StartTouchTask+0x4e>

    case LCD_LOG:
    	loginState_Touch();
 8000f84:	f000 f851 	bl	800102a <loginState_Touch>
    	break;
 8000f88:	bf00      	nop
    }

	osDelay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f007 fe8e 	bl	8008cac <osDelay>
    getDisplayPoint(&display, Read_Ads7846(), &matrix);
 8000f90:	e7df      	b.n	8000f52 <StartTouchTask+0x16>
 8000f92:	bf00      	nop
 8000f94:	20001110 	.word	0x20001110
 8000f98:	20001148 	.word	0x20001148
 8000f9c:	2000001c 	.word	0x2000001c

08000fa0 <welcomeState_Touch>:
  }
  /* USER CODE END StartTouchTask */
}

void welcomeState_Touch(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

	osMutexWait(TouchScreenAccessHandle, osWaitForever);
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <welcomeState_Touch+0x6c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 ff35 	bl	8008e1c <osMutexWait>

	//Register Button
	if(display.x >= (SCREENWIDTH / 2) - BUTTONWIDTH - 10 && display.x <= (SCREENWIDTH / 2) - 10 &&
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <welcomeState_Touch+0x70>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	d90e      	bls.n	8000fd8 <welcomeState_Touch+0x38>
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <welcomeState_Touch+0x70>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b96      	cmp	r3, #150	; 0x96
 8000fc0:	d80a      	bhi.n	8000fd8 <welcomeState_Touch+0x38>
	       display.y >= SCREENHEIGHT - BUTTONHEIGHT - 10 && display.y <= SCREENHEIGHT - 10) {
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <welcomeState_Touch+0x70>)
 8000fc4:	885b      	ldrh	r3, [r3, #2]
	if(display.x >= (SCREENWIDTH / 2) - BUTTONWIDTH - 10 && display.x <= (SCREENWIDTH / 2) - 10 &&
 8000fc6:	2bc7      	cmp	r3, #199	; 0xc7
 8000fc8:	d906      	bls.n	8000fd8 <welcomeState_Touch+0x38>
	       display.y >= SCREENHEIGHT - BUTTONHEIGHT - 10 && display.y <= SCREENHEIGHT - 10) {
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <welcomeState_Touch+0x70>)
 8000fcc:	885b      	ldrh	r3, [r3, #2]
 8000fce:	2be6      	cmp	r3, #230	; 0xe6
 8000fd0:	d802      	bhi.n	8000fd8 <welcomeState_Touch+0x38>
	      // Handle button 1 press
	      //handleButton1Press();
	      printf("but1\n");
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <welcomeState_Touch+0x74>)
 8000fd4:	f00b ff40 	bl	800ce58 <puts>
	}
	//Login Button
	if(display.x >= (SCREENWIDTH / 2) + 10 && display.x <= (SCREENWIDTH / 2) + BUTTONWIDTH + 10 &&
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <welcomeState_Touch+0x70>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2ba9      	cmp	r3, #169	; 0xa9
 8000fde:	d90e      	bls.n	8000ffe <welcomeState_Touch+0x5e>
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <welcomeState_Touch+0x70>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	2bdc      	cmp	r3, #220	; 0xdc
 8000fe6:	d80a      	bhi.n	8000ffe <welcomeState_Touch+0x5e>
	            display.y >= SCREENHEIGHT - BUTTONHEIGHT - 10 && display.y <= SCREENHEIGHT - 10) {
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <welcomeState_Touch+0x70>)
 8000fea:	885b      	ldrh	r3, [r3, #2]
	if(display.x >= (SCREENWIDTH / 2) + 10 && display.x <= (SCREENWIDTH / 2) + BUTTONWIDTH + 10 &&
 8000fec:	2bc7      	cmp	r3, #199	; 0xc7
 8000fee:	d906      	bls.n	8000ffe <welcomeState_Touch+0x5e>
	            display.y >= SCREENHEIGHT - BUTTONHEIGHT - 10 && display.y <= SCREENHEIGHT - 10) {
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <welcomeState_Touch+0x70>)
 8000ff2:	885b      	ldrh	r3, [r3, #2]
 8000ff4:	2be6      	cmp	r3, #230	; 0xe6
 8000ff6:	d802      	bhi.n	8000ffe <welcomeState_Touch+0x5e>
	      // Handle button 2 press
	      //handleButton2Press();
	      printf("but2\n");
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <welcomeState_Touch+0x78>)
 8000ffa:	f00b ff2d 	bl	800ce58 <puts>
	    }

	osMutexRelease(TouchScreenAccessHandle);
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <welcomeState_Touch+0x6c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f007 ff58 	bl	8008eb8 <osMutexRelease>



}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001d8 	.word	0x200001d8
 8001010:	20001148 	.word	0x20001148
 8001014:	0800d478 	.word	0x0800d478
 8001018:	0800d480 	.word	0x0800d480

0800101c <registerState_Touch>:

void registerState_Touch(void){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <loginState_Touch>:

void loginState_Touch(void){
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0



}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <StartControlTask>:
#include "Ass-03.h"

uint32_t LCD_State = LCD_WELCOME;

void StartControlTask(void const * argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001040:	2064      	movs	r0, #100	; 0x64
 8001042:	f007 fe33 	bl	8008cac <osDelay>
 8001046:	e7fb      	b.n	8001040 <StartControlTask+0x8>

08001048 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_DCMI_Init+0x48>)
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_DCMI_Init+0x4c>)
 8001050:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_DCMI_Init+0x48>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_DCMI_Init+0x48>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_DCMI_Init+0x48>)
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_DCMI_Init+0x48>)
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_DCMI_Init+0x48>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_DCMI_Init+0x48>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_DCMI_Init+0x48>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_DCMI_Init+0x48>)
 800107e:	f002 fd84 	bl	8003b8a <HAL_DCMI_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8001088:	f000 fcd0 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000011c 	.word	0x2000011c
 8001094:	50050000 	.word	0x50050000

08001098 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a68      	ldr	r2, [pc, #416]	; (8001258 <HAL_DCMI_MspInit+0x1c0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f040 80c9 	bne.w	800124e <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	4b66      	ldr	r3, [pc, #408]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	4a65      	ldr	r2, [pc, #404]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6353      	str	r3, [r2, #52]	; 0x34
 80010cc:	4b63      	ldr	r3, [pc, #396]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	4b5f      	ldr	r3, [pc, #380]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a5e      	ldr	r2, [pc, #376]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	4b58      	ldr	r3, [pc, #352]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a57      	ldr	r2, [pc, #348]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4b51      	ldr	r3, [pc, #324]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b4e      	ldr	r3, [pc, #312]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b4a      	ldr	r3, [pc, #296]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a49      	ldr	r2, [pc, #292]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_DCMI_MspInit+0x1c4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001148:	2373      	movs	r3, #115	; 0x73
 800114a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001158:	230d      	movs	r3, #13
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	483f      	ldr	r0, [pc, #252]	; (8001260 <HAL_DCMI_MspInit+0x1c8>)
 8001164:	f003 f91c 	bl	80043a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10;
 8001168:	f44f 638a 	mov.w	r3, #1104	; 0x450
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800117a:	230d      	movs	r3, #13
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4837      	ldr	r0, [pc, #220]	; (8001264 <HAL_DCMI_MspInit+0x1cc>)
 8001186:	f003 f90b 	bl	80043a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800118a:	2340      	movs	r3, #64	; 0x40
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800119a:	230d      	movs	r3, #13
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <HAL_DCMI_MspInit+0x1d0>)
 80011a6:	f003 f8fb 	bl	80043a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011aa:	23c0      	movs	r3, #192	; 0xc0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ba:	230d      	movs	r3, #13
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4829      	ldr	r0, [pc, #164]	; (800126c <HAL_DCMI_MspInit+0x1d4>)
 80011c6:	f003 f8eb 	bl	80043a0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_DCMI_MspInit+0x1dc>)
 80011ce:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011d6:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ea:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fa:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 8001204:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001208:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 800120c:	2204      	movs	r2, #4
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 8001212:	2203      	movs	r2, #3
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001222:	4813      	ldr	r0, [pc, #76]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 8001224:	f002 fd1e 	bl	8003c64 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 800122e:	f000 fbfd 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_DCMI_MspInit+0x1d8>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	204e      	movs	r0, #78	; 0x4e
 8001244:	f002 fbba 	bl	80039bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001248:	204e      	movs	r0, #78	; 0x4e
 800124a:	f002 fbd3 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	; 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	50050000 	.word	0x50050000
 800125c:	40023800 	.word	0x40023800
 8001260:	40021000 	.word	0x40021000
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800
 800126c:	40020400 	.word	0x40020400
 8001270:	2000015c 	.word	0x2000015c
 8001274:	40026428 	.word	0x40026428

08001278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_DMA_Init+0x5c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <MX_DMA_Init+0x5c>)
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_DMA_Init+0x5c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2039      	movs	r0, #57	; 0x39
 80012a0:	f002 fb8c 	bl	80039bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012a4:	2039      	movs	r0, #57	; 0x39
 80012a6:	f002 fba5 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2106      	movs	r1, #6
 80012ae:	203b      	movs	r0, #59	; 0x3b
 80012b0:	f002 fb84 	bl	80039bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012b4:	203b      	movs	r0, #59	; 0x3b
 80012b6:	f002 fb9d 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2106      	movs	r1, #6
 80012be:	2045      	movs	r0, #69	; 0x45
 80012c0:	f002 fb7c 	bl	80039bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012c4:	2045      	movs	r0, #69	; 0x45
 80012c6:	f002 fb95 	bl	80039f4 <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <vApplicationGetIdleTaskMemory+0x2c>)
 80012e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <vApplicationGetIdleTaskMemory+0x30>)
 80012ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200001dc 	.word	0x200001dc
 8001308:	20000230 	.word	0x20000230

0800130c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <vApplicationGetTimerTaskMemory+0x2c>)
 800131c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <vApplicationGetTimerTaskMemory+0x30>)
 8001322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000430 	.word	0x20000430
 800133c:	20000484 	.word	0x20000484

08001340 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b0ae      	sub	sp, #184	; 0xb8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of LCDAccess */
  osMutexDef(LCDAccess);
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  LCDAccessHandle = osMutexCreate(osMutex(LCDAccess));
 8001352:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001356:	4618      	mov	r0, r3
 8001358:	f007 fd48 	bl	8008dec <osMutexCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a42      	ldr	r2, [pc, #264]	; (8001468 <MX_FREERTOS_Init+0x128>)
 8001360:	6013      	str	r3, [r2, #0]

  /* definition and creation of TouchScreenAccess */
  osMutexDef(TouchScreenAccess);
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  TouchScreenAccessHandle = osMutexCreate(osMutex(TouchScreenAccess));
 800136e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001372:	4618      	mov	r0, r3
 8001374:	f007 fd3a 	bl	8008dec <osMutexCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a3c      	ldr	r2, [pc, #240]	; (800146c <MX_FREERTOS_Init+0x12c>)
 800137c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800137e:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <MX_FREERTOS_Init+0x130>)
 8001380:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001384:	461d      	mov	r5, r3
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001392:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f007 fc3b 	bl	8008c14 <osThreadCreate>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a34      	ldr	r2, [pc, #208]	; (8001474 <MX_FREERTOS_Init+0x134>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDTask */
  osThreadDef(LCDTask, StartLCDTask, osPriorityIdle, 0, 128);
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_FREERTOS_Init+0x138>)
 80013a6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80013aa:	461d      	mov	r5, r3
 80013ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDTaskHandle = osThreadCreate(osThread(LCDTask), NULL);
 80013b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 fc28 	bl	8008c14 <osThreadCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a2d      	ldr	r2, [pc, #180]	; (800147c <MX_FREERTOS_Init+0x13c>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartControlTask, osPriorityIdle, 0, 128);
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_FREERTOS_Init+0x140>)
 80013cc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013d0:	461d      	mov	r5, r3
 80013d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80013de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 fc15 	bl	8008c14 <osThreadCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <MX_FREERTOS_Init+0x144>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchTask */
  osThreadDef(touchTask, StartTouchTask, osPriorityIdle, 0, 128);
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <MX_FREERTOS_Init+0x148>)
 80013f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013f6:	461d      	mov	r5, r3
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8001404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f007 fc02 	bl	8008c14 <osThreadCreate>
 8001410:	4603      	mov	r3, r0
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <MX_FREERTOS_Init+0x14c>)
 8001414:	6013      	str	r3, [r2, #0]

  /* definition and creation of cameraTask */
  osThreadDef(cameraTask, StartCameraTask, osPriorityIdle, 0, 128);
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_FREERTOS_Init+0x150>)
 8001418:	f107 041c 	add.w	r4, r7, #28
 800141c:	461d      	mov	r5, r3
 800141e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001422:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cameraTaskHandle = osThreadCreate(osThread(cameraTask), NULL);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 fbef 	bl	8008c14 <osThreadCreate>
 8001436:	4603      	mov	r3, r0
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <MX_FREERTOS_Init+0x154>)
 800143a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDTask */
  osThreadDef(SDTask, StartSDTask, osPriorityIdle, 0, 128);
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_FREERTOS_Init+0x158>)
 800143e:	463c      	mov	r4, r7
 8001440:	461d      	mov	r5, r3
 8001442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001446:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800144a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDTaskHandle = osThreadCreate(osThread(SDTask), NULL);
 800144e:	463b      	mov	r3, r7
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f007 fbde 	bl	8008c14 <osThreadCreate>
 8001458:	4603      	mov	r3, r0
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <MX_FREERTOS_Init+0x15c>)
 800145c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800145e:	bf00      	nop
 8001460:	37b8      	adds	r7, #184	; 0xb8
 8001462:	46bd      	mov	sp, r7
 8001464:	bdb0      	pop	{r4, r5, r7, pc}
 8001466:	bf00      	nop
 8001468:	200001d4 	.word	0x200001d4
 800146c:	200001d8 	.word	0x200001d8
 8001470:	0800d4c8 	.word	0x0800d4c8
 8001474:	200001bc 	.word	0x200001bc
 8001478:	0800d4e4 	.word	0x0800d4e4
 800147c:	200001c0 	.word	0x200001c0
 8001480:	0800d500 	.word	0x0800d500
 8001484:	200001c4 	.word	0x200001c4
 8001488:	0800d51c 	.word	0x0800d51c
 800148c:	200001c8 	.word	0x200001c8
 8001490:	0800d538 	.word	0x0800d538
 8001494:	200001cc 	.word	0x200001cc
 8001498:	0800d554 	.word	0x0800d554
 800149c:	200001d0 	.word	0x200001d0

080014a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f007 fbff 	bl	8008cac <osDelay>
 80014ae:	e7fb      	b.n	80014a8 <StartDefaultTask+0x8>

080014b0 <StartCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCameraTask */
__weak void StartCameraTask(void const * argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCameraTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f007 fbf7 	bl	8008cac <osDelay>
 80014be:	e7fb      	b.n	80014b8 <StartCameraTask+0x8>

080014c0 <StartSDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDTask */
__weak void StartSDTask(void const * argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f007 fbef 	bl	8008cac <osDelay>
 80014ce:	e7fb      	b.n	80014c8 <StartSDTask+0x8>

080014d0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_FSMC_Init+0xb8>)
 80014ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014ee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_FSMC_Init+0xb8>)
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <MX_FSMC_Init+0xbc>)
 80014f4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_FSMC_Init+0xb8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_FSMC_Init+0xb8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_FSMC_Init+0xb8>)
 800150a:	2210      	movs	r2, #16
 800150c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_FSMC_Init+0xb8>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001530:	2200      	movs	r2, #0
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001536:	2200      	movs	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_FSMC_Init+0xb8>)
 800153c:	2200      	movs	r2, #0
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001542:	2200      	movs	r2, #0
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001550:	230f      	movs	r3, #15
 8001552:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 8001554:	2328      	movs	r3, #40	; 0x28
 8001556:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800155c:	2310      	movs	r3, #16
 800155e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001560:	2311      	movs	r3, #17
 8001562:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_FSMC_Init+0xb8>)
 8001570:	f005 ff3c 	bl	80073ec <HAL_SRAM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800157a:	f000 fa57 	bl	8001a2c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000884 	.word	0x20000884
 800158c:	a0000104 	.word	0xa0000104

08001590 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_FSMC_MspInit+0x88>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d131      	bne.n	8001610 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_FSMC_MspInit+0x88>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_FSMC_MspInit+0x8c>)
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <HAL_FSMC_MspInit+0x8c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6393      	str	r3, [r2, #56]	; 0x38
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_FSMC_MspInit+0x8c>)
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80015ce:	f64f 7380 	movw	r3, #65408	; 0xff80
 80015d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015e0:	230c      	movs	r3, #12
 80015e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_FSMC_MspInit+0x90>)
 80015ea:	f002 fed9 	bl	80043a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015ee:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80015f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001600:	230c      	movs	r3, #12
 8001602:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_FSMC_MspInit+0x94>)
 800160a:	f002 fec9 	bl	80043a0 <HAL_GPIO_Init>
 800160e:	e000      	b.n	8001612 <HAL_FSMC_MspInit+0x82>
    return;
 8001610:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200008d4 	.word	0x200008d4
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40020c00 	.word	0x40020c00

08001628 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001630:	f7ff ffae 	bl	8001590 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a62      	ldr	r2, [pc, #392]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b60      	ldr	r3, [pc, #384]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b4b      	ldr	r3, [pc, #300]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a46      	ldr	r2, [pc, #280]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a3f      	ldr	r2, [pc, #252]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_GPIO_Init+0x1a8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2110      	movs	r1, #16
 80016fe:	483a      	ldr	r0, [pc, #232]	; (80017e8 <MX_GPIO_Init+0x1ac>)
 8001700:	f003 f802 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	4838      	ldr	r0, [pc, #224]	; (80017ec <MX_GPIO_Init+0x1b0>)
 800170a:	f002 fffd 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001714:	4836      	ldr	r0, [pc, #216]	; (80017f0 <MX_GPIO_Init+0x1b4>)
 8001716:	f002 fff7 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800171e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4831      	ldr	r0, [pc, #196]	; (80017f4 <MX_GPIO_Init+0x1b8>)
 8001730:	f002 fe36 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 8001734:	2310      	movs	r3, #16
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800173c:	2302      	movs	r3, #2
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4827      	ldr	r0, [pc, #156]	; (80017e8 <MX_GPIO_Init+0x1ac>)
 800174c:	f002 fe28 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8001750:	2320      	movs	r3, #32
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4821      	ldr	r0, [pc, #132]	; (80017e8 <MX_GPIO_Init+0x1ac>)
 8001764:	f002 fe1c 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	481b      	ldr	r0, [pc, #108]	; (80017ec <MX_GPIO_Init+0x1b0>)
 8001780:	f002 fe0e 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001784:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4814      	ldr	r0, [pc, #80]	; (80017f0 <MX_GPIO_Init+0x1b4>)
 800179e:	f002 fdff 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_GPIO_Init+0x1b8>)
 80017c0:	f002 fdee 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80017c4:	2308      	movs	r3, #8
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_GPIO_Init+0x1b4>)
 80017d8:	f002 fde2 	bl	80043a0 <HAL_GPIO_Init>

}
 80017dc:	bf00      	nop
 80017de:	3730      	adds	r7, #48	; 0x30
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40020000 	.word	0x40020000

080017f8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_I2C2_Init+0x50>)
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <MX_I2C2_Init+0x54>)
 8001800:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_I2C2_Init+0x50>)
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <MX_I2C2_Init+0x58>)
 8001806:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_I2C2_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_I2C2_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_I2C2_Init+0x50>)
 8001816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_I2C2_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_I2C2_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_I2C2_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_I2C2_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_I2C2_Init+0x50>)
 8001836:	f002 ff81 	bl	800473c <HAL_I2C_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001840:	f000 f8f4 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200008d8 	.word	0x200008d8
 800184c:	40005800 	.word	0x40005800
 8001850:	000186a0 	.word	0x000186a0

08001854 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_I2C_MspInit+0x84>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d12c      	bne.n	80018d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_I2C_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a17      	ldr	r2, [pc, #92]	; (80018dc <HAL_I2C_MspInit+0x88>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_I2C_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SIOC_Pin|I2C_SIOD_Pin;
 8001892:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001898:	2312      	movs	r3, #18
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a4:	2304      	movs	r3, #4
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <HAL_I2C_MspInit+0x8c>)
 80018b0:	f002 fd76 	bl	80043a0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_I2C_MspInit+0x88>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_I2C_MspInit+0x88>)
 80018be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_I2C_MspInit+0x88>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005800 	.word	0x40005800
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80018e8:	f00a fffe 	bl	800c8e8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ec:	f001 ff48 	bl	8003780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f0:	f000 f816 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f4:	f7ff fea2 	bl	800163c <MX_GPIO_Init>
  MX_DMA_Init();
 80018f8:	f7ff fcbe 	bl	8001278 <MX_DMA_Init>
  MX_DCMI_Init();
 80018fc:	f7ff fba4 	bl	8001048 <MX_DCMI_Init>
  MX_FSMC_Init();
 8001900:	f7ff fde6 	bl	80014d0 <MX_FSMC_Init>
  MX_I2C2_Init();
 8001904:	f7ff ff78 	bl	80017f8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001908:	f000 f896 	bl	8001a38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800190c:	f006 fe6e 	bl	80085ec <MX_FATFS_Init>
  MX_SPI2_Init();
 8001910:	f000 f9a4 	bl	8001c5c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001914:	f7ff fd14 	bl	8001340 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001918:	f007 f959 	bl	8008bce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800191c:	e7fe      	b.n	800191c <main+0x38>
	...

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2230      	movs	r2, #48	; 0x30
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f00b f987 	bl	800cc42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <SystemClock_Config+0xe0>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a2c      	ldr	r2, [pc, #176]	; (8001a00 <SystemClock_Config+0xe0>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <SystemClock_Config+0xe0>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <SystemClock_Config+0xe4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <SystemClock_Config+0xe4>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <SystemClock_Config+0xe4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001986:	2301      	movs	r3, #1
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198a:	2310      	movs	r3, #16
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	2302      	movs	r3, #2
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001998:	2308      	movs	r3, #8
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800199c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a2:	2302      	movs	r3, #2
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019a6:	2307      	movs	r3, #7
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 f808 	bl	80049c4 <HAL_RCC_OscConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019ba:	f000 f837 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019be:	230f      	movs	r3, #15
 80019c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2105      	movs	r1, #5
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fa69 	bl	8004eb4 <HAL_RCC_ClockConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80019e8:	f000 f820 	bl	8001a2c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2000      	movs	r0, #0
 80019f2:	f003 fb45 	bl	8005080 <HAL_RCC_MCOConfig>
}
 80019f6:	bf00      	nop
 80019f8:	3750      	adds	r7, #80	; 0x50
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a1a:	f001 fed3 	bl	80037c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40001000 	.word	0x40001000

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <MX_SDIO_SD_Init+0x3c>)
 8001a40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <MX_SDIO_SD_Init+0x38>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	2000092c 	.word	0x2000092c
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_SD_MspInit+0x1c4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	f040 80cb 	bne.w	8001c32 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	4a66      	ldr	r2, [pc, #408]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8001aac:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a5f      	ldr	r2, [pc, #380]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_SD_MspInit+0x1c8>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001af0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b02:	230c      	movs	r3, #12
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	484d      	ldr	r0, [pc, #308]	; (8001c44 <HAL_SD_MspInit+0x1cc>)
 8001b0e:	f002 fc47 	bl	80043a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b12:	2304      	movs	r3, #4
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b22:	230c      	movs	r3, #12
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4846      	ldr	r0, [pc, #280]	; (8001c48 <HAL_SD_MspInit+0x1d0>)
 8001b2e:	f002 fc37 	bl	80043a0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b34:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_SD_MspInit+0x1d8>)
 8001b36:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b52:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b62:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b66:	2220      	movs	r2, #32
 8001b68:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b70:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b74:	2204      	movs	r2, #4
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001b8e:	482f      	ldr	r0, [pc, #188]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001b90:	f002 f868 	bl	8003c64 <HAL_DMA_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001b9a:	f7ff ff47 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba4:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <HAL_SD_MspInit+0x1d4>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bac:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_SD_MspInit+0x1e0>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bde:	2220      	movs	r2, #32
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001be4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001be8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001bf8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001c00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c06:	4813      	ldr	r0, [pc, #76]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001c08:	f002 f82c 	bl	8003c64 <HAL_DMA_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8001c12:	f7ff ff0b 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_SD_MspInit+0x1dc>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2105      	movs	r1, #5
 8001c26:	2031      	movs	r0, #49	; 0x31
 8001c28:	f001 fec8 	bl	80039bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001c2c:	2031      	movs	r0, #49	; 0x31
 8001c2e:	f001 fee1 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	200009b0 	.word	0x200009b0
 8001c50:	40026458 	.word	0x40026458
 8001c54:	20000a10 	.word	0x20000a10
 8001c58:	400264a0 	.word	0x400264a0

08001c5c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <MX_SPI2_Init+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c90:	2220      	movs	r2, #32
 8001c92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001ca8:	220a      	movs	r2, #10
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MX_SPI2_Init+0x64>)
 8001cae:	f004 fcd7 	bl	8006660 <HAL_SPI_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001cb8:	f7ff feb8 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000a70 	.word	0x20000a70
 8001cc4:	40003800 	.word	0x40003800

08001cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_SPI_MspInit+0x94>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d134      	bne.n	8001d54 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_SPI_MspInit+0x98>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_SPI_MspInit+0x98>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_SPI_MspInit+0x98>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_SPI_MspInit+0x98>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_SPI_MspInit+0x98>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_SPI_MspInit+0x98>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCDTP_CLK_Pin|LCDTP_DOUT_Pin|LCDTP_DIN_Pin;
 8001d22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d34:	2305      	movs	r3, #5
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <HAL_SPI_MspInit+0x9c>)
 8001d40:	f002 fb2e 	bl	80043a0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2105      	movs	r1, #5
 8001d48:	2024      	movs	r0, #36	; 0x24
 8001d4a:	f001 fe37 	bl	80039bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d4e:	2024      	movs	r0, #36	; 0x24
 8001d50:	f001 fe50 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40003800 	.word	0x40003800
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_MspInit+0x54>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_MspInit+0x54>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_MspInit+0x54>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_MspInit+0x54>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_MspInit+0x54>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_MspInit+0x54>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	210f      	movs	r1, #15
 8001daa:	f06f 0001 	mvn.w	r0, #1
 8001dae:	f001 fe05 	bl	80039bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <HAL_InitTick+0xe4>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <HAL_InitTick+0xe4>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_InitTick+0xe4>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fad0 	bl	800539c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e06:	f003 fab5 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8001e0a:	6378      	str	r0, [r7, #52]	; 0x34
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e0e:	f003 fab1 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_InitTick+0xe8>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9b      	lsrs	r3, r3, #18
 8001e22:	3b01      	subs	r3, #1
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_InitTick+0xec>)
 8001e28:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_InitTick+0xf0>)
 8001e2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_InitTick+0xec>)
 8001e2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_InitTick+0xec>)
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_InitTick+0xec>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_InitTick+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_InitTick+0xec>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e4c:	4817      	ldr	r0, [pc, #92]	; (8001eac <HAL_InitTick+0xec>)
 8001e4e:	f005 fb15 	bl	800747c <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d11b      	bne.n	8001e98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e60:	4812      	ldr	r0, [pc, #72]	; (8001eac <HAL_InitTick+0xec>)
 8001e62:	f005 fb65 	bl	8007530 <HAL_TIM_Base_Start_IT>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d111      	bne.n	8001e98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e74:	2036      	movs	r0, #54	; 0x36
 8001e76:	f001 fdbd 	bl	80039f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d808      	bhi.n	8001e92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	2036      	movs	r0, #54	; 0x36
 8001e86:	f001 fd99 	bl	80039bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_InitTick+0xf4>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e002      	b.n	8001e98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3738      	adds	r7, #56	; 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	431bde83 	.word	0x431bde83
 8001eac:	20000ac8 	.word	0x20000ac8
 8001eb0:	40001000 	.word	0x40001000
 8001eb4:	20000084 	.word	0x20000084

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <SPI2_IRQHandler+0x10>)
 8001eea:	f005 f831 	bl	8006f50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000a70 	.word	0x20000a70

08001ef8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <SDIO_IRQHandler+0x10>)
 8001efe:	f003 fcf7 	bl	80058f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000092c 	.word	0x2000092c

08001f0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <TIM6_DAC_IRQHandler+0x10>)
 8001f12:	f005 fb7d 	bl	8007610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000ac8 	.word	0x20000ac8

08001f20 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA2_Stream1_IRQHandler+0x10>)
 8001f26:	f001 ffc5 	bl	8003eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000015c 	.word	0x2000015c

08001f34 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <DMA2_Stream3_IRQHandler+0x10>)
 8001f3a:	f001 ffbb 	bl	8003eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200009b0 	.word	0x200009b0

08001f48 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <DMA2_Stream6_IRQHandler+0x10>)
 8001f4e:	f001 ffb1 	bl	8003eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000a10 	.word	0x20000a10

08001f5c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <DCMI_IRQHandler+0x10>)
 8001f62:	f001 fd55 	bl	8003a10 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000011c 	.word	0x2000011c

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f00a fd1e 	bl	800c9e0 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20020000 	.word	0x20020000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	20000b10 	.word	0x20000b10
 8001fd8:	200050c8 	.word	0x200050c8

08001fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202a:	f7ff ffd7 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f00a fdd3 	bl	800cbd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7ff fc57 	bl	80018e4 <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002044:	0800f8bc 	.word	0x0800f8bc
  ldr r2, =_sbss
 8002048:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800204c:	200050c4 	.word	0x200050c4

08002050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC_IRQHandler>

08002052 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e00c      	b.n	800208e <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LCD_IO_WriteMultipleData+0x44>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	8013      	strh	r3, [r2, #0]
    counter--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
    pData += 2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3b01      	subs	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ef      	bne.n	8002074 <LCD_IO_WriteMultipleData+0x14>
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	60020000 	.word	0x60020000

080020a8 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 80020b2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	b292      	uxth	r2, r2
 80020ba:	801a      	strh	r2, [r3, #0]

}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <LCD_IO_ReadData+0x14>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
  
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	60020000 	.word	0x60020000

080020e0 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80020e4:	f7ff ffb5 	bl	8002052 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 80020e8:	2101      	movs	r1, #1
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f9a7 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	2001      	movs	r0, #1
 80020f6:	f000 f9a2 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 80020fa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80020fe:	2002      	movs	r0, #2
 8002100:	f000 f99d 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8002104:	f241 0118 	movw	r1, #4120	; 0x1018
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f998 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 800210e:	2100      	movs	r1, #0
 8002110:	2004      	movs	r0, #4
 8002112:	f000 f994 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8002116:	f240 2102 	movw	r1, #514	; 0x202
 800211a:	2008      	movs	r0, #8
 800211c:	f000 f98f 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8002120:	2100      	movs	r1, #0
 8002122:	2009      	movs	r0, #9
 8002124:	f000 f98b 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8002128:	2100      	movs	r1, #0
 800212a:	200a      	movs	r0, #10
 800212c:	f000 f987 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8002130:	2100      	movs	r1, #0
 8002132:	200c      	movs	r0, #12
 8002134:	f000 f983 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8002138:	2100      	movs	r1, #0
 800213a:	200d      	movs	r0, #13
 800213c:	f000 f97f 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8002140:	2100      	movs	r1, #0
 8002142:	200f      	movs	r0, #15
 8002144:	f000 f97b 	bl	800243e <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002148:	2100      	movs	r1, #0
 800214a:	2010      	movs	r0, #16
 800214c:	f000 f977 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002150:	2100      	movs	r1, #0
 8002152:	2011      	movs	r0, #17
 8002154:	f000 f973 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8002158:	2100      	movs	r1, #0
 800215a:	2012      	movs	r0, #18
 800215c:	f000 f96f 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8002160:	2100      	movs	r1, #0
 8002162:	2013      	movs	r0, #19
 8002164:	f000 f96b 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002168:	f241 71b0 	movw	r1, #6064	; 0x17b0
 800216c:	2010      	movs	r0, #16
 800216e:	f000 f966 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002172:	f240 1137 	movw	r1, #311	; 0x137
 8002176:	2011      	movs	r0, #17
 8002178:	f000 f961 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800217c:	f240 1139 	movw	r1, #313	; 0x139
 8002180:	2012      	movs	r0, #18
 8002182:	f000 f95c 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8002186:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800218a:	2013      	movs	r0, #19
 800218c:	f000 f957 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8002190:	2113      	movs	r1, #19
 8002192:	2029      	movs	r0, #41	; 0x29
 8002194:	f000 f953 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8002198:	2100      	movs	r1, #0
 800219a:	2020      	movs	r0, #32
 800219c:	f000 f94f 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 80021a0:	2100      	movs	r1, #0
 80021a2:	2021      	movs	r0, #33	; 0x21
 80021a4:	f000 f94b 	bl	800243e <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 80021a8:	2107      	movs	r1, #7
 80021aa:	2030      	movs	r0, #48	; 0x30
 80021ac:	f000 f947 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 80021b0:	f240 3102 	movw	r1, #770	; 0x302
 80021b4:	2031      	movs	r0, #49	; 0x31
 80021b6:	f000 f942 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 80021ba:	f240 1105 	movw	r1, #261	; 0x105
 80021be:	2032      	movs	r0, #50	; 0x32
 80021c0:	f000 f93d 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 80021c4:	f240 2106 	movw	r1, #518	; 0x206
 80021c8:	2035      	movs	r0, #53	; 0x35
 80021ca:	f000 f938 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 80021ce:	f640 0108 	movw	r1, #2056	; 0x808
 80021d2:	2036      	movs	r0, #54	; 0x36
 80021d4:	f000 f933 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 80021d8:	f240 2106 	movw	r1, #518	; 0x206
 80021dc:	2037      	movs	r0, #55	; 0x37
 80021de:	f000 f92e 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 80021e2:	f240 5104 	movw	r1, #1284	; 0x504
 80021e6:	2038      	movs	r0, #56	; 0x38
 80021e8:	f000 f929 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 80021ec:	2107      	movs	r1, #7
 80021ee:	2039      	movs	r0, #57	; 0x39
 80021f0:	f000 f925 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 80021f4:	f240 1105 	movw	r1, #261	; 0x105
 80021f8:	203c      	movs	r0, #60	; 0x3c
 80021fa:	f000 f920 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 80021fe:	f640 0108 	movw	r1, #2056	; 0x808
 8002202:	203d      	movs	r0, #61	; 0x3d
 8002204:	f000 f91b 	bl	800243e <ili9325_WriteReg>
  HAL_Delay(50); 
 8002208:	2032      	movs	r0, #50	; 0x32
 800220a:	f001 fafb 	bl	8003804 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 800220e:	2100      	movs	r1, #0
 8002210:	2050      	movs	r0, #80	; 0x50
 8002212:	f000 f914 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8002216:	21ef      	movs	r1, #239	; 0xef
 8002218:	2051      	movs	r0, #81	; 0x51
 800221a:	f000 f910 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 800221e:	2100      	movs	r1, #0
 8002220:	2052      	movs	r0, #82	; 0x52
 8002222:	f000 f90c 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8002226:	f240 113f 	movw	r1, #319	; 0x13f
 800222a:	2053      	movs	r0, #83	; 0x53
 800222c:	f000 f907 	bl	800243e <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8002230:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8002234:	2060      	movs	r0, #96	; 0x60
 8002236:	f000 f902 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 800223a:	2101      	movs	r1, #1
 800223c:	2061      	movs	r0, #97	; 0x61
 800223e:	f000 f8fe 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8002242:	2100      	movs	r1, #0
 8002244:	206a      	movs	r0, #106	; 0x6a
 8002246:	f000 f8fa 	bl	800243e <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 800224a:	2100      	movs	r1, #0
 800224c:	2080      	movs	r0, #128	; 0x80
 800224e:	f000 f8f6 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8002252:	2100      	movs	r1, #0
 8002254:	2081      	movs	r0, #129	; 0x81
 8002256:	f000 f8f2 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 800225a:	2100      	movs	r1, #0
 800225c:	2082      	movs	r0, #130	; 0x82
 800225e:	f000 f8ee 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8002262:	2100      	movs	r1, #0
 8002264:	2083      	movs	r0, #131	; 0x83
 8002266:	f000 f8ea 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 800226a:	2100      	movs	r1, #0
 800226c:	2084      	movs	r0, #132	; 0x84
 800226e:	f000 f8e6 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8002272:	2100      	movs	r1, #0
 8002274:	2085      	movs	r0, #133	; 0x85
 8002276:	f000 f8e2 	bl	800243e <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 800227a:	2110      	movs	r1, #16
 800227c:	2090      	movs	r0, #144	; 0x90
 800227e:	f000 f8de 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8002282:	2100      	movs	r1, #0
 8002284:	2092      	movs	r0, #146	; 0x92
 8002286:	f000 f8da 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 800228a:	2103      	movs	r1, #3
 800228c:	2093      	movs	r0, #147	; 0x93
 800228e:	f000 f8d6 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8002292:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002296:	2095      	movs	r0, #149	; 0x95
 8002298:	f000 f8d1 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 800229c:	2100      	movs	r1, #0
 800229e:	2097      	movs	r0, #151	; 0x97
 80022a0:	f000 f8cd 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 80022a4:	2100      	movs	r1, #0
 80022a6:	2098      	movs	r0, #152	; 0x98
 80022a8:	f000 f8c9 	bl	800243e <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80022ac:	f241 0128 	movw	r1, #4136	; 0x1028
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f8c4 	bl	800243e <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 80022b6:	f240 1173 	movw	r1, #371	; 0x173
 80022ba:	2007      	movs	r0, #7
 80022bc:	f000 f8bf 	bl	800243e <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 80022c0:	2100      	movs	r1, #0
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f86d 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80022c8:	2022      	movs	r0, #34	; 0x22
 80022ca:	f7ff feed 	bl	80020a8 <LCD_IO_WriteReg>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80022d6:	2100      	movs	r1, #0
 80022d8:	2010      	movs	r0, #16
 80022da:	f000 f8b0 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80022de:	2100      	movs	r1, #0
 80022e0:	2011      	movs	r0, #17
 80022e2:	f000 f8ac 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80022e6:	2100      	movs	r1, #0
 80022e8:	2012      	movs	r0, #18
 80022ea:	f000 f8a8 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80022ee:	2100      	movs	r1, #0
 80022f0:	2013      	movs	r0, #19
 80022f2:	f000 f8a4 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80022f6:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80022fa:	2010      	movs	r0, #16
 80022fc:	f000 f89f 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002300:	f240 1137 	movw	r1, #311	; 0x137
 8002304:	2011      	movs	r0, #17
 8002306:	f000 f89a 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800230a:	f240 1139 	movw	r1, #313	; 0x139
 800230e:	2012      	movs	r0, #18
 8002310:	f000 f895 	bl	800243e <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8002314:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002318:	2013      	movs	r0, #19
 800231a:	f000 f890 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 800231e:	2113      	movs	r1, #19
 8002320:	2029      	movs	r0, #41	; 0x29
 8002322:	f000 f88c 	bl	800243e <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8002326:	f240 1173 	movw	r1, #371	; 0x173
 800232a:	2007      	movs	r0, #7
 800232c:	f000 f887 	bl	800243e <ili9325_WriteReg>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002338:	2100      	movs	r1, #0
 800233a:	2010      	movs	r0, #16
 800233c:	f000 f87f 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002340:	2100      	movs	r1, #0
 8002342:	2011      	movs	r0, #17
 8002344:	f000 f87b 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8002348:	2100      	movs	r1, #0
 800234a:	2012      	movs	r0, #18
 800234c:	f000 f877 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8002350:	2100      	movs	r1, #0
 8002352:	2013      	movs	r0, #19
 8002354:	f000 f873 	bl	800243e <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8002358:	2100      	movs	r1, #0
 800235a:	2029      	movs	r0, #41	; 0x29
 800235c:	f000 f86f 	bl	800243e <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8002360:	2100      	movs	r1, #0
 8002362:	2007      	movs	r0, #7
 8002364:	f000 f86b 	bl	800243e <ili9325_WriteReg>
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8002370:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8002382:	23f0      	movs	r3, #240	; 0xf0
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8002392:	f7ff fe5e 	bl	8002052 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f866 	bl	8002468 <ili9325_ReadReg>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	460a      	mov	r2, r1
 80023ac:	80fb      	strh	r3, [r7, #6]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 80023b2:	88bb      	ldrh	r3, [r7, #4]
 80023b4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	2020      	movs	r0, #32
 80023be:	f000 f83e 	bl	800243e <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	4619      	mov	r1, r3
 80023c6:	2021      	movs	r0, #33	; 0x21
 80023c8:	f000 f839 	bl	800243e <ili9325_WriteReg>

}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
 80023de:	460b      	mov	r3, r1
 80023e0:	80bb      	strh	r3, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80023e6:	88ba      	ldrh	r2, [r7, #4]
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ffd8 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80023f2:	2022      	movs	r0, #34	; 0x22
 80023f4:	f7ff fe58 	bl	80020a8 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 80023f8:	1cbb      	adds	r3, r7, #2
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fe2f 	bl	8002060 <LCD_IO_WriteMultipleData>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	460a      	mov	r2, r1
 8002414:	80fb      	strh	r3, [r7, #6]
 8002416:	4613      	mov	r3, r2
 8002418:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800241a:	88ba      	ldrh	r2, [r7, #4]
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ffbe 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002426:	2022      	movs	r0, #34	; 0x22
 8002428:	f7ff fe3e 	bl	80020a8 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 800242c:	f7ff fe4c 	bl	80020c8 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8002430:	f7ff fe4a 	bl	80020c8 <LCD_IO_ReadData>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	460a      	mov	r2, r1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	4613      	mov	r3, r2
 800244c:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe29 	bl	80020a8 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fe00 	bl	8002060 <LCD_IO_WriteMultipleData>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe17 	bl	80020a8 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 800247a:	f7ff fe25 	bl	80020c8 <LCD_IO_ReadData>
 800247e:	4603      	mov	r3, r0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4604      	mov	r4, r0
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	4603      	mov	r3, r0
 800249c:	80bb      	strh	r3, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]
 80024a2:	4613      	mov	r3, r2
 80024a4:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 80024a6:	88ba      	ldrh	r2, [r7, #4]
 80024a8:	883b      	ldrh	r3, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4619      	mov	r1, r3
 80024b6:	2050      	movs	r0, #80	; 0x50
 80024b8:	f7ff ffc1 	bl	800243e <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4619      	mov	r1, r3
 80024c6:	2051      	movs	r0, #81	; 0x51
 80024c8:	f7ff ffb9 	bl	800243e <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4619      	mov	r1, r3
 80024d0:	2052      	movs	r0, #82	; 0x52
 80024d2:	f7ff ffb4 	bl	800243e <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4413      	add	r3, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	2053      	movs	r0, #83	; 0x53
 80024e6:	f7ff ffaa 	bl	800243e <ili9325_WriteReg>
  
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
	...

080024f4 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4623      	mov	r3, r4
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	4603      	mov	r3, r0
 8002508:	80bb      	strh	r3, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	807b      	strh	r3, [r7, #2]
 800250e:	4613      	mov	r3, r2
 8002510:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff40 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002522:	2022      	movs	r0, #34	; 0x22
 8002524:	f7ff fdc0 	bl	80020a8 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002528:	2300      	movs	r3, #0
 800252a:	81fb      	strh	r3, [r7, #14]
 800252c:	e007      	b.n	800253e <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	490a      	ldr	r1, [pc, #40]	; (800255c <ili9325_DrawHLine+0x68>)
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	3301      	adds	r3, #1
 800253c:	81fb      	strh	r3, [r7, #14]
 800253e:	89fa      	ldrh	r2, [r7, #14]
 8002540:	883b      	ldrh	r3, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d3f3      	bcc.n	800252e <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002546:	883b      	ldrh	r3, [r7, #0]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4619      	mov	r1, r3
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <ili9325_DrawHLine+0x68>)
 800254e:	f7ff fd87 	bl	8002060 <LCD_IO_WriteMultipleData>
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bd90      	pop	{r4, r7, pc}
 800255a:	bf00      	nop
 800255c:	20000b14 	.word	0x20000b14

08002560 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	4604      	mov	r4, r0
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4623      	mov	r3, r4
 8002570:	80fb      	strh	r3, [r7, #6]
 8002572:	4603      	mov	r3, r0
 8002574:	80bb      	strh	r3, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]
 800257a:	4613      	mov	r3, r2
 800257c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 8002582:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002586:	2003      	movs	r0, #3
 8002588:	f7ff ff59 	bl	800243e <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800258c:	887a      	ldrh	r2, [r7, #2]
 800258e:	88bb      	ldrh	r3, [r7, #4]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff05 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002598:	2022      	movs	r0, #34	; 0x22
 800259a:	f7ff fd85 	bl	80020a8 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800259e:	2300      	movs	r3, #0
 80025a0:	81fb      	strh	r3, [r7, #14]
 80025a2:	e007      	b.n	80025b4 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	490d      	ldr	r1, [pc, #52]	; (80025dc <ili9325_DrawVLine+0x7c>)
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	3301      	adds	r3, #1
 80025b2:	81fb      	strh	r3, [r7, #14]
 80025b4:	89fa      	ldrh	r2, [r7, #14]
 80025b6:	883b      	ldrh	r3, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3f3      	bcc.n	80025a4 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 80025bc:	883b      	ldrh	r3, [r7, #0]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	4806      	ldr	r0, [pc, #24]	; (80025dc <ili9325_DrawVLine+0x7c>)
 80025c4:	f7ff fd4c 	bl	8002060 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 80025c8:	f241 0128 	movw	r1, #4136	; 0x1028
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff ff36 	bl	800243e <ili9325_WriteReg>
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000b14 	.word	0x20000b14

080025e0 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	603a      	str	r2, [r7, #0]
 80025ea:	80fb      	strh	r3, [r7, #6]
 80025ec:	460b      	mov	r3, r1
 80025ee:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3302      	adds	r3, #2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3304      	adds	r3, #4
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4313      	orrs	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	330a      	adds	r3, #10
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	461a      	mov	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8002642:	f241 0138 	movw	r1, #4152	; 0x1038
 8002646:	2003      	movs	r0, #3
 8002648:	f7ff fef9 	bl	800243e <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 800264c:	88ba      	ldrh	r2, [r7, #4]
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fea5 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002658:	2022      	movs	r0, #34	; 0x22
 800265a:	f7ff fd25 	bl	80020a8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4619      	mov	r1, r3
 8002664:	6838      	ldr	r0, [r7, #0]
 8002666:	f7ff fcfb 	bl	8002060 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 800266a:	f241 0128 	movw	r1, #4136	; 0x1028
 800266e:	2003      	movs	r0, #3
 8002670:	f7ff fee5 	bl	800243e <ili9325_WriteReg>
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4604      	mov	r4, r0
 8002684:	4608      	mov	r0, r1
 8002686:	4611      	mov	r1, r2
 8002688:	461a      	mov	r2, r3
 800268a:	4623      	mov	r3, r4
 800268c:	80fb      	strh	r3, [r7, #6]
 800268e:	4603      	mov	r3, r0
 8002690:	80bb      	strh	r3, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	807b      	strh	r3, [r7, #2]
 8002696:	4613      	mov	r3, r2
 8002698:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	883a      	ldrh	r2, [r7, #0]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 80026a8:	88ba      	ldrh	r2, [r7, #4]
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe77 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80026b4:	2022      	movs	r0, #34	; 0x22
 80026b6:	f7ff fcf7 	bl	80020a8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4619      	mov	r1, r3
 80026c0:	6a38      	ldr	r0, [r7, #32]
 80026c2:	f7ff fccd 	bl	8002060 <LCD_IO_WriteMultipleData>
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
	...

080026d0 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 80026da:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 80026e0:	2100      	movs	r1, #0
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff fe5d 	bl	80023a2 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80026e8:	2022      	movs	r0, #34	; 0x22
 80026ea:	f7ff fcdd 	bl	80020a8 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 80026ee:	e002      	b.n	80026f6 <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <ili9325_Clear+0x3c>)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f7      	bne.n	80026f0 <ili9325_Clear+0x20>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	60020000 	.word	0x60020000

08002710 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <BSP_LCD_Init+0x64>)
 800271c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002720:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <BSP_LCD_Init+0x64>)
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <BSP_LCD_Init+0x68>)
 8002726:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <BSP_LCD_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <BSP_LCD_Init+0x6c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4798      	blx	r3
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	f249 3325 	movw	r3, #37669	; 0x9325
 800273c:	429a      	cmp	r2, r3
 800273e:	d008      	beq.n	8002752 <BSP_LCD_Init+0x42>
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <BSP_LCD_Init+0x6c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4798      	blx	r3
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	f249 3328 	movw	r3, #37672	; 0x9328
 800274e:	429a      	cmp	r2, r3
 8002750:	d10b      	bne.n	800276a <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <BSP_LCD_Init+0x70>)
 8002754:	4a09      	ldr	r2, [pc, #36]	; (800277c <BSP_LCD_Init+0x6c>)
 8002756:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <BSP_LCD_Init+0x70>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002760:	4805      	ldr	r0, [pc, #20]	; (8002778 <BSP_LCD_Init+0x68>)
 8002762:	f000 f837 	bl	80027d4 <BSP_LCD_SetFont>

    ret = LCD_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 800276a:	79fb      	ldrb	r3, [r7, #7]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000d94 	.word	0x20000d94
 8002778:	20000074 	.word	0x20000074
 800277c:	20000024 	.word	0x20000024
 8002780:	20000da0 	.word	0x20000da0

08002784 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <BSP_LCD_GetXSize+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	4798      	blx	r3
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000da0 	.word	0x20000da0

0800279c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <BSP_LCD_GetYSize+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	4798      	blx	r3
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000da0 	.word	0x20000da0

080027b4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <BSP_LCD_SetTextColor+0x1c>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	20000d94 	.word	0x20000d94

080027d4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <BSP_LCD_SetFont+0x1c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6093      	str	r3, [r2, #8]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000d94 	.word	0x20000d94

080027f4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <BSP_LCD_GetFont+0x14>)
 80027fa:	689b      	ldr	r3, [r3, #8]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000d94 	.word	0x20000d94

0800280c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <BSP_LCD_Clear+0x64>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <BSP_LCD_Clear+0x64>)
 8002824:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e00d      	b.n	8002848 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b29c      	uxth	r4, r3
 8002830:	f7ff ffa8 	bl	8002784 <BSP_LCD_GetXSize>
 8002834:	4603      	mov	r3, r0
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	4621      	mov	r1, r4
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f8e9 	bl	8002a14 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	f7ff ffa8 	bl	800279c <BSP_LCD_GetYSize>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4293      	cmp	r3, r2
 8002852:	d3eb      	bcc.n	800282c <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <BSP_LCD_Clear+0x64>)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <BSP_LCD_Clear+0x64>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ffa7 	bl	80027b4 <BSP_LCD_SetTextColor>
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	20000d94 	.word	0x20000d94

08002874 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
 800287e:	460b      	mov	r3, r1
 8002880:	80bb      	strh	r3, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <BSP_LCD_DisplayChar+0x50>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002890:	490c      	ldr	r1, [pc, #48]	; (80028c4 <BSP_LCD_DisplayChar+0x50>)
 8002892:	6889      	ldr	r1, [r1, #8]
 8002894:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002896:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <BSP_LCD_DisplayChar+0x50>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	889b      	ldrh	r3, [r3, #4]
 80028a0:	3307      	adds	r3, #7
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da00      	bge.n	80028a8 <BSP_LCD_DisplayChar+0x34>
 80028a6:	3307      	adds	r3, #7
 80028a8:	10db      	asrs	r3, r3, #3
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80028ae:	441a      	add	r2, r3
 80028b0:	88b9      	ldrh	r1, [r7, #4]
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f9bd 	bl	8002c34 <LCD_DrawChar>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000d94 	.word	0x20000d94

080028c8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60ba      	str	r2, [r7, #8]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	81fb      	strh	r3, [r7, #14]
 80028d6:	460b      	mov	r3, r1
 80028d8:	81bb      	strh	r3, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 80028de:	2301      	movs	r3, #1
 80028e0:	83fb      	strh	r3, [r7, #30]
 80028e2:	2300      	movs	r3, #0
 80028e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028f2:	e002      	b.n	80028fa <BSP_LCD_DisplayStringAt+0x32>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	617a      	str	r2, [r7, #20]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f6      	bne.n	80028f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002906:	f7ff ff3d 	bl	8002784 <BSP_LCD_GetXSize>
 800290a:	4602      	mov	r2, r0
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <BSP_LCD_DisplayStringAt+0x118>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	889b      	ldrh	r3, [r3, #4]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d014      	beq.n	8002948 <BSP_LCD_DisplayStringAt+0x80>
 800291e:	2b03      	cmp	r3, #3
 8002920:	dc23      	bgt.n	800296a <BSP_LCD_DisplayStringAt+0xa2>
 8002922:	2b01      	cmp	r3, #1
 8002924:	d002      	beq.n	800292c <BSP_LCD_DisplayStringAt+0x64>
 8002926:	2b02      	cmp	r3, #2
 8002928:	d011      	beq.n	800294e <BSP_LCD_DisplayStringAt+0x86>
 800292a:	e01e      	b.n	800296a <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <BSP_LCD_DisplayStringAt+0x118>)
 8002934:	6892      	ldr	r2, [r2, #8]
 8002936:	8892      	ldrh	r2, [r2, #4]
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	4413      	add	r3, r2
 8002944:	83fb      	strh	r3, [r7, #30]
      break;
 8002946:	e013      	b.n	8002970 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	83fb      	strh	r3, [r7, #30]
      break;
 800294c:	e010      	b.n	8002970 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <BSP_LCD_DisplayStringAt+0x118>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	889b      	ldrh	r3, [r3, #4]
 800295c:	fb12 f303 	smulbb	r3, r2, r3
 8002960:	b29a      	uxth	r2, r3
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	83fb      	strh	r3, [r7, #30]
      break;
 8002968:	e002      	b.n	8002970 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 800296a:	89fb      	ldrh	r3, [r7, #14]
 800296c:	83fb      	strh	r3, [r7, #30]
      break;
 800296e:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002970:	e012      	b.n	8002998 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	89b9      	ldrh	r1, [r7, #12]
 8002978:	8bfb      	ldrh	r3, [r7, #30]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff7a 	bl	8002874 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <BSP_LCD_DisplayStringAt+0x118>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	889a      	ldrh	r2, [r3, #4]
 8002986:	8bfb      	ldrh	r3, [r7, #30]
 8002988:	4413      	add	r3, r2
 800298a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3301      	adds	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
    counter++;
 8002992:	8bbb      	ldrh	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2dc      	uxtb	r4, r3
 80029a6:	f7ff feed 	bl	8002784 <BSP_LCD_GetXSize>
 80029aa:	4601      	mov	r1, r0
 80029ac:	8bbb      	ldrh	r3, [r7, #28]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <BSP_LCD_DisplayStringAt+0x118>)
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	8892      	ldrh	r2, [r2, #4]
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	1acb      	subs	r3, r1, r3
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <BSP_LCD_DisplayStringAt+0x118>)
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	8892      	ldrh	r2, [r2, #4]
 80029c2:	4293      	cmp	r3, r2
 80029c4:	bf2c      	ite	cs
 80029c6:	2301      	movcs	r3, #1
 80029c8:	2300      	movcc	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4023      	ands	r3, r4
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ce      	bne.n	8002972 <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000d94 	.word	0x20000d94

080029e4 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 80029f0:	f7ff ff00 	bl	80027f4 <BSP_LCD_GetFont>
 80029f4:	4603      	mov	r3, r0
 80029f6:	88db      	ldrh	r3, [r3, #6]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	fb12 f303 	smulbb	r3, r2, r3
 80029fe:	b299      	uxth	r1, r3
 8002a00:	2303      	movs	r3, #3
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7ff ff5f 	bl	80028c8 <BSP_LCD_DisplayStringAt>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	80bb      	strh	r3, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <BSP_LCD_DrawHLine+0x6c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <BSP_LCD_DrawHLine+0x6c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6a1c      	ldr	r4, [r3, #32]
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <BSP_LCD_DrawHLine+0x70>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b298      	uxth	r0, r3
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	88ba      	ldrh	r2, [r7, #4]
 8002a44:	88f9      	ldrh	r1, [r7, #6]
 8002a46:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002a48:	e015      	b.n	8002a76 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e00e      	b.n	8002a6e <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	4413      	add	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <BSP_LCD_DrawHLine+0x70>)
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	88b9      	ldrh	r1, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f8ca 	bl	8002bfc <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3ec      	bcc.n	8002a50 <BSP_LCD_DrawHLine+0x3c>
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000da0 	.word	0x20000da0
 8002a84:	20000d94 	.word	0x20000d94

08002a88 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
 8002a92:	460b      	mov	r3, r1
 8002a94:	80bb      	strh	r3, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <BSP_LCD_DrawVLine+0x6c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <BSP_LCD_DrawVLine+0x6c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <BSP_LCD_DrawVLine+0x70>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b298      	uxth	r0, r3
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	88ba      	ldrh	r2, [r7, #4]
 8002ab8:	88f9      	ldrh	r1, [r7, #6]
 8002aba:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8002abc:	e015      	b.n	8002aea <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e00e      	b.n	8002ae2 <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	88bb      	ldrh	r3, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	b299      	uxth	r1, r3
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <BSP_LCD_DrawVLine+0x70>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f890 	bl	8002bfc <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3ec      	bcc.n	8002ac4 <BSP_LCD_DrawVLine+0x3c>
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000da0 	.word	0x20000da0
 8002af8:	20000d94 	.word	0x20000d94

08002afc <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	603a      	str	r2, [r7, #0]
 8002b06:	80fb      	strh	r3, [r7, #6]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	3312      	adds	r3, #18
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3316      	adds	r3, #22
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3318      	adds	r3, #24
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	88b9      	ldrh	r1, [r7, #4]
 8002b4e:	88f8      	ldrh	r0, [r7, #6]
 8002b50:	f000 f962 	bl	8002e18 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <BSP_LCD_DrawBitmap+0x94>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <BSP_LCD_DrawBitmap+0x94>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	88b9      	ldrh	r1, [r7, #4]
 8002b66:	88f8      	ldrh	r0, [r7, #6]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002b6c:	f7ff fe0a 	bl	8002784 <BSP_LCD_GetXSize>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29c      	uxth	r4, r3
 8002b74:	f7ff fe12 	bl	800279c <BSP_LCD_GetYSize>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2000      	movs	r0, #0
 8002b82:	f000 f949 	bl	8002e18 <LCD_SetDisplayWindow>
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000da0 	.word	0x20000da0

08002b94 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	80fb      	strh	r3, [r7, #6]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80bb      	strh	r3, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <BSP_LCD_FillRect+0x50>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fdfb 	bl	80027b4 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8002bbe:	88bb      	ldrh	r3, [r7, #4]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	80ba      	strh	r2, [r7, #4]
 8002bc4:	887a      	ldrh	r2, [r7, #2]
 8002bc6:	88f8      	ldrh	r0, [r7, #6]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f7ff ff23 	bl	8002a14 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8002bce:	883b      	ldrh	r3, [r7, #0]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	803a      	strh	r2, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f2      	bne.n	8002bbe <BSP_LCD_FillRect+0x2a>
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000d94 	.word	0x20000d94

08002be8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <BSP_LCD_DisplayOn+0x10>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4798      	blx	r3
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000da0 	.word	0x20000da0

08002bfc <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
 8002c06:	460b      	mov	r3, r1
 8002c08:	80bb      	strh	r3, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <LCD_DrawPixel+0x34>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <LCD_DrawPixel+0x34>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	88b9      	ldrh	r1, [r7, #4]
 8002c22:	88f8      	ldrh	r0, [r7, #6]
 8002c24:	4798      	blx	r3
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000da0 	.word	0x20000da0

08002c34 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	603a      	str	r2, [r7, #0]
 8002c3e:	80fb      	strh	r3, [r7, #6]
 8002c40:	460b      	mov	r3, r1
 8002c42:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	2300      	movs	r3, #0
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	82fb      	strh	r3, [r7, #22]
 8002c54:	2300      	movs	r3, #0
 8002c56:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8002c64:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <LCD_DrawChar+0x1c0>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	88db      	ldrh	r3, [r3, #6]
 8002c6a:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <LCD_DrawChar+0x1c0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	889b      	ldrh	r3, [r3, #4]
 8002c72:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8002c74:	8afa      	ldrh	r2, [r7, #22]
 8002c76:	8abb      	ldrh	r3, [r7, #20]
 8002c78:	fb12 f303 	smulbb	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	331b      	adds	r3, #27
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <LCD_DrawChar+0x1c4>)
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8002c8a:	8afb      	ldrh	r3, [r7, #22]
 8002c8c:	8aba      	ldrh	r2, [r7, #20]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	331b      	adds	r3, #27
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	141a      	asrs	r2, r3, #16
 8002c98:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <LCD_DrawChar+0x1c8>)
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <LCD_DrawChar+0x1cc>)
 8002ca0:	2236      	movs	r2, #54	; 0x36
 8002ca2:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <LCD_DrawChar+0x1d0>)
 8002ca6:	8abb      	ldrh	r3, [r7, #20]
 8002ca8:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8002caa:	8abb      	ldrh	r3, [r7, #20]
 8002cac:	141a      	asrs	r2, r3, #16
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <LCD_DrawChar+0x1d4>)
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8002cb4:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <LCD_DrawChar+0x1d8>)
 8002cb6:	8afb      	ldrh	r3, [r7, #22]
 8002cb8:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8002cba:	8afb      	ldrh	r3, [r7, #22]
 8002cbc:	141a      	asrs	r2, r3, #16
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <LCD_DrawChar+0x1dc>)
 8002cc0:	b292      	uxth	r2, r2
 8002cc2:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8002cc4:	8abb      	ldrh	r3, [r7, #20]
 8002cc6:	3307      	adds	r3, #7
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	da00      	bge.n	8002cce <LCD_DrawChar+0x9a>
 8002ccc:	3307      	adds	r3, #7
 8002cce:	10db      	asrs	r3, r3, #3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8abb      	ldrh	r3, [r7, #20]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e078      	b.n	8002dd6 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8002ce4:	8abb      	ldrh	r3, [r7, #20]
 8002ce6:	3307      	adds	r3, #7
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da00      	bge.n	8002cee <LCD_DrawChar+0xba>
 8002cec:	3307      	adds	r3, #7
 8002cee:	10db      	asrs	r3, r3, #3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8002cfe:	8abb      	ldrh	r3, [r7, #20]
 8002d00:	3b11      	subs	r3, #17
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d80c      	bhi.n	8002d20 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	041a      	lsls	r2, r3, #16
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	4313      	orrs	r3, r2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	3202      	adds	r2, #2
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8002d20:	8abb      	ldrh	r3, [r7, #20]
 8002d22:	3b09      	subs	r3, #9
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	d807      	bhi.n	8002d38 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	3201      	adds	r2, #1
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8002d38:	8abb      	ldrh	r3, [r7, #20]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	2b07      	cmp	r3, #7
 8002d3e:	d802      	bhi.n	8002d46 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	e03d      	b.n	8002dc8 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8002d4c:	8afa      	ldrh	r2, [r7, #22]
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	8aba      	ldrh	r2, [r7, #20]
 8002d56:	fb03 f202 	mul.w	r2, r3, r2
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	331b      	adds	r3, #27
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8002d64:	8aba      	ldrh	r2, [r7, #20]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	1ad2      	subs	r2, r2, r3
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	2201      	movs	r2, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d010      	beq.n	8002da2 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <LCD_DrawChar+0x1c0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2d9      	uxtb	r1, r3
 8002d86:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <LCD_DrawChar+0x1e0>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <LCD_DrawChar+0x1c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0a1a      	lsrs	r2, r3, #8
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2d1      	uxtb	r1, r2
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <LCD_DrawChar+0x1e0>)
 8002d9e:	54d1      	strb	r1, [r2, r3]
 8002da0:	e00f      	b.n	8002dc2 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <LCD_DrawChar+0x1c0>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b2d9      	uxtb	r1, r3
 8002da8:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <LCD_DrawChar+0x1e0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	460a      	mov	r2, r1
 8002db0:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <LCD_DrawChar+0x1c0>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	0a1a      	lsrs	r2, r3, #8
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b2d1      	uxtb	r1, r2
 8002dbe:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <LCD_DrawChar+0x1e0>)
 8002dc0:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	8abb      	ldrh	r3, [r7, #20]
 8002dca:	6a3a      	ldr	r2, [r7, #32]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3bd      	bcc.n	8002d4c <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	8afb      	ldrh	r3, [r7, #22]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d382      	bcc.n	8002ce4 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8002dde:	88b9      	ldrh	r1, [r7, #4]
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <LCD_DrawChar+0x1e0>)
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fe89 	bl	8002afc <BSP_LCD_DrawBitmap>
}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000d94 	.word	0x20000d94
 8002df8:	20000da6 	.word	0x20000da6
 8002dfc:	20000da8 	.word	0x20000da8
 8002e00:	20000dae 	.word	0x20000dae
 8002e04:	20000db6 	.word	0x20000db6
 8002e08:	20000db8 	.word	0x20000db8
 8002e0c:	20000dba 	.word	0x20000dba
 8002e10:	20000dbc 	.word	0x20000dbc
 8002e14:	20000da4 	.word	0x20000da4

08002e18 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4604      	mov	r4, r0
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4623      	mov	r3, r4
 8002e28:	80fb      	strh	r3, [r7, #6]
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80bb      	strh	r3, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	807b      	strh	r3, [r7, #2]
 8002e32:	4613      	mov	r3, r2
 8002e34:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <LCD_SetDisplayWindow+0x40>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <LCD_SetDisplayWindow+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69dc      	ldr	r4, [r3, #28]
 8002e46:	883b      	ldrh	r3, [r7, #0]
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	88b9      	ldrh	r1, [r7, #4]
 8002e4c:	88f8      	ldrh	r0, [r7, #6]
 8002e4e:	47a0      	blx	r4
  }  
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	20000da0 	.word	0x20000da0

08002e5c <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	60fb      	str	r3, [r7, #12]
  while(i--);
 8002e6a:	bf00      	nop
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	60fa      	str	r2, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1fa      	bne.n	8002e6c <DelayUS+0x10>
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 8002e8e:	1df9      	adds	r1, r7, #7
 8002e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e94:	2201      	movs	r2, #1
 8002e96:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <WR_CMD+0x20>)
 8002e98:	f003 fc6b 	bl	8006772 <HAL_SPI_Transmit>
} 
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000a70 	.word	0x20000a70

08002ea8 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 8002eae:	4639      	mov	r1, r7
 8002eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	4809      	ldr	r0, [pc, #36]	; (8002edc <RD_AD+0x34>)
 8002eb8:	f003 fd97 	bl	80069ea <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 8002ebc:	783b      	ldrb	r3, [r7, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	607b      	str	r3, [r7, #4]
  return value;
 8002ed2:	687b      	ldr	r3, [r7, #4]
} 
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000a70 	.word	0x20000a70

08002ee0 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2110      	movs	r1, #16
 8002eea:	480c      	ldr	r0, [pc, #48]	; (8002f1c <Read_X+0x3c>)
 8002eec:	f001 fc0c 	bl	8004708 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f7ff ffb3 	bl	8002e5c <DelayUS>
  WR_CMD(CHX); 
 8002ef6:	2090      	movs	r0, #144	; 0x90
 8002ef8:	f7ff ffc4 	bl	8002e84 <WR_CMD>
  DelayUS(1); 
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7ff ffad 	bl	8002e5c <DelayUS>
  i=RD_AD(); 
 8002f02:	f7ff ffd1 	bl	8002ea8 <RD_AD>
 8002f06:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2110      	movs	r1, #16
 8002f0c:	4803      	ldr	r0, [pc, #12]	; (8002f1c <Read_X+0x3c>)
 8002f0e:	f001 fbfb 	bl	8004708 <HAL_GPIO_WritePin>
  return i;    
 8002f12:	687b      	ldr	r3, [r7, #4]
} 
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40020800 	.word	0x40020800

08002f20 <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8002f26:	2200      	movs	r2, #0
 8002f28:	2110      	movs	r1, #16
 8002f2a:	480c      	ldr	r0, [pc, #48]	; (8002f5c <Read_Y+0x3c>)
 8002f2c:	f001 fbec 	bl	8004708 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7ff ff93 	bl	8002e5c <DelayUS>
  WR_CMD(CHY); 
 8002f36:	20d0      	movs	r0, #208	; 0xd0
 8002f38:	f7ff ffa4 	bl	8002e84 <WR_CMD>
  DelayUS(1); 
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff ff8d 	bl	8002e5c <DelayUS>
  i=RD_AD(); 
 8002f42:	f7ff ffb1 	bl	8002ea8 <RD_AD>
 8002f46:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <Read_Y+0x3c>)
 8002f4e:	f001 fbdb 	bl	8004708 <HAL_GPIO_WritePin>
  return i;     
 8002f52:	687b      	ldr	r3, [r7, #4]
} 
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40020800 	.word	0x40020800

08002f60 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 8002f6a:	f7ff ffb9 	bl	8002ee0 <Read_X>
 8002f6e:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7ff ff73 	bl	8002e5c <DelayUS>
  ady=Read_Y(); 
 8002f76:	f7ff ffd3 	bl	8002f20 <Read_Y>
 8002f7a:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]
  *y=ady; 
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	601a      	str	r2, [r3, #0]
} 
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	460a      	mov	r2, r1
 8002f9a:	80fb      	strh	r3, [r7, #6]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	3b0d      	subs	r3, #13
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	88b9      	ldrh	r1, [r7, #4]
 8002fa8:	220a      	movs	r2, #10
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fd32 	bl	8002a14 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	88b9      	ldrh	r1, [r7, #4]
 8002fb8:	220a      	movs	r2, #10
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fd2a 	bl	8002a14 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 8002fc0:	88bb      	ldrh	r3, [r7, #4]
 8002fc2:	3b0d      	subs	r3, #13
 8002fc4:	b299      	uxth	r1, r3
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	220a      	movs	r2, #10
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fd5c 	bl	8002a88 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 8002fd0:	88bb      	ldrh	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	220a      	movs	r2, #10
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fd54 	bl	8002a88 <BSP_LCD_DrawVLine>

}  
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b09c      	sub	sp, #112	; 0x70
 8002fec:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2248      	movs	r2, #72	; 0x48
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f009 fe21 	bl	800cc42 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 8003000:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003004:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ffa8 	bl	8002f60 <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 8003010:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	3370      	adds	r3, #112	; 0x70
 800301a:	443b      	add	r3, r7
 800301c:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 8003020:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003026:	3309      	adds	r3, #9
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	3370      	adds	r3, #112	; 0x70
 800302c:	443b      	add	r3, r7
 800302e:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 8003032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003036:	3301      	adds	r3, #1
 8003038:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 800303c:	2120      	movs	r1, #32
 800303e:	4885      	ldr	r0, [pc, #532]	; (8003254 <Read_Ads7846+0x26c>)
 8003040:	f001 fb4a 	bl	80046d8 <HAL_GPIO_ReadPin>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <Read_Ads7846+0x6a>
 800304a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800304e:	2b08      	cmp	r3, #8
 8003050:	d9d6      	bls.n	8003000 <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 8003052:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003056:	2b09      	cmp	r3, #9
 8003058:	f040 80f6 	bne.w	8003248 <Read_Ads7846+0x260>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	4a7c      	ldr	r2, [pc, #496]	; (8003258 <Read_Ads7846+0x270>)
 8003068:	fb82 1203 	smull	r1, r2, r2, r3
 800306c:	17db      	asrs	r3, r3, #31
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	441a      	add	r2, r3
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	4413      	add	r3, r2
 800307c:	4a76      	ldr	r2, [pc, #472]	; (8003258 <Read_Ads7846+0x270>)
 800307e:	fb82 1203 	smull	r1, r2, r2, r3
 8003082:	17db      	asrs	r3, r3, #31
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	441a      	add	r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	4413      	add	r3, r2
 8003092:	4a71      	ldr	r2, [pc, #452]	; (8003258 <Read_Ads7846+0x270>)
 8003094:	fb82 1203 	smull	r1, r2, r2, r3
 8003098:	17db      	asrs	r3, r3, #31
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 800309e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 80030a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 80030ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 80030b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bfb8      	it	lt
 80030bc:	425b      	neglt	r3, r3
 80030be:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 80030c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	425b      	neglt	r3, r3
 80030c8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 80030ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bfb8      	it	lt
 80030d0:	425b      	neglt	r3, r3
 80030d2:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 80030d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	dd07      	ble.n	80030ea <Read_Ads7846+0x102>
 80030da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030dc:	2b02      	cmp	r3, #2
 80030de:	dd04      	ble.n	80030ea <Read_Ads7846+0x102>
 80030e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	dd01      	ble.n	80030ea <Read_Ads7846+0x102>
 80030e6:	2300      	movs	r3, #0
 80030e8:	e0af      	b.n	800324a <Read_Ads7846+0x262>
   
    if(m0<m1)
 80030ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ee:	429a      	cmp	r2, r3
 80030f0:	da17      	bge.n	8003122 <Read_Ads7846+0x13a>
    {
      if(m2<m0) 
 80030f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f6:	429a      	cmp	r2, r3
 80030f8:	da09      	bge.n	800310e <Read_Ads7846+0x126>
        screen.x=(temp[0]+temp[2])/2;
 80030fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fe:	4413      	add	r3, r2
 8003100:	0fda      	lsrs	r2, r3, #31
 8003102:	4413      	add	r3, r2
 8003104:	105b      	asrs	r3, r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b54      	ldr	r3, [pc, #336]	; (800325c <Read_Ads7846+0x274>)
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	e020      	b.n	8003150 <Read_Ads7846+0x168>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 800310e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003112:	4413      	add	r3, r2
 8003114:	0fda      	lsrs	r2, r3, #31
 8003116:	4413      	add	r3, r2
 8003118:	105b      	asrs	r3, r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <Read_Ads7846+0x274>)
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e016      	b.n	8003150 <Read_Ads7846+0x168>
    }
    else if(m2<m1) 
 8003122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003126:	429a      	cmp	r2, r3
 8003128:	da09      	bge.n	800313e <Read_Ads7846+0x156>
      screen.x=(temp[0]+temp[2])/2;
 800312a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312e:	4413      	add	r3, r2
 8003130:	0fda      	lsrs	r2, r3, #31
 8003132:	4413      	add	r3, r2
 8003134:	105b      	asrs	r3, r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	4b48      	ldr	r3, [pc, #288]	; (800325c <Read_Ads7846+0x274>)
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	e008      	b.n	8003150 <Read_Ads7846+0x168>
    else 
      screen.x=(temp[1]+temp[2])/2;
 800313e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	4413      	add	r3, r2
 8003144:	0fda      	lsrs	r2, r3, #31
 8003146:	4413      	add	r3, r2
 8003148:	105b      	asrs	r3, r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <Read_Ads7846+0x274>)
 800314e:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8003150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	441a      	add	r2, r3
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	4413      	add	r3, r2
 800315a:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <Read_Ads7846+0x270>)
 800315c:	fb82 1203 	smull	r1, r2, r2, r3
 8003160:	17db      	asrs	r3, r3, #31
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	441a      	add	r2, r3
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	4413      	add	r3, r2
 8003170:	4a39      	ldr	r2, [pc, #228]	; (8003258 <Read_Ads7846+0x270>)
 8003172:	fb82 1203 	smull	r1, r2, r2, r3
 8003176:	17db      	asrs	r3, r3, #31
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 800317c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800317e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003180:	441a      	add	r2, r3
 8003182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003184:	4413      	add	r3, r2
 8003186:	4a34      	ldr	r2, [pc, #208]	; (8003258 <Read_Ads7846+0x270>)
 8003188:	fb82 1203 	smull	r1, r2, r2, r3
 800318c:	17db      	asrs	r3, r3, #31
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 8003192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 800319a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800319c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 80031a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 80031aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bfb8      	it	lt
 80031b0:	425b      	neglt	r3, r3
 80031b2:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 80031b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfb8      	it	lt
 80031ba:	425b      	neglt	r3, r3
 80031bc:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 80031be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bfb8      	it	lt
 80031c4:	425b      	neglt	r3, r3
 80031c6:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 80031c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	dd07      	ble.n	80031de <Read_Ads7846+0x1f6>
 80031ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	dd04      	ble.n	80031de <Read_Ads7846+0x1f6>
 80031d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	dd01      	ble.n	80031de <Read_Ads7846+0x1f6>
 80031da:	2300      	movs	r3, #0
 80031dc:	e035      	b.n	800324a <Read_Ads7846+0x262>
   
    if(m0<m1)
 80031de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e2:	429a      	cmp	r2, r3
 80031e4:	da17      	bge.n	8003216 <Read_Ads7846+0x22e>
    {
      if(m2<m0) 
 80031e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ea:	429a      	cmp	r2, r3
 80031ec:	da09      	bge.n	8003202 <Read_Ads7846+0x21a>
        screen.y=(temp[0]+temp[2])/2;
 80031ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f2:	4413      	add	r3, r2
 80031f4:	0fda      	lsrs	r2, r3, #31
 80031f6:	4413      	add	r3, r2
 80031f8:	105b      	asrs	r3, r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <Read_Ads7846+0x274>)
 80031fe:	805a      	strh	r2, [r3, #2]
 8003200:	e020      	b.n	8003244 <Read_Ads7846+0x25c>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 8003202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003206:	4413      	add	r3, r2
 8003208:	0fda      	lsrs	r2, r3, #31
 800320a:	4413      	add	r3, r2
 800320c:	105b      	asrs	r3, r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <Read_Ads7846+0x274>)
 8003212:	805a      	strh	r2, [r3, #2]
 8003214:	e016      	b.n	8003244 <Read_Ads7846+0x25c>
      }
    else if(m2<m1) 
 8003216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800321a:	429a      	cmp	r2, r3
 800321c:	da09      	bge.n	8003232 <Read_Ads7846+0x24a>
       screen.y=(temp[0]+temp[2])/2;
 800321e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	4413      	add	r3, r2
 8003224:	0fda      	lsrs	r2, r3, #31
 8003226:	4413      	add	r3, r2
 8003228:	105b      	asrs	r3, r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <Read_Ads7846+0x274>)
 800322e:	805a      	strh	r2, [r3, #2]
 8003230:	e008      	b.n	8003244 <Read_Ads7846+0x25c>
    else
       screen.y=(temp[1]+temp[2])/2;
 8003232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	4413      	add	r3, r2
 8003238:	0fda      	lsrs	r2, r3, #31
 800323a:	4413      	add	r3, r2
 800323c:	105b      	asrs	r3, r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <Read_Ads7846+0x274>)
 8003242:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <Read_Ads7846+0x274>)
 8003246:	e000      	b.n	800324a <Read_Ads7846+0x262>
  }
  return 0; 
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3770      	adds	r7, #112	; 0x70
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40020800 	.word	0x40020800
 8003258:	55555556 	.word	0x55555556
 800325c:	20001158 	.word	0x20001158

08003260 <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 800326c:	2301      	movs	r3, #1
 800326e:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3308      	adds	r3, #8
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	3204      	adds	r2, #4
 8003282:	8852      	ldrh	r2, [r2, #2]
 8003284:	4611      	mov	r1, r2
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	3208      	adds	r2, #8
 800328a:	8852      	ldrh	r2, [r2, #2]
 800328c:	1a8a      	subs	r2, r1, r2
 800328e:	fb03 f202 	mul.w	r2, r3, r2
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3304      	adds	r3, #4
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3308      	adds	r3, #8
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	1acb      	subs	r3, r1, r3
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	8849      	ldrh	r1, [r1, #2]
 80032a6:	4608      	mov	r0, r1
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	3108      	adds	r1, #8
 80032ac:	8849      	ldrh	r1, [r1, #2]
 80032ae:	1a41      	subs	r1, r0, r1
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f8e4 	bl	8000484 <__aeabi_i2d>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	f7fd fba8 	bl	8000a28 <__aeabi_dcmpeq>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]
 80032e2:	e145      	b.n	8003570 <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3308      	adds	r3, #8
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	3204      	adds	r2, #4
 80032f6:	8852      	ldrh	r2, [r2, #2]
 80032f8:	4611      	mov	r1, r2
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	3208      	adds	r2, #8
 80032fe:	8852      	ldrh	r2, [r2, #2]
 8003300:	1a8a      	subs	r2, r1, r2
 8003302:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3304      	adds	r3, #4
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3308      	adds	r3, #8
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	1acb      	subs	r3, r1, r3
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	8849      	ldrh	r1, [r1, #2]
 800331a:	4608      	mov	r0, r1
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	3108      	adds	r1, #8
 8003320:	8849      	ldrh	r1, [r1, #2]
 8003322:	1a41      	subs	r1, r0, r1
 8003324:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f8aa 	bl	8000484 <__aeabi_i2d>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	e9c1 2300 	strd	r2, r3, [r1]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3308      	adds	r3, #8
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	3204      	adds	r2, #4
 800334c:	8812      	ldrh	r2, [r2, #0]
 800334e:	4611      	mov	r1, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	3208      	adds	r2, #8
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	1a8a      	subs	r2, r1, r2
 8003358:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	4619      	mov	r1, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3308      	adds	r3, #8
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	1acb      	subs	r3, r1, r3
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	3104      	adds	r1, #4
 800336e:	8809      	ldrh	r1, [r1, #0]
 8003370:	4608      	mov	r0, r1
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	3108      	adds	r1, #8
 8003376:	8809      	ldrh	r1, [r1, #0]
 8003378:	1a41      	subs	r1, r0, r1
 800337a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f87f 	bl	8000484 <__aeabi_i2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3308      	adds	r3, #8
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3304      	adds	r3, #4
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	fb03 f202 	mul.w	r2, r3, r2
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3304      	adds	r3, #4
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3308      	adds	r3, #8
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	8852      	ldrh	r2, [r2, #2]
 80033ba:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	4619      	mov	r1, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3308      	adds	r3, #8
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	fb03 f101 	mul.w	r1, r3, r1
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	3308      	adds	r3, #8
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1acb      	subs	r3, r1, r3
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	3104      	adds	r1, #4
 80033e4:	8849      	ldrh	r1, [r1, #2]
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80033ea:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3304      	adds	r3, #4
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	4619      	mov	r1, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	fb03 f101 	mul.w	r1, r3, r1
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3304      	adds	r3, #4
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	fb00 f303 	mul.w	r3, r0, r3
 800340c:	1acb      	subs	r3, r1, r3
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	3108      	adds	r1, #8
 8003412:	8849      	ldrh	r1, [r1, #2]
 8003414:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8003418:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f832 	bl	8000484 <__aeabi_i2d>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	885b      	ldrh	r3, [r3, #2]
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3308      	adds	r3, #8
 8003434:	885b      	ldrh	r3, [r3, #2]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	3204      	adds	r2, #4
 800343c:	8852      	ldrh	r2, [r2, #2]
 800343e:	4611      	mov	r1, r2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	3208      	adds	r2, #8
 8003444:	8852      	ldrh	r2, [r2, #2]
 8003446:	1a8a      	subs	r2, r1, r2
 8003448:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3304      	adds	r3, #4
 8003450:	885b      	ldrh	r3, [r3, #2]
 8003452:	4619      	mov	r1, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3308      	adds	r3, #8
 8003458:	885b      	ldrh	r3, [r3, #2]
 800345a:	1acb      	subs	r3, r1, r3
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	8849      	ldrh	r1, [r1, #2]
 8003460:	4608      	mov	r0, r1
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	3108      	adds	r1, #8
 8003466:	8849      	ldrh	r1, [r1, #2]
 8003468:	1a41      	subs	r1, r0, r1
 800346a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f807 	bl	8000484 <__aeabi_i2d>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3308      	adds	r3, #8
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	3204      	adds	r2, #4
 8003492:	8852      	ldrh	r2, [r2, #2]
 8003494:	4611      	mov	r1, r2
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	3208      	adds	r2, #8
 800349a:	8852      	ldrh	r2, [r2, #2]
 800349c:	1a8a      	subs	r2, r1, r2
 800349e:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	885b      	ldrh	r3, [r3, #2]
 80034a6:	4619      	mov	r1, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3308      	adds	r3, #8
 80034ac:	885b      	ldrh	r3, [r3, #2]
 80034ae:	1acb      	subs	r3, r1, r3
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	3104      	adds	r1, #4
 80034b4:	8809      	ldrh	r1, [r1, #0]
 80034b6:	4608      	mov	r0, r1
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	3108      	adds	r1, #8
 80034bc:	8809      	ldrh	r1, [r1, #0]
 80034be:	1a41      	subs	r1, r0, r1
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fc ffdc 	bl	8000484 <__aeabi_i2d>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3308      	adds	r3, #8
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3304      	adds	r3, #4
 80034e2:	885b      	ldrh	r3, [r3, #2]
 80034e4:	fb03 f202 	mul.w	r2, r3, r2
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3304      	adds	r3, #4
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	4619      	mov	r1, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3308      	adds	r3, #8
 80034f4:	885b      	ldrh	r3, [r3, #2]
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	8852      	ldrh	r2, [r2, #2]
 8003500:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3308      	adds	r3, #8
 800350e:	885b      	ldrh	r3, [r3, #2]
 8003510:	fb03 f101 	mul.w	r1, r3, r1
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3308      	adds	r3, #8
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	885b      	ldrh	r3, [r3, #2]
 8003520:	fb00 f303 	mul.w	r3, r0, r3
 8003524:	1acb      	subs	r3, r1, r3
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	3104      	adds	r1, #4
 800352a:	8849      	ldrh	r1, [r1, #2]
 800352c:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003530:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3304      	adds	r3, #4
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	4619      	mov	r1, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	885b      	ldrh	r3, [r3, #2]
 800353e:	fb03 f101 	mul.w	r1, r3, r1
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3304      	adds	r3, #4
 800354c:	885b      	ldrh	r3, [r3, #2]
 800354e:	fb00 f303 	mul.w	r3, r0, r3
 8003552:	1acb      	subs	r3, r1, r3
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	3108      	adds	r1, #8
 8003558:	8849      	ldrh	r1, [r1, #2]
 800355a:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 800355e:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc ff8f 	bl	8000484 <__aeabi_i2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 800357a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 8003588:	2301      	movs	r3, #1
 800358a:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	f7fd fa45 	bl	8000a28 <__aeabi_dcmpeq>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 8085 	bne.w	80036b0 <getDisplayPoint+0x136>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ff67 	bl	8000484 <__aeabi_i2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f7fc ffcb 	bl	8000558 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4690      	mov	r8, r2
 80035c8:	4699      	mov	r9, r3
                      (matrixPtr->Bn * screenPtr->y) + 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	885b      	ldrh	r3, [r3, #2]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ff55 	bl	8000484 <__aeabi_i2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fc ffb9 	bl	8000558 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 80035ea:	4640      	mov	r0, r8
 80035ec:	4649      	mov	r1, r9
 80035ee:	f7fc fdfd 	bl	80001ec <__adddf3>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
                       matrixPtr->Cn 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 8003600:	f7fc fdf4 	bl	80001ec <__adddf3>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003612:	f7fd f8cb 	bl	80007ac <__aeabi_ddiv>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd fa35 	bl	8000a8c <__aeabi_d2uiz>
 8003622:	4603      	mov	r3, r0
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff25 	bl	8000484 <__aeabi_i2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4620      	mov	r0, r4
 8003640:	4629      	mov	r1, r5
 8003642:	f7fc ff89 	bl	8000558 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4690      	mov	r8, r2
 800364c:	4699      	mov	r9, r3
                      (matrixPtr->En * screenPtr->y) + 
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	885b      	ldrh	r3, [r3, #2]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff13 	bl	8000484 <__aeabi_i2d>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fc ff77 	bl	8000558 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 800366e:	4640      	mov	r0, r8
 8003670:	4649      	mov	r1, r9
 8003672:	f7fc fdbb 	bl	80001ec <__adddf3>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
                       matrixPtr->Fn 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 8003684:	f7fc fdb2 	bl	80001ec <__adddf3>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003696:	f7fd f889 	bl	80007ac <__aeabi_ddiv>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd f9f3 	bl	8000a8c <__aeabi_d2uiz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	805a      	strh	r2, [r3, #2]
 80036ae:	e001      	b.n	80036b4 <getDisplayPoint+0x13a>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080036c0 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	71fb      	strb	r3, [r7, #7]
 80036ca:	e03b      	b.n	8003744 <TouchPanel_Calibrate+0x84>
  {
    BSP_LCD_SetFont(&Font12);
 80036cc:	4825      	ldr	r0, [pc, #148]	; (8003764 <TouchPanel_Calibrate+0xa4>)
 80036ce:	f7ff f881 	bl	80027d4 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80036d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80036d6:	f7ff f899 	bl	800280c <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80036da:	201f      	movs	r0, #31
 80036dc:	f7ff f86a 	bl	80027b4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 80036e0:	4921      	ldr	r1, [pc, #132]	; (8003768 <TouchPanel_Calibrate+0xa8>)
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7ff f97e 	bl	80029e4 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 80036e8:	4820      	ldr	r0, [pc, #128]	; (800376c <TouchPanel_Calibrate+0xac>)
 80036ea:	f7ff f873 	bl	80027d4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 80036ee:	4920      	ldr	r1, [pc, #128]	; (8003770 <TouchPanel_Calibrate+0xb0>)
 80036f0:	2005      	movs	r0, #5
 80036f2:	f7ff f977 	bl	80029e4 <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 80036f6:	20c8      	movs	r0, #200	; 0xc8
 80036f8:	f000 f884 	bl	8003804 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <TouchPanel_Calibrate+0xb4>)
 8003700:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <TouchPanel_Calibrate+0xb4>)
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	885b      	ldrh	r3, [r3, #2]
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7ff fc3d 	bl	8002f90 <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8003716:	f7ff fc67 	bl	8002fe8 <Read_Ads7846>
 800371a:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f9      	beq.n	8003716 <TouchPanel_Calibrate+0x56>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	8811      	ldrh	r1, [r2, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <TouchPanel_Calibrate+0xb8>)
 800372a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	8851      	ldrh	r1, [r2, #2]
 8003734:	4a10      	ldr	r2, [pc, #64]	; (8003778 <TouchPanel_Calibrate+0xb8>)
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	460a      	mov	r2, r1
 800373c:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	3301      	adds	r3, #1
 8003742:	71fb      	strb	r3, [r7, #7]
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d9c0      	bls.n	80036cc <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 800374a:	4a0c      	ldr	r2, [pc, #48]	; (800377c <TouchPanel_Calibrate+0xbc>)
 800374c:	490a      	ldr	r1, [pc, #40]	; (8003778 <TouchPanel_Calibrate+0xb8>)
 800374e:	4809      	ldr	r0, [pc, #36]	; (8003774 <TouchPanel_Calibrate+0xb4>)
 8003750:	f7ff fd86 	bl	8003260 <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003754:	2000      	movs	r0, #0
 8003756:	f7ff f859 	bl	800280c <BSP_LCD_Clear>
} 
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2000006c 	.word	0x2000006c
 8003768:	0800d570 	.word	0x0800d570
 800376c:	20000074 	.word	0x20000074
 8003770:	0800d598 	.word	0x0800d598
 8003774:	20000060 	.word	0x20000060
 8003778:	2000114c 	.word	0x2000114c
 800377c:	20001110 	.word	0x20001110

08003780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_Init+0x40>)
 800378a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <HAL_Init+0x40>)
 8003796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_Init+0x40>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_Init+0x40>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a8:	2003      	movs	r0, #3
 80037aa:	f000 f8fc 	bl	80039a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ae:	200f      	movs	r0, #15
 80037b0:	f7fe fb06 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b4:	f7fe fad8 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023c00 	.word	0x40023c00

080037c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_IncTick+0x20>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_IncTick+0x24>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <HAL_IncTick+0x24>)
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000088 	.word	0x20000088
 80037e8:	2000115c 	.word	0x2000115c

080037ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return uwTick;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_GetTick+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000115c 	.word	0x2000115c

08003804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff ffee 	bl	80037ec <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d005      	beq.n	800382a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_Delay+0x44>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800382a:	bf00      	nop
 800382c:	f7ff ffde 	bl	80037ec <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d8f7      	bhi.n	800382c <HAL_Delay+0x28>
  {
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000088 	.word	0x20000088

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	; (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	; (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ff4c 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ce:	f7ff ff61 	bl	8003894 <__NVIC_GetPriorityGrouping>
 80039d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f7ff ffb1 	bl	8003940 <NVIC_EncodePriority>
 80039de:	4602      	mov	r2, r0
 80039e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff80 	bl	80038ec <__NVIC_SetPriority>
}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff54 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <HAL_DCMI_IRQHandler+0xf8>)
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fa0c 	bl	8003e70 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2202      	movs	r2, #2
 8003a68:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_DCMI_IRQHandler+0xf8>)
 8003a84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f9f0 	bl	8003e70 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f83c 	bl	8003b20 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f83a 	bl	8003b34 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 021e 	bic.w	r2, r2, #30
 8003ae6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f825 	bl	8003b48 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08003b5d 	.word	0x08003b5d

08003b0c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d003      	beq.n	8003b7c <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff ffc5 	bl	8003b0c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e05f      	b.n	8003c5c <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fd fa71 	bl	8001098 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fa6e 	bl	8001098 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003bd2:	f023 0308 	bic.w	r3, r3, #8
 8003bd6:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003bec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003bf8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003c04:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d112      	bne.n	8003c3c <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7f1b      	ldrb	r3, [r3, #28]
 8003c1a:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7f5b      	ldrb	r3, [r3, #29]
 8003c20:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c22:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7f9b      	ldrb	r3, [r3, #30]
 8003c28:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003c2a:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7fdb      	ldrb	r3, [r3, #31]
 8003c32:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003c38:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c3a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 021e 	orr.w	r2, r2, #30
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff fdbc 	bl	80037ec <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e099      	b.n	8003db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca0:	e00f      	b.n	8003cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca2:	f7ff fda3 	bl	80037ec <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d908      	bls.n	8003cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e078      	b.n	8003db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e8      	bne.n	8003ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <HAL_DMA_Init+0x158>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d107      	bne.n	8003d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	4313      	orrs	r3, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d117      	bne.n	8003d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fa9d 	bl	80042a8 <DMA_CheckFifoParam>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d82:	2301      	movs	r3, #1
 8003d84:	e016      	b.n	8003db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa54 	bl	800423c <DMA_CalcBaseAndBitshift>
 8003d94:	4603      	mov	r3, r0
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	f010803f 	.word	0xf010803f

08003dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_DMA_Start_IT+0x26>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e040      	b.n	8003e68 <HAL_DMA_Start_IT+0xa8>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d12f      	bne.n	8003e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f9e6 	bl	80041e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	223f      	movs	r2, #63	; 0x3f
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0216 	orr.w	r2, r2, #22
 8003e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e005      	b.n	8003e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e00c      	b.n	8003ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ec0:	4b8e      	ldr	r3, [pc, #568]	; (80040fc <HAL_DMA_IRQHandler+0x248>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a8e      	ldr	r2, [pc, #568]	; (8004100 <HAL_DMA_IRQHandler+0x24c>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0a9b      	lsrs	r3, r3, #10
 8003ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	2208      	movs	r2, #8
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01a      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	2201      	movs	r2, #1
 8003f26:	409a      	lsls	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	2201      	movs	r2, #1
 8003f44:	409a      	lsls	r2, r3
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d012      	beq.n	8003f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	2204      	movs	r2, #4
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	2210      	movs	r2, #16
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d043      	beq.n	8004024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03c      	beq.n	8004024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2210      	movs	r2, #16
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d108      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
 8003fe2:	e01f      	b.n	8004024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01b      	beq.n	8004024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e016      	b.n	8004024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0208 	bic.w	r2, r2, #8
 8004012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	2220      	movs	r2, #32
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 808f 	beq.w	8004154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8087 	beq.w	8004154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	2220      	movs	r2, #32
 800404c:	409a      	lsls	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b05      	cmp	r3, #5
 800405c:	d136      	bne.n	80040cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0216 	bic.w	r2, r2, #22
 800406c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800407c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <HAL_DMA_IRQHandler+0x1da>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0208 	bic.w	r2, r2, #8
 800409c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	223f      	movs	r2, #63	; 0x3f
 80040a4:	409a      	lsls	r2, r3
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d07e      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
        }
        return;
 80040ca:	e079      	b.n	80041c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01d      	beq.n	8004116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d031      	beq.n	8004154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
 80040f8:	e02c      	b.n	8004154 <HAL_DMA_IRQHandler+0x2a0>
 80040fa:	bf00      	nop
 80040fc:	20000020 	.word	0x20000020
 8004100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d023      	beq.n	8004154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	e01e      	b.n	8004154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0210 	bic.w	r2, r2, #16
 8004132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	2b00      	cmp	r3, #0
 800415a:	d032      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d022      	beq.n	80041ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2205      	movs	r2, #5
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3301      	adds	r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	d307      	bcc.n	800419c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f2      	bne.n	8004180 <HAL_DMA_IRQHandler+0x2cc>
 800419a:	e000      	b.n	800419e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800419c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
 80041be:	e000      	b.n	80041c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80041c0:	bf00      	nop
    }
  }
}
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d108      	bne.n	8004220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800421e:	e007      	b.n	8004230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3b10      	subs	r3, #16
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <DMA_CalcBaseAndBitshift+0x64>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d909      	bls.n	800427e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004272:	f023 0303 	bic.w	r3, r3, #3
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	659a      	str	r2, [r3, #88]	; 0x58
 800427c:	e007      	b.n	800428e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	aaaaaaab 	.word	0xaaaaaaab
 80042a4:	0800f810 	.word	0x0800f810

080042a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11f      	bne.n	8004302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d856      	bhi.n	8004376 <DMA_CheckFifoParam+0xce>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <DMA_CheckFifoParam+0x28>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042f3 	.word	0x080042f3
 80042d8:	080042e1 	.word	0x080042e1
 80042dc:	08004377 	.word	0x08004377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d046      	beq.n	800437a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f0:	e043      	b.n	800437a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042fa:	d140      	bne.n	800437e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004300:	e03d      	b.n	800437e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	d121      	bne.n	8004350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d837      	bhi.n	8004382 <DMA_CheckFifoParam+0xda>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <DMA_CheckFifoParam+0x70>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004329 	.word	0x08004329
 800431c:	0800432f 	.word	0x0800432f
 8004320:	08004329 	.word	0x08004329
 8004324:	08004341 	.word	0x08004341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e030      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d025      	beq.n	8004386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433e:	e022      	b.n	8004386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004348:	d11f      	bne.n	800438a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800434e:	e01c      	b.n	800438a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d903      	bls.n	800435e <DMA_CheckFifoParam+0xb6>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d003      	beq.n	8004364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800435c:	e018      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
      break;
 8004362:	e015      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
      break;
 8004374:	e00b      	b.n	800438e <DMA_CheckFifoParam+0xe6>
      break;
 8004376:	bf00      	nop
 8004378:	e00a      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 800437a:	bf00      	nop
 800437c:	e008      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 800437e:	bf00      	nop
 8004380:	e006      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 8004382:	bf00      	nop
 8004384:	e004      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 8004386:	bf00      	nop
 8004388:	e002      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;   
 800438a:	bf00      	nop
 800438c:	e000      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 800438e:	bf00      	nop
    }
  } 
  
  return status; 
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e16b      	b.n	8004694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043bc:	2201      	movs	r2, #1
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	f040 815a 	bne.w	800468e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d005      	beq.n	80043f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d130      	bne.n	8004454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004428:	2201      	movs	r2, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 0201 	and.w	r2, r3, #1
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b03      	cmp	r3, #3
 800445e:	d017      	beq.n	8004490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d123      	bne.n	80044e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	08da      	lsrs	r2, r3, #3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3208      	adds	r2, #8
 80044a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	220f      	movs	r2, #15
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	08da      	lsrs	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3208      	adds	r2, #8
 80044de:	69b9      	ldr	r1, [r7, #24]
 80044e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	2203      	movs	r2, #3
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0203 	and.w	r2, r3, #3
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80b4 	beq.w	800468e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	4b60      	ldr	r3, [pc, #384]	; (80046ac <HAL_GPIO_Init+0x30c>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	4a5f      	ldr	r2, [pc, #380]	; (80046ac <HAL_GPIO_Init+0x30c>)
 8004530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004534:	6453      	str	r3, [r2, #68]	; 0x44
 8004536:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <HAL_GPIO_Init+0x30c>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004542:	4a5b      	ldr	r2, [pc, #364]	; (80046b0 <HAL_GPIO_Init+0x310>)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	3302      	adds	r3, #2
 800454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	220f      	movs	r2, #15
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_GPIO_Init+0x314>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02b      	beq.n	80045c6 <HAL_GPIO_Init+0x226>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a51      	ldr	r2, [pc, #324]	; (80046b8 <HAL_GPIO_Init+0x318>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d025      	beq.n	80045c2 <HAL_GPIO_Init+0x222>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a50      	ldr	r2, [pc, #320]	; (80046bc <HAL_GPIO_Init+0x31c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01f      	beq.n	80045be <HAL_GPIO_Init+0x21e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a4f      	ldr	r2, [pc, #316]	; (80046c0 <HAL_GPIO_Init+0x320>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d019      	beq.n	80045ba <HAL_GPIO_Init+0x21a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <HAL_GPIO_Init+0x324>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_GPIO_Init+0x216>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_GPIO_Init+0x328>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00d      	beq.n	80045b2 <HAL_GPIO_Init+0x212>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a4c      	ldr	r2, [pc, #304]	; (80046cc <HAL_GPIO_Init+0x32c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <HAL_GPIO_Init+0x20e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a4b      	ldr	r2, [pc, #300]	; (80046d0 <HAL_GPIO_Init+0x330>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <HAL_GPIO_Init+0x20a>
 80045a6:	2307      	movs	r3, #7
 80045a8:	e00e      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045aa:	2308      	movs	r3, #8
 80045ac:	e00c      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045ae:	2306      	movs	r3, #6
 80045b0:	e00a      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045b2:	2305      	movs	r3, #5
 80045b4:	e008      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e006      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045ba:	2303      	movs	r3, #3
 80045bc:	e004      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045be:	2302      	movs	r3, #2
 80045c0:	e002      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_GPIO_Init+0x228>
 80045c6:	2300      	movs	r3, #0
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	f002 0203 	and.w	r2, r2, #3
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	4093      	lsls	r3, r2
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045d8:	4935      	ldr	r1, [pc, #212]	; (80046b0 <HAL_GPIO_Init+0x310>)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045e6:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <HAL_GPIO_Init+0x334>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800460a:	4a32      	ldr	r2, [pc, #200]	; (80046d4 <HAL_GPIO_Init+0x334>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004610:	4b30      	ldr	r3, [pc, #192]	; (80046d4 <HAL_GPIO_Init+0x334>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004634:	4a27      	ldr	r2, [pc, #156]	; (80046d4 <HAL_GPIO_Init+0x334>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800463a:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <HAL_GPIO_Init+0x334>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_GPIO_Init+0x334>)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_GPIO_Init+0x334>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004688:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <HAL_GPIO_Init+0x334>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	f67f ae90 	bls.w	80043bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3724      	adds	r7, #36	; 0x24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	40020800 	.word	0x40020800
 80046c0:	40020c00 	.word	0x40020c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40021400 	.word	0x40021400
 80046cc:	40021800 	.word	0x40021800
 80046d0:	40021c00 	.word	0x40021c00
 80046d4:	40013c00 	.word	0x40013c00

080046d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e001      	b.n	80046fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
 8004714:	4613      	mov	r3, r2
 8004716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004718:	787b      	ldrb	r3, [r7, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004724:	e003      	b.n	800472e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004726:	887b      	ldrh	r3, [r7, #2]
 8004728:	041a      	lsls	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	619a      	str	r2, [r3, #24]
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e12b      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd f876 	bl	8001854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800479e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a0:	f000 fde8 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a81      	ldr	r2, [pc, #516]	; (80049b0 <HAL_I2C_Init+0x274>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d807      	bhi.n	80047c0 <HAL_I2C_Init+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a80      	ldr	r2, [pc, #512]	; (80049b4 <HAL_I2C_Init+0x278>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf94      	ite	ls
 80047b8:	2301      	movls	r3, #1
 80047ba:	2300      	movhi	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e006      	b.n	80047ce <HAL_I2C_Init+0x92>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <HAL_I2C_Init+0x27c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0e7      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a78      	ldr	r2, [pc, #480]	; (80049bc <HAL_I2C_Init+0x280>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0c9b      	lsrs	r3, r3, #18
 80047e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a6a      	ldr	r2, [pc, #424]	; (80049b0 <HAL_I2C_Init+0x274>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d802      	bhi.n	8004810 <HAL_I2C_Init+0xd4>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	e009      	b.n	8004824 <HAL_I2C_Init+0xe8>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	4a69      	ldr	r2, [pc, #420]	; (80049c0 <HAL_I2C_Init+0x284>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	3301      	adds	r3, #1
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	495c      	ldr	r1, [pc, #368]	; (80049b0 <HAL_I2C_Init+0x274>)
 8004840:	428b      	cmp	r3, r1
 8004842:	d819      	bhi.n	8004878 <HAL_I2C_Init+0x13c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e59      	subs	r1, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004858:	400b      	ands	r3, r1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_I2C_Init+0x138>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e59      	subs	r1, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fbb1 f3f3 	udiv	r3, r1, r3
 800486c:	3301      	adds	r3, #1
 800486e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004872:	e051      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004874:	2304      	movs	r3, #4
 8004876:	e04f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <HAL_I2C_Init+0x168>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e012      	b.n	80048ca <HAL_I2C_Init+0x18e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1e58      	subs	r0, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	0099      	lsls	r1, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Init+0x196>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e022      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <HAL_I2C_Init+0x1bc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1e58      	subs	r0, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	440b      	add	r3, r1
 80048e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	6809      	ldr	r1, [r1, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6911      	ldr	r1, [r2, #16]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	430b      	orrs	r3, r1
 800495a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	000186a0 	.word	0x000186a0
 80049b4:	001e847f 	.word	0x001e847f
 80049b8:	003d08ff 	.word	0x003d08ff
 80049bc:	431bde83 	.word	0x431bde83
 80049c0:	10624dd3 	.word	0x10624dd3

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e267      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d075      	beq.n	8004ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d00c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ee:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d112      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	4b7e      	ldr	r3, [pc, #504]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05b      	beq.n	8004acc <HAL_RCC_OscConfig+0x108>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d157      	bne.n	8004acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e242      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a28:	d106      	bne.n	8004a38 <HAL_RCC_OscConfig+0x74>
 8004a2a:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a75      	ldr	r2, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e01d      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x98>
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a6f      	ldr	r2, [pc, #444]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b6d      	ldr	r3, [pc, #436]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6c      	ldr	r2, [pc, #432]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	4b69      	ldr	r3, [pc, #420]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a68      	ldr	r2, [pc, #416]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b66      	ldr	r3, [pc, #408]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a65      	ldr	r2, [pc, #404]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fe feb6 	bl	80037ec <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe feb2 	bl	80037ec <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e207      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0xc0>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fea2 	bl	80037ec <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fe fe9e 	bl	80037ec <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1f3      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004abe:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0xe8>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d063      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ada:	4b4a      	ldr	r3, [pc, #296]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d11c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af2:	4b44      	ldr	r3, [pc, #272]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_OscConfig+0x152>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e1c7      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4937      	ldr	r1, [pc, #220]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2a:	e03a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b34:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <HAL_RCC_OscConfig+0x244>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fe fe57 	bl	80037ec <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b42:	f7fe fe53 	bl	80037ec <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e1a8      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b54:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4925      	ldr	r1, [pc, #148]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
 8004b74:	e015      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b76:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <HAL_RCC_OscConfig+0x244>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fe36 	bl	80037ec <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b84:	f7fe fe32 	bl	80037ec <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e187      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d036      	beq.n	8004c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_RCC_OscConfig+0x248>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbc:	f7fe fe16 	bl	80037ec <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc4:	f7fe fe12 	bl	80037ec <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e167      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x200>
 8004be2:	e01b      	b.n	8004c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x248>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fe fdff 	bl	80037ec <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	e00e      	b.n	8004c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fdfb 	bl	80037ec <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d907      	bls.n	8004c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e150      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	42470000 	.word	0x42470000
 8004c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c10:	4b88      	ldr	r3, [pc, #544]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ea      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8097 	beq.w	8004d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c2e:	4b81      	ldr	r3, [pc, #516]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10f      	bne.n	8004c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	4b7d      	ldr	r3, [pc, #500]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a7c      	ldr	r2, [pc, #496]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	4b7a      	ldr	r3, [pc, #488]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5a:	4b77      	ldr	r3, [pc, #476]	; (8004e38 <HAL_RCC_OscConfig+0x474>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d118      	bne.n	8004c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c66:	4b74      	ldr	r3, [pc, #464]	; (8004e38 <HAL_RCC_OscConfig+0x474>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a73      	ldr	r2, [pc, #460]	; (8004e38 <HAL_RCC_OscConfig+0x474>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c72:	f7fe fdbb 	bl	80037ec <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7a:	f7fe fdb7 	bl	80037ec <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e10c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	4b6a      	ldr	r3, [pc, #424]	; (8004e38 <HAL_RCC_OscConfig+0x474>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x2ea>
 8004ca0:	4b64      	ldr	r3, [pc, #400]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a63      	ldr	r2, [pc, #396]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	e01c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x324>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x30c>
 8004cb6:	4b5f      	ldr	r3, [pc, #380]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	4a5e      	ldr	r2, [pc, #376]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc2:	4b5c      	ldr	r3, [pc, #368]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a5b      	ldr	r2, [pc, #364]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0x324>
 8004cd0:	4b58      	ldr	r3, [pc, #352]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	4a57      	ldr	r2, [pc, #348]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	6713      	str	r3, [r2, #112]	; 0x70
 8004cdc:	4b55      	ldr	r3, [pc, #340]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	4a54      	ldr	r2, [pc, #336]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	f023 0304 	bic.w	r3, r3, #4
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf0:	f7fe fd7c 	bl	80037ec <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf8:	f7fe fd78 	bl	80037ec <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e0cb      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ee      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x334>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1c:	f7fe fd66 	bl	80037ec <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d24:	f7fe fd62 	bl	80037ec <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0b5      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3a:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ee      	bne.n	8004d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4c:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	4a38      	ldr	r2, [pc, #224]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80a1 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d62:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d05c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d141      	bne.n	8004dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_RCC_OscConfig+0x478>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fd36 	bl	80037ec <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fe fd32 	bl	80037ec <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e087      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	061b      	lsls	r3, r3, #24
 8004dc6:	491b      	ldr	r1, [pc, #108]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x478>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd2:	f7fe fd0b 	bl	80037ec <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dda:	f7fe fd07 	bl	80037ec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e05c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x416>
 8004df8:	e054      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_RCC_OscConfig+0x478>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fe fcf4 	bl	80037ec <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fe fcf0 	bl	80037ec <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e045      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x444>
 8004e26:	e03d      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e038      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e40:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <HAL_RCC_OscConfig+0x4ec>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d028      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d121      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d11a      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e70:	4013      	ands	r3, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800

08004eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0cc      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec8:	4b68      	ldr	r3, [pc, #416]	; (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d90c      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed6:	4b65      	ldr	r3, [pc, #404]	; (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ede:	4b63      	ldr	r3, [pc, #396]	; (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0b8      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f08:	4b59      	ldr	r3, [pc, #356]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a58      	ldr	r2, [pc, #352]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f20:	4b53      	ldr	r3, [pc, #332]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f2c:	4b50      	ldr	r3, [pc, #320]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	494d      	ldr	r1, [pc, #308]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d044      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d119      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e07f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e067      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f92:	4b37      	ldr	r3, [pc, #220]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 0203 	bic.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4934      	ldr	r1, [pc, #208]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa4:	f7fe fc22 	bl	80037ec <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fac:	f7fe fc1e 	bl	80037ec <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e04f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 020c 	and.w	r2, r3, #12
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1eb      	bne.n	8004fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b25      	ldr	r3, [pc, #148]	; (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d20c      	bcs.n	8004ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e032      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4916      	ldr	r1, [pc, #88]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	4313      	orrs	r3, r2
 8005018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	490e      	ldr	r1, [pc, #56]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800503a:	f000 f889 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 800503e:	4602      	mov	r2, r0
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	490a      	ldr	r1, [pc, #40]	; (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	5ccb      	ldrb	r3, [r1, r3]
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	4a09      	ldr	r2, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_ClockConfig+0x1c8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fc feb0 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40023c00 	.word	0x40023c00
 8005070:	40023800 	.word	0x40023800
 8005074:	0800d5d4 	.word	0x0800d5d4
 8005078:	20000020 	.word	0x20000020
 800507c:	20000084 	.word	0x20000084

08005080 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	; 0x30
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d129      	bne.n	80050e6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b28      	ldr	r3, [pc, #160]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80050ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b4:	2302      	movs	r3, #2
 80050b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b8:	2303      	movs	r3, #3
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80050c0:	2300      	movs	r3, #0
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	4619      	mov	r1, r3
 80050ca:	481f      	ldr	r0, [pc, #124]	; (8005148 <HAL_RCC_MCOConfig+0xc8>)
 80050cc:	f7ff f968 	bl	80043a0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80050d0:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	430b      	orrs	r3, r1
 80050de:	4919      	ldr	r1, [pc, #100]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80050e4:	e029      	b.n	800513a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 80050f0:	f043 0304 	orr.w	r3, r3, #4
 80050f4:	6313      	str	r3, [r2, #48]	; 0x30
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005108:	2302      	movs	r3, #2
 800510a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510c:	2303      	movs	r3, #3
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005118:	f107 031c 	add.w	r3, r7, #28
 800511c:	4619      	mov	r1, r3
 800511e:	480b      	ldr	r0, [pc, #44]	; (800514c <HAL_RCC_MCOConfig+0xcc>)
 8005120:	f7ff f93e 	bl	80043a0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	00d9      	lsls	r1, r3, #3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	430b      	orrs	r3, r1
 8005134:	4903      	ldr	r1, [pc, #12]	; (8005144 <HAL_RCC_MCOConfig+0xc4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
}
 800513a:	bf00      	nop
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	40020000 	.word	0x40020000
 800514c:	40020800 	.word	0x40020800

08005150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005154:	b094      	sub	sp, #80	; 0x50
 8005156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	647b      	str	r3, [r7, #68]	; 0x44
 800515c:	2300      	movs	r3, #0
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005160:	2300      	movs	r3, #0
 8005162:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005168:	4b79      	ldr	r3, [pc, #484]	; (8005350 <HAL_RCC_GetSysClockFreq+0x200>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b08      	cmp	r3, #8
 8005172:	d00d      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x40>
 8005174:	2b08      	cmp	r3, #8
 8005176:	f200 80e1 	bhi.w	800533c <HAL_RCC_GetSysClockFreq+0x1ec>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x34>
 800517e:	2b04      	cmp	r3, #4
 8005180:	d003      	beq.n	800518a <HAL_RCC_GetSysClockFreq+0x3a>
 8005182:	e0db      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005184:	4b73      	ldr	r3, [pc, #460]	; (8005354 <HAL_RCC_GetSysClockFreq+0x204>)
 8005186:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005188:	e0db      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800518a:	4b73      	ldr	r3, [pc, #460]	; (8005358 <HAL_RCC_GetSysClockFreq+0x208>)
 800518c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800518e:	e0d8      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005190:	4b6f      	ldr	r3, [pc, #444]	; (8005350 <HAL_RCC_GetSysClockFreq+0x200>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005198:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800519a:	4b6d      	ldr	r3, [pc, #436]	; (8005350 <HAL_RCC_GetSysClockFreq+0x200>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d063      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a6:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	099b      	lsrs	r3, r3, #6
 80051ac:	2200      	movs	r2, #0
 80051ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ba:	2300      	movs	r3, #0
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
 80051be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051c2:	4622      	mov	r2, r4
 80051c4:	462b      	mov	r3, r5
 80051c6:	f04f 0000 	mov.w	r0, #0
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	0159      	lsls	r1, r3, #5
 80051d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051d4:	0150      	lsls	r0, r2, #5
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4621      	mov	r1, r4
 80051dc:	1a51      	subs	r1, r2, r1
 80051de:	6139      	str	r1, [r7, #16]
 80051e0:	4629      	mov	r1, r5
 80051e2:	eb63 0301 	sbc.w	r3, r3, r1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f4:	4659      	mov	r1, fp
 80051f6:	018b      	lsls	r3, r1, #6
 80051f8:	4651      	mov	r1, sl
 80051fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051fe:	4651      	mov	r1, sl
 8005200:	018a      	lsls	r2, r1, #6
 8005202:	4651      	mov	r1, sl
 8005204:	ebb2 0801 	subs.w	r8, r2, r1
 8005208:	4659      	mov	r1, fp
 800520a:	eb63 0901 	sbc.w	r9, r3, r1
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800521a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800521e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005222:	4690      	mov	r8, r2
 8005224:	4699      	mov	r9, r3
 8005226:	4623      	mov	r3, r4
 8005228:	eb18 0303 	adds.w	r3, r8, r3
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	462b      	mov	r3, r5
 8005230:	eb49 0303 	adc.w	r3, r9, r3
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005242:	4629      	mov	r1, r5
 8005244:	024b      	lsls	r3, r1, #9
 8005246:	4621      	mov	r1, r4
 8005248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800524c:	4621      	mov	r1, r4
 800524e:	024a      	lsls	r2, r1, #9
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005256:	2200      	movs	r2, #0
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
 800525a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800525c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005260:	f7fb fc34 	bl	8000acc <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4613      	mov	r3, r2
 800526a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526c:	e058      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526e:	4b38      	ldr	r3, [pc, #224]	; (8005350 <HAL_RCC_GetSysClockFreq+0x200>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	2200      	movs	r2, #0
 8005276:	4618      	mov	r0, r3
 8005278:	4611      	mov	r1, r2
 800527a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005288:	4642      	mov	r2, r8
 800528a:	464b      	mov	r3, r9
 800528c:	f04f 0000 	mov.w	r0, #0
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	0159      	lsls	r1, r3, #5
 8005296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800529a:	0150      	lsls	r0, r2, #5
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4641      	mov	r1, r8
 80052a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052a6:	4649      	mov	r1, r9
 80052a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052c0:	ebb2 040a 	subs.w	r4, r2, sl
 80052c4:	eb63 050b 	sbc.w	r5, r3, fp
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	00eb      	lsls	r3, r5, #3
 80052d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052d6:	00e2      	lsls	r2, r4, #3
 80052d8:	4614      	mov	r4, r2
 80052da:	461d      	mov	r5, r3
 80052dc:	4643      	mov	r3, r8
 80052de:	18e3      	adds	r3, r4, r3
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	464b      	mov	r3, r9
 80052e4:	eb45 0303 	adc.w	r3, r5, r3
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052f6:	4629      	mov	r1, r5
 80052f8:	028b      	lsls	r3, r1, #10
 80052fa:	4621      	mov	r1, r4
 80052fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005300:	4621      	mov	r1, r4
 8005302:	028a      	lsls	r2, r1, #10
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530a:	2200      	movs	r2, #0
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	61fa      	str	r2, [r7, #28]
 8005310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005314:	f7fb fbda 	bl	8000acc <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4613      	mov	r3, r2
 800531e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_GetSysClockFreq+0x200>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	3301      	adds	r3, #1
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005330:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800533a:	e002      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_GetSysClockFreq+0x204>)
 800533e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005344:	4618      	mov	r0, r3
 8005346:	3750      	adds	r7, #80	; 0x50
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	00f42400 	.word	0x00f42400
 8005358:	007a1200 	.word	0x007a1200

0800535c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <HAL_RCC_GetHCLKFreq+0x14>)
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000020 	.word	0x20000020

08005374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005378:	f7ff fff0 	bl	800535c <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0a9b      	lsrs	r3, r3, #10
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4903      	ldr	r1, [pc, #12]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023800 	.word	0x40023800
 8005398:	0800d5e4 	.word	0x0800d5e4

0800539c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	220f      	movs	r2, #15
 80053aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0203 	and.w	r2, r3, #3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	08db      	lsrs	r3, r3, #3
 80053d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <HAL_RCC_GetClockConfig+0x60>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0207 	and.w	r2, r3, #7
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40023c00 	.word	0x40023c00

08005400 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e022      	b.n	8005458 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc fb27 	bl	8001a78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2203      	movs	r2, #3
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f814 	bl	8005460 <HAL_SD_InitCard>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e00a      	b.n	8005458 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005460:	b5b0      	push	{r4, r5, r7, lr}
 8005462:	b08e      	sub	sp, #56	; 0x38
 8005464:	af04      	add	r7, sp, #16
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800547c:	2376      	movs	r3, #118	; 0x76
 800547e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681d      	ldr	r5, [r3, #0]
 8005484:	466c      	mov	r4, sp
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800548e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005498:	4628      	mov	r0, r5
 800549a:	f002 fb75 	bl	8007b88 <SDIO_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80054a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e04f      	b.n	8005550 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80054b0:	4b29      	ldr	r3, [pc, #164]	; (8005558 <HAL_SD_InitCard+0xf8>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f002 fbad 	bl	8007c1a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <HAL_SD_InitCard+0xf8>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80054c6:	2002      	movs	r0, #2
 80054c8:	f7fe f99c 	bl	8003804 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 ff6b 	bl	80063a8 <SD_PowerON>
 80054d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e02e      	b.n	8005550 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fe8a 	bl	800620c <SD_InitCard>
 80054f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e01b      	b.n	8005550 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005520:	4618      	mov	r0, r3
 8005522:	f002 fc0c 	bl	8007d3e <SDMMC_CmdBlockLength>
 8005526:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00f      	beq.n	800554e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a0a      	ldr	r2, [pc, #40]	; (800555c <HAL_SD_InitCard+0xfc>)
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3728      	adds	r7, #40	; 0x28
 8005554:	46bd      	mov	sp, r7
 8005556:	bdb0      	pop	{r4, r5, r7, pc}
 8005558:	422580a0 	.word	0x422580a0
 800555c:	004005ff 	.word	0x004005ff

08005560 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e0c0      	b.n	800570a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	f040 80b9 	bne.w	8005708 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800559c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d907      	bls.n	80055ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e0a7      	b.n	800570a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2203      	movs	r2, #3
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a4c      	ldr	r2, [pc, #304]	; (8005714 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	4a4b      	ldr	r2, [pc, #300]	; (8005718 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80055ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2200      	movs	r2, #0
 80055f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	2200      	movs	r2, #0
 80055fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3380      	adds	r3, #128	; 0x80
 8005624:	4619      	mov	r1, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	f7fe fbc7 	bl	8003dc0 <HAL_DMA_Start_IT>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d017      	beq.n	8005668 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005646:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a33      	ldr	r2, [pc, #204]	; (800571c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e050      	b.n	800570a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005668:	4b2d      	ldr	r3, [pc, #180]	; (8005720 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	2b01      	cmp	r3, #1
 8005674:	d002      	beq.n	800567c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	025b      	lsls	r3, r3, #9
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	025b      	lsls	r3, r3, #9
 8005686:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005688:	2390      	movs	r3, #144	; 0x90
 800568a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800568c:	2302      	movs	r3, #2
 800568e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005690:	2300      	movs	r3, #0
 8005692:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005694:	2301      	movs	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f107 0210 	add.w	r2, r7, #16
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 fb1f 	bl	8007ce6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d90a      	bls.n	80056c4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2282      	movs	r2, #130	; 0x82
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 fb83 	bl	8007dc6 <SDMMC_CmdReadMultiBlock>
 80056c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80056c2:	e009      	b.n	80056d8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2281      	movs	r2, #129	; 0x81
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d0:	4618      	mov	r0, r3
 80056d2:	f002 fb56 	bl	8007d82 <SDMMC_CmdReadSingleBlock>
 80056d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d012      	beq.n	8005704 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a0e      	ldr	r2, [pc, #56]	; (800571c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80056e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e002      	b.n	800570a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3730      	adds	r7, #48	; 0x30
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	0800601b 	.word	0x0800601b
 8005718:	0800608d 	.word	0x0800608d
 800571c:	004005ff 	.word	0x004005ff
 8005720:	4225858c 	.word	0x4225858c

08005724 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	; 0x30
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d107      	bne.n	800574c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0c5      	b.n	80058d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 80be 	bne.w	80058d6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576a:	429a      	cmp	r2, r3
 800576c:	d907      	bls.n	800577e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e0ac      	b.n	80058d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2203      	movs	r2, #3
 8005782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	4a4e      	ldr	r2, [pc, #312]	; (80058e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	4a4d      	ldr	r2, [pc, #308]	; (80058e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80057b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	2200      	movs	r2, #0
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d002      	beq.n	80057c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	025b      	lsls	r3, r3, #9
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d90a      	bls.n	80057e4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	22a0      	movs	r2, #160	; 0xa0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057da:	4618      	mov	r0, r3
 80057dc:	f002 fb37 	bl	8007e4e <SDMMC_CmdWriteMultiBlock>
 80057e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80057e2:	e009      	b.n	80057f8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2290      	movs	r2, #144	; 0x90
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f0:	4618      	mov	r0, r3
 80057f2:	f002 fb0a 	bl	8007e0a <SDMMC_CmdWriteSingleBlock>
 80057f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d012      	beq.n	8005824 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a39      	ldr	r2, [pc, #228]	; (80058e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	431a      	orrs	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e059      	b.n	80058d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005824:	4b31      	ldr	r3, [pc, #196]	; (80058ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	2240      	movs	r2, #64	; 0x40
 8005830:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3380      	adds	r3, #128	; 0x80
 800585a:	461a      	mov	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	025b      	lsls	r3, r3, #9
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	f7fe faad 	bl	8003dc0 <HAL_DMA_Start_IT>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01c      	beq.n	80058a6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800587a:	f023 0302 	bic.w	r3, r3, #2
 800587e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e018      	b.n	80058d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80058b2:	2390      	movs	r3, #144	; 0x90
 80058b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80058be:	2301      	movs	r3, #1
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f107 0210 	add.w	r2, r7, #16
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f002 fa0a 	bl	8007ce6 <SDIO_ConfigData>

      return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3730      	adds	r7, #48	; 0x30
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08005ff1 	.word	0x08005ff1
 80058e4:	0800608d 	.word	0x0800608d
 80058e8:	004005ff 	.word	0x004005ff
 80058ec:	4225858c 	.word	0x4225858c

080058f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_SD_IRQHandler+0x2e>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fdfc 	bl	8006514 <SD_Read_IT>
 800591c:	e165      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 808f 	beq.w	8005a4c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005936:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005946:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800594a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d039      	beq.n	80059da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_SD_IRQHandler+0x8a>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d011      	beq.n	800599e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f002 fa88 	bl	8007e94 <SDMMC_CmdStopTransfer>
 8005984:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f92f 	bl	8005bfc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_SD_IRQHandler+0xda>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f002 fe9e 	bl	800870c <HAL_SD_RxCpltCallback>
 80059d0:	e10b      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f002 fe90 	bl	80086f8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80059d8:	e107      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8102 	beq.w	8005bea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d011      	beq.n	8005a14 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f002 fa4d 	bl	8007e94 <SDMMC_CmdStopTransfer>
 80059fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8f4 	bl	8005bfc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f040 80e5 	bne.w	8005bea <HAL_SD_IRQHandler+0x2fa>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 80df 	bne.w	8005bea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0208 	bic.w	r2, r2, #8
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f002 fe57 	bl	80086f8 <HAL_SD_TxCpltCallback>
}
 8005a4a:	e0ce      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_SD_IRQHandler+0x17c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fda6 	bl	80065b6 <SD_Write_IT>
 8005a6a:	e0be      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a72:	f240 233a 	movw	r3, #570	; 0x23a
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80b6 	beq.w	8005bea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	f043 0202 	orr.w	r2, r3, #2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	f043 0208 	orr.w	r2, r3, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	f043 0210 	orr.w	r2, r3, #16
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	f043 0208 	orr.w	r2, r3, #8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f240 723a 	movw	r2, #1850	; 0x73a
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005b18:	f023 0302 	bic.w	r3, r3, #2
 8005b1c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 f9b6 	bl	8007e94 <SDMMC_CmdStopTransfer>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f855 	bl	8005bfc <HAL_SD_ErrorCallback>
}
 8005b52:	e04a      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d045      	beq.n	8005bea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <HAL_SD_IRQHandler+0x282>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_SD_IRQHandler+0x304>)
 8005b78:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe f976 	bl	8003e70 <HAL_DMA_Abort_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02f      	beq.n	8005bea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 face 	bl	8006130 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b94:	e029      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <HAL_SD_IRQHandler+0x2ba>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <HAL_SD_IRQHandler+0x308>)
 8005bb0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe f95a 	bl	8003e70 <HAL_DMA_Abort_IT>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d013      	beq.n	8005bea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fae9 	bl	800619e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005bcc:	e00d      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f002 fd7e 	bl	80086e4 <HAL_SD_AbortCallback>
}
 8005be8:	e7ff      	b.n	8005bea <HAL_SD_IRQHandler+0x2fa>
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08006131 	.word	0x08006131
 8005bf8:	0800619f 	.word	0x0800619f

08005bfc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1e:	0f9b      	lsrs	r3, r3, #30
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2a:	0e9b      	lsrs	r3, r3, #26
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3c:	0e1b      	lsrs	r3, r3, #24
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c70:	0d1b      	lsrs	r3, r3, #20
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8e:	0bdb      	lsrs	r3, r3, #15
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca0:	0b9b      	lsrs	r3, r3, #14
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb2:	0b5b      	lsrs	r3, r3, #13
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc4:	0b1b      	lsrs	r3, r3, #12
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d163      	bne.n	8005da8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce4:	009a      	lsls	r2, r3, #2
 8005ce6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cea:	4013      	ands	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005cf0:	0f92      	lsrs	r2, r2, #30
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfc:	0edb      	lsrs	r3, r3, #27
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0e:	0e1b      	lsrs	r3, r3, #24
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	0d5b      	lsrs	r3, r3, #21
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d32:	0c9b      	lsrs	r3, r3, #18
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d44:	0bdb      	lsrs	r3, r3, #15
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	7e1b      	ldrb	r3, [r3, #24]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	3302      	adds	r3, #2
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d72:	fb03 f202 	mul.w	r2, r3, r2
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	7a1b      	ldrb	r3, [r3, #8]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	2201      	movs	r2, #1
 8005d86:	409a      	lsls	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d94:	0a52      	lsrs	r2, r2, #9
 8005d96:	fb03 f202 	mul.w	r2, r3, r2
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60
 8005da6:	e031      	b.n	8005e0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d11d      	bne.n	8005dec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	029a      	lsls	r2, r3, #10
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60
 8005dea:	e00f      	b.n	8005e0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a58      	ldr	r2, [pc, #352]	; (8005f54 <HAL_SD_GetCardCSD+0x344>)
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e09d      	b.n	8005f48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e10:	0b9b      	lsrs	r3, r3, #14
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e44:	0fdb      	lsrs	r3, r3, #31
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e50:	0f5b      	lsrs	r3, r3, #29
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	0e9b      	lsrs	r3, r3, #26
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	0d9b      	lsrs	r3, r3, #22
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	0d5b      	lsrs	r3, r3, #21
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	0bdb      	lsrs	r3, r3, #15
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	0b9b      	lsrs	r3, r3, #14
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	0b1b      	lsrs	r3, r3, #12
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	0a9b      	lsrs	r3, r3, #10
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	004005ff 	.word	0x004005ff

08005f58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa7e 	bl	80064c4 <SD_SendStatus>
 8005fc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	0a5b      	lsrs	r3, r3, #9
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fe6:	693b      	ldr	r3, [r7, #16]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	2b82      	cmp	r3, #130	; 0x82
 800602e:	d111      	bne.n	8006054 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f001 ff2d 	bl	8007e94 <SDMMC_CmdStopTransfer>
 800603a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	431a      	orrs	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fdd4 	bl	8005bfc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0208 	bic.w	r2, r2, #8
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f240 523a 	movw	r2, #1338	; 0x53a
 800606c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f002 fb45 	bl	800870c <HAL_SD_RxCpltCallback>
#endif
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fe f894 	bl	80041c8 <HAL_DMA_GetError>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d03e      	beq.n	8006124 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d002      	beq.n	80060c2 <SD_DMAError+0x36>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d12d      	bne.n	800611e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a19      	ldr	r2, [pc, #100]	; (800612c <SD_DMAError+0xa0>)
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80060d8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80060e6:	6978      	ldr	r0, [r7, #20]
 80060e8:	f7ff ff62 	bl	8005fb0 <HAL_SD_GetCardState>
 80060ec:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b06      	cmp	r3, #6
 80060f2:	d002      	beq.n	80060fa <SD_DMAError+0x6e>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d10a      	bne.n	8006110 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fec8 	bl	8007e94 <SDMMC_CmdStopTransfer>
 8006104:	4602      	mov	r2, r0
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	431a      	orrs	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800611e:	6978      	ldr	r0, [r7, #20]
 8006120:	f7ff fd6c 	bl	8005bfc <HAL_SD_ErrorCallback>
#endif
  }
}
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	004005ff 	.word	0x004005ff

08006130 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f240 523a 	movw	r2, #1338	; 0x53a
 8006146:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff ff31 	bl	8005fb0 <HAL_SD_GetCardState>
 800614e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d002      	beq.n	800616a <SD_DMATxAbort+0x3a>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b05      	cmp	r3, #5
 8006168:	d10a      	bne.n	8006180 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fe90 	bl	8007e94 <SDMMC_CmdStopTransfer>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	431a      	orrs	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f002 faab 	bl	80086e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800618e:	e002      	b.n	8006196 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fd33 	bl	8005bfc <HAL_SD_ErrorCallback>
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fefa 	bl	8005fb0 <HAL_SD_GetCardState>
 80061bc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b06      	cmp	r3, #6
 80061d0:	d002      	beq.n	80061d8 <SD_DMARxAbort+0x3a>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d10a      	bne.n	80061ee <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fe59 	bl	8007e94 <SDMMC_CmdStopTransfer>
 80061e2:	4602      	mov	r2, r0
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	431a      	orrs	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f002 fa74 	bl	80086e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80061fc:	e002      	b.n	8006204 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff fcfc 	bl	8005bfc <HAL_SD_ErrorCallback>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800620c:	b5b0      	push	{r4, r5, r7, lr}
 800620e:	b094      	sub	sp, #80	; 0x50
 8006210:	af04      	add	r7, sp, #16
 8006212:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006214:	2301      	movs	r3, #1
 8006216:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f001 fd0a 	bl	8007c36 <SDIO_GetPowerState>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800622c:	e0b8      	b.n	80063a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	2b03      	cmp	r3, #3
 8006234:	d02f      	beq.n	8006296 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f001 fef1 	bl	8008022 <SDMMC_CmdSendCID>
 8006240:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <SD_InitCard+0x40>
    {
      return errorstate;
 8006248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624a:	e0a9      	b.n	80063a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fd34 	bl	8007cc0 <SDIO_GetResponse>
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2104      	movs	r1, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f001 fd2b 	bl	8007cc0 <SDIO_GetResponse>
 800626a:	4602      	mov	r2, r0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2108      	movs	r1, #8
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fd22 	bl	8007cc0 <SDIO_GetResponse>
 800627c:	4602      	mov	r2, r0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	210c      	movs	r1, #12
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fd19 	bl	8007cc0 <SDIO_GetResponse>
 800628e:	4602      	mov	r2, r0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	2b03      	cmp	r3, #3
 800629c:	d00d      	beq.n	80062ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f107 020e 	add.w	r2, r7, #14
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fef7 	bl	800809c <SDMMC_CmdSetRelAdd>
 80062ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <SD_InitCard+0xae>
    {
      return errorstate;
 80062b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b8:	e072      	b.n	80063a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d036      	beq.n	8006330 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80062c2:	89fb      	ldrh	r3, [r7, #14]
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f001 fec1 	bl	800805e <SDMMC_CmdSendCSD>
 80062dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	e05b      	b.n	80063a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fce6 	bl	8007cc0 <SDIO_GetResponse>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2104      	movs	r1, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fcdd 	bl	8007cc0 <SDIO_GetResponse>
 8006306:	4602      	mov	r2, r0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2108      	movs	r1, #8
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fcd4 	bl	8007cc0 <SDIO_GetResponse>
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	210c      	movs	r1, #12
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fccb 	bl	8007cc0 <SDIO_GetResponse>
 800632a:	4602      	mov	r2, r0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2104      	movs	r1, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fcc2 	bl	8007cc0 <SDIO_GetResponse>
 800633c:	4603      	mov	r3, r0
 800633e:	0d1a      	lsrs	r2, r3, #20
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006344:	f107 0310 	add.w	r3, r7, #16
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fc60 	bl	8005c10 <HAL_SD_GetCardCSD>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800635a:	e021      	b.n	80063a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	2200      	movs	r2, #0
 8006368:	461c      	mov	r4, r3
 800636a:	4615      	mov	r5, r2
 800636c:	4622      	mov	r2, r4
 800636e:	462b      	mov	r3, r5
 8006370:	4608      	mov	r0, r1
 8006372:	f001 fdb1 	bl	8007ed8 <SDMMC_CmdSelDesel>
 8006376:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <SD_InitCard+0x176>
  {
    return errorstate;
 800637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006380:	e00e      	b.n	80063a0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681d      	ldr	r5, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	466c      	mov	r4, sp
 800638a:	f103 0210 	add.w	r2, r3, #16
 800638e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006394:	3304      	adds	r3, #4
 8006396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006398:	4628      	mov	r0, r5
 800639a:	f001 fbf5 	bl	8007b88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3740      	adds	r7, #64	; 0x40
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bdb0      	pop	{r4, r5, r7, pc}

080063a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 fdac 	bl	8007f1e <SDMMC_CmdGoIdleState>
 80063c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	e072      	b.n	80064b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fdbf 	bl	8007f5a <SDMMC_CmdOperCond>
 80063dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fd95 	bl	8007f1e <SDMMC_CmdGoIdleState>
 80063f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <SD_PowerON+0x5e>
    {
      return errorstate;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	e05b      	b.n	80064b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800640a:	2b01      	cmp	r3, #1
 800640c:	d137      	bne.n	800647e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fdbf 	bl	8007f98 <SDMMC_CmdAppCommand>
 800641a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d02d      	beq.n	800647e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006422:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006426:	e047      	b.n	80064b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fdb2 	bl	8007f98 <SDMMC_CmdAppCommand>
 8006434:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <SD_PowerON+0x98>
    {
      return errorstate;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	e03b      	b.n	80064b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	491e      	ldr	r1, [pc, #120]	; (80064c0 <SD_PowerON+0x118>)
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fdc8 	bl	8007fdc <SDMMC_CmdAppOperCommand>
 800644c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006458:	e02e      	b.n	80064b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fc2d 	bl	8007cc0 <SDIO_GetResponse>
 8006466:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	0fdb      	lsrs	r3, r3, #31
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <SD_PowerON+0xcc>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <SD_PowerON+0xce>
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]

    count++;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3301      	adds	r3, #1
 800647c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006484:	4293      	cmp	r3, r2
 8006486:	d802      	bhi.n	800648e <SD_PowerON+0xe6>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0cc      	beq.n	8006428 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006494:	4293      	cmp	r3, r2
 8006496:	d902      	bls.n	800649e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800649c:	e00c      	b.n	80064b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	645a      	str	r2, [r3, #68]	; 0x44
 80064ae:	e002      	b.n	80064b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	c1100000 	.word	0xc1100000

080064c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80064d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064d8:	e018      	b.n	800650c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f001 fdf9 	bl	80080de <SDMMC_CmdSendStatus>
 80064ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	e009      	b.n	800650c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2100      	movs	r1, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 fbde 	bl	8007cc0 <SDIO_GetResponse>
 8006504:	4602      	mov	r2, r0
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d03f      	beq.n	80065ae <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e033      	b.n	800659c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fb50 	bl	8007bde <SDIO_ReadFIFO>
 800653e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3b01      	subs	r3, #1
 8006552:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	0a1b      	lsrs	r3, r3, #8
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	3b01      	subs	r3, #1
 8006568:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	b2da      	uxtb	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3b01      	subs	r3, #1
 800657e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	0e1b      	lsrs	r3, r3, #24
 8006584:	b2da      	uxtb	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	701a      	strb	r2, [r3, #0]
      tmp++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3b01      	subs	r3, #1
 8006594:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	3301      	adds	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b07      	cmp	r3, #7
 80065a0:	d9c8      	bls.n	8006534 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d043      	beq.n	8006658 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e037      	b.n	8006646 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	021a      	lsls	r2, r3, #8
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	041a      	lsls	r2, r3, #16
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4313      	orrs	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3b01      	subs	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	061a      	lsls	r2, r3, #24
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4313      	orrs	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3b01      	subs	r3, #1
 800662e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f107 0208 	add.w	r2, r7, #8
 8006638:	4611      	mov	r1, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fadc 	bl	8007bf8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3301      	adds	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b07      	cmp	r3, #7
 800664a:	d9c4      	bls.n	80065d6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006658:	bf00      	nop
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e07b      	b.n	800676a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006682:	d009      	beq.n	8006698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	61da      	str	r2, [r3, #28]
 800668a:	e005      	b.n	8006698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb fb08 	bl	8001cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671c:	ea42 0103 	orr.w	r1, r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	f003 0104 	and.w	r1, r3, #4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0210 	and.w	r2, r3, #16
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006758:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b088      	sub	sp, #32
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_SPI_Transmit+0x22>
 8006790:	2302      	movs	r3, #2
 8006792:	e126      	b.n	80069e2 <HAL_SPI_Transmit+0x270>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800679c:	f7fd f826 	bl	80037ec <HAL_GetTick>
 80067a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d002      	beq.n	80067b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
 80067b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067b6:	e10b      	b.n	80069d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_Transmit+0x52>
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067c8:	e102      	b.n	80069d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2203      	movs	r2, #3
 80067ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006810:	d10f      	bne.n	8006832 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006830:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d007      	beq.n	8006850 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d14b      	bne.n	80068f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_SPI_Transmit+0xf6>
 8006862:	8afb      	ldrh	r3, [r7, #22]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d13e      	bne.n	80068e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	881a      	ldrh	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	1c9a      	adds	r2, r3, #2
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800688c:	e02b      	b.n	80068e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d112      	bne.n	80068c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	881a      	ldrh	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	86da      	strh	r2, [r3, #54]	; 0x36
 80068c0:	e011      	b.n	80068e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c2:	f7fc ff93 	bl	80037ec <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d803      	bhi.n	80068da <HAL_SPI_Transmit+0x168>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d102      	bne.n	80068e0 <HAL_SPI_Transmit+0x16e>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068e4:	e074      	b.n	80069d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1ce      	bne.n	800688e <HAL_SPI_Transmit+0x11c>
 80068f0:	e04c      	b.n	800698c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_Transmit+0x18e>
 80068fa:	8afb      	ldrh	r3, [r7, #22]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d140      	bne.n	8006982 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006926:	e02c      	b.n	8006982 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d113      	bne.n	800695e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	86da      	strh	r2, [r3, #54]	; 0x36
 800695c:	e011      	b.n	8006982 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800695e:	f7fc ff45 	bl	80037ec <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d803      	bhi.n	8006976 <HAL_SPI_Transmit+0x204>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006974:	d102      	bne.n	800697c <HAL_SPI_Transmit+0x20a>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006980:	e026      	b.n	80069d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1cd      	bne.n	8006928 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fce9 	bl	8007368 <SPI_EndRxTxTransaction>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e000      	b.n	80069d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80069ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b088      	sub	sp, #32
 80069ee:	af02      	add	r7, sp, #8
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	4613      	mov	r3, r2
 80069f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a06:	d112      	bne.n	8006a2e <HAL_SPI_Receive+0x44>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10e      	bne.n	8006a2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f8f1 	bl	8006c0c <HAL_SPI_TransmitReceive>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	e0ea      	b.n	8006c04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_SPI_Receive+0x52>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e0e3      	b.n	8006c04 <HAL_SPI_Receive+0x21a>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a44:	f7fc fed2 	bl	80037ec <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
 8006a58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a5a:	e0ca      	b.n	8006bf2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_SPI_Receive+0x7e>
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a6c:	e0c1      	b.n	8006bf2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2204      	movs	r2, #4
 8006a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ad4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d007      	beq.n	8006af4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d162      	bne.n	8006bc2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006afc:	e02e      	b.n	8006b5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d115      	bne.n	8006b38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f103 020c 	add.w	r2, r3, #12
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b36:	e011      	b.n	8006b5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b38:	f7fc fe58 	bl	80037ec <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d803      	bhi.n	8006b50 <HAL_SPI_Receive+0x166>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d102      	bne.n	8006b56 <HAL_SPI_Receive+0x16c>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b5a:	e04a      	b.n	8006bf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1cb      	bne.n	8006afe <HAL_SPI_Receive+0x114>
 8006b66:	e031      	b.n	8006bcc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d113      	bne.n	8006b9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	b292      	uxth	r2, r2
 8006b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	1c9a      	adds	r2, r3, #2
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b9c:	e011      	b.n	8006bc2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b9e:	f7fc fe25 	bl	80037ec <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d803      	bhi.n	8006bb6 <HAL_SPI_Receive+0x1cc>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d102      	bne.n	8006bbc <HAL_SPI_Receive+0x1d2>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006bc0:	e017      	b.n	8006bf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1cd      	bne.n	8006b68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fb63 	bl	800729c <SPI_EndRxTransaction>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e000      	b.n	8006bf2 <HAL_SPI_Receive+0x208>
  }

error :
 8006bf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08c      	sub	sp, #48	; 0x30
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_SPI_TransmitReceive+0x26>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e18a      	b.n	8006f48 <HAL_SPI_TransmitReceive+0x33c>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c3a:	f7fc fdd7 	bl	80037ec <HAL_GetTick>
 8006c3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d00f      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x70>
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c62:	d107      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x68>
 8006c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d003      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c7a:	e15b      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x82>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x82>
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c94:	e14e      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d003      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2205      	movs	r2, #5
 8006ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	887a      	ldrh	r2, [r7, #2]
 8006cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	887a      	ldrh	r2, [r7, #2]
 8006cc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	887a      	ldrh	r2, [r7, #2]
 8006cd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d007      	beq.n	8006cfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d06:	d178      	bne.n	8006dfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_SPI_TransmitReceive+0x10a>
 8006d10:	8b7b      	ldrh	r3, [r7, #26]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d166      	bne.n	8006de4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	1c9a      	adds	r2, r3, #2
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d3a:	e053      	b.n	8006de4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d11b      	bne.n	8006d82 <HAL_SPI_TransmitReceive+0x176>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_SPI_TransmitReceive+0x176>
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d113      	bne.n	8006d82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d119      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x1b8>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d014      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	b292      	uxth	r2, r2
 8006da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	1c9a      	adds	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dc4:	f7fc fd12 	bl	80037ec <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d807      	bhi.n	8006de4 <HAL_SPI_TransmitReceive+0x1d8>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d003      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006de2:	e0a7      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1a6      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x130>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1a1      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x130>
 8006df8:	e07c      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x1fc>
 8006e02:	8b7b      	ldrh	r3, [r7, #26]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d16b      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	7812      	ldrb	r2, [r2, #0]
 8006e14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e2e:	e057      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d11c      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x26c>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d017      	beq.n	8006e78 <HAL_SPI_TransmitReceive+0x26c>
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d114      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d119      	bne.n	8006eba <HAL_SPI_TransmitReceive+0x2ae>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d014      	beq.n	8006eba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006eba:	f7fc fc97 	bl	80037ec <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d803      	bhi.n	8006ed2 <HAL_SPI_TransmitReceive+0x2c6>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d102      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x2cc>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ede:	e029      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1a2      	bne.n	8006e30 <HAL_SPI_TransmitReceive+0x224>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d19d      	bne.n	8006e30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa35 	bl	8007368 <SPI_EndRxTxTransaction>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006f10:	e010      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	e000      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3730      	adds	r7, #48	; 0x30
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	099b      	lsrs	r3, r3, #6
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10f      	bne.n	8006f94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
    return;
 8006f92:	e0d7      	b.n	8007144 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <HAL_SPI_IRQHandler+0x66>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	09db      	lsrs	r3, r3, #7
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
    return;
 8006fb4:	e0c6      	b.n	8007144 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10c      	bne.n	8006fdc <HAL_SPI_IRQHandler+0x8c>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	099b      	lsrs	r3, r3, #6
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d106      	bne.n	8006fdc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	0a1b      	lsrs	r3, r3, #8
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80b4 	beq.w	8007144 <HAL_SPI_IRQHandler+0x1f4>
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80ad 	beq.w	8007144 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	099b      	lsrs	r3, r3, #6
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d023      	beq.n	800703e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d011      	beq.n	8007026 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f043 0204 	orr.w	r2, r3, #4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	e00b      	b.n	800703e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	693b      	ldr	r3, [r7, #16]
        return;
 800703c:	e082      	b.n	8007144 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d014      	beq.n	8007074 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	0a1b      	lsrs	r3, r3, #8
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00c      	beq.n	800709a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	f043 0208 	orr.w	r2, r3, #8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800708c:	2300      	movs	r3, #0
 800708e:	60bb      	str	r3, [r7, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04f      	beq.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <HAL_SPI_IRQHandler+0x17e>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d034      	beq.n	8007138 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0203 	bic.w	r2, r2, #3
 80070dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d011      	beq.n	800710a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ea:	4a18      	ldr	r2, [pc, #96]	; (800714c <HAL_SPI_IRQHandler+0x1fc>)
 80070ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fc febc 	bl	8003e70 <HAL_DMA_Abort_IT>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007116:	4a0d      	ldr	r2, [pc, #52]	; (800714c <HAL_SPI_IRQHandler+0x1fc>)
 8007118:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711e:	4618      	mov	r0, r3
 8007120:	f7fc fea6 	bl	8003e70 <HAL_DMA_Abort_IT>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007136:	e003      	b.n	8007140 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f809 	bl	8007150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800713e:	e000      	b.n	8007142 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007140:	bf00      	nop
    return;
 8007142:	bf00      	nop
  }
}
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	08007165 	.word	0x08007165

08007150 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7ff ffe6 	bl	8007150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800719c:	f7fc fb26 	bl	80037ec <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071ac:	f7fc fb1e 	bl	80037ec <HAL_GetTick>
 80071b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071b2:	4b39      	ldr	r3, [pc, #228]	; (8007298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	015b      	lsls	r3, r3, #5
 80071b8:	0d1b      	lsrs	r3, r3, #20
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	fb02 f303 	mul.w	r3, r2, r3
 80071c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c2:	e054      	b.n	800726e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ca:	d050      	beq.n	800726e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071cc:	f7fc fb0e 	bl	80037ec <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d902      	bls.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d13d      	bne.n	800725e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071fa:	d111      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007204:	d004      	beq.n	8007210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720e:	d107      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007228:	d10f      	bne.n	800724a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e017      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	3b01      	subs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	429a      	cmp	r2, r3
 800728a:	d19b      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000020 	.word	0x20000020

0800729c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b0:	d111      	bne.n	80072d6 <SPI_EndRxTransaction+0x3a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ba:	d004      	beq.n	80072c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d107      	bne.n	80072d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072de:	d12a      	bne.n	8007336 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e8:	d012      	beq.n	8007310 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2180      	movs	r1, #128	; 0x80
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff ff49 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d02d      	beq.n	800735c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	f043 0220 	orr.w	r2, r3, #32
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e026      	b.n	800735e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	2101      	movs	r1, #1
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff ff36 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f043 0220 	orr.w	r2, r3, #32
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e013      	b.n	800735e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2200      	movs	r2, #0
 800733e:	2101      	movs	r1, #1
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff ff23 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007350:	f043 0220 	orr.w	r2, r3, #32
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e000      	b.n	800735e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007374:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <SPI_EndRxTxTransaction+0x7c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1b      	ldr	r2, [pc, #108]	; (80073e8 <SPI_EndRxTxTransaction+0x80>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	0d5b      	lsrs	r3, r3, #21
 8007380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007384:	fb02 f303 	mul.w	r3, r2, r3
 8007388:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007392:	d112      	bne.n	80073ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fef4 	bl	800718c <SPI_WaitFlagStateUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f043 0220 	orr.w	r2, r3, #32
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e00f      	b.n	80073da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d0f2      	beq.n	80073ba <SPI_EndRxTxTransaction+0x52>
 80073d4:	e000      	b.n	80073d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80073d6:	bf00      	nop
  }

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000020 	.word	0x20000020
 80073e8:	165e9f81 	.word	0x165e9f81

080073ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e038      	b.n	8007474 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7fa f906 	bl	8001628 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3308      	adds	r3, #8
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f000 fad6 	bl	80079d8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	461a      	mov	r2, r3
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	f000 fb38 	bl	8007aac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6858      	ldr	r0, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	f000 fb65 	bl	8007b18 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	6892      	ldr	r2, [r2, #8]
 8007456:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	6892      	ldr	r2, [r2, #8]
 8007462:	f041 0101 	orr.w	r1, r1, #1
 8007466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e041      	b.n	8007512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f839 	bl	800751a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f000 f9d8 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	d001      	beq.n	8007548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e04e      	b.n	80075e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a23      	ldr	r2, [pc, #140]	; (80075f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d022      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007572:	d01d      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d018      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <HAL_TIM_Base_Start_IT+0xcc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1c      	ldr	r2, [pc, #112]	; (8007600 <HAL_TIM_Base_Start_IT+0xd0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00e      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <HAL_TIM_Base_Start_IT+0xd4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a19      	ldr	r2, [pc, #100]	; (8007608 <HAL_TIM_Base_Start_IT+0xd8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x80>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a18      	ldr	r2, [pc, #96]	; (800760c <HAL_TIM_Base_Start_IT+0xdc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d111      	bne.n	80075d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b06      	cmp	r3, #6
 80075c0:	d010      	beq.n	80075e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	e007      	b.n	80075e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0201 	orr.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40010400 	.word	0x40010400
 8007608:	40014000 	.word	0x40014000
 800760c:	40001800 	.word	0x40001800

08007610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b02      	cmp	r3, #2
 8007624:	d122      	bne.n	800766c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b02      	cmp	r3, #2
 8007632:	d11b      	bne.n	800766c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0202 	mvn.w	r2, #2
 800763c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f8ee 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007658:	e005      	b.n	8007666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f8e0 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f8f1 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b04      	cmp	r3, #4
 8007678:	d122      	bne.n	80076c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b04      	cmp	r3, #4
 8007686:	d11b      	bne.n	80076c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0204 	mvn.w	r2, #4
 8007690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8c4 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 80076ac:	e005      	b.n	80076ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8b6 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f8c7 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d122      	bne.n	8007714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d11b      	bne.n	8007714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0208 	mvn.w	r2, #8
 80076e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2204      	movs	r2, #4
 80076ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f89a 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007700:	e005      	b.n	800770e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f88c 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f89d 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b10      	cmp	r3, #16
 8007720:	d122      	bne.n	8007768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d11b      	bne.n	8007768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0210 	mvn.w	r2, #16
 8007738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2208      	movs	r2, #8
 800773e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f870 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007754:	e005      	b.n	8007762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f862 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f873 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10e      	bne.n	8007794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b01      	cmp	r3, #1
 8007782:	d107      	bne.n	8007794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0201 	mvn.w	r2, #1
 800778c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fa f93a 	bl	8001a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779e:	2b80      	cmp	r3, #128	; 0x80
 80077a0:	d10e      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d107      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f902 	bl	80079c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d10e      	bne.n	80077ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	2b40      	cmp	r3, #64	; 0x40
 80077da:	d107      	bne.n	80077ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f838 	bl	800785c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d10e      	bne.n	8007818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b20      	cmp	r3, #32
 8007806:	d107      	bne.n	8007818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0220 	mvn.w	r2, #32
 8007810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8cc 	bl	80079b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a40      	ldr	r2, [pc, #256]	; (8007984 <TIM_Base_SetConfig+0x114>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d00f      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3d      	ldr	r2, [pc, #244]	; (8007988 <TIM_Base_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00b      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3c      	ldr	r2, [pc, #240]	; (800798c <TIM_Base_SetConfig+0x11c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3b      	ldr	r2, [pc, #236]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3a      	ldr	r2, [pc, #232]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2f      	ldr	r2, [pc, #188]	; (8007984 <TIM_Base_SetConfig+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d02b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d027      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <TIM_Base_SetConfig+0x118>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d023      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <TIM_Base_SetConfig+0x11c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01f      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a29      	ldr	r2, [pc, #164]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d017      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a28      	ldr	r2, [pc, #160]	; (8007998 <TIM_Base_SetConfig+0x128>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a27      	ldr	r2, [pc, #156]	; (800799c <TIM_Base_SetConfig+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a26      	ldr	r2, [pc, #152]	; (80079a0 <TIM_Base_SetConfig+0x130>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a25      	ldr	r2, [pc, #148]	; (80079a4 <TIM_Base_SetConfig+0x134>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a24      	ldr	r2, [pc, #144]	; (80079a8 <TIM_Base_SetConfig+0x138>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a23      	ldr	r2, [pc, #140]	; (80079ac <TIM_Base_SetConfig+0x13c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d108      	bne.n	8007934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <TIM_Base_SetConfig+0x114>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <TIM_Base_SetConfig+0x124>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40010400 	.word	0x40010400
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800
 80079a4:	40001800 	.word	0x40001800
 80079a8:	40001c00 	.word	0x40001c00
 80079ac:	40002000 	.word	0x40002000

080079b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	f023 0101 	bic.w	r1, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d102      	bne.n	8007a08 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007a02:	2340      	movs	r3, #64	; 0x40
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	e001      	b.n	8007a0c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007a18:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007a1e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007a24:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007a2a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007a30:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007a36:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007a3c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007a42:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007a48:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <FSMC_NORSRAM_Init+0xd0>)
 8007a68:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a70:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007a78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	43db      	mvns	r3, r3
 8007a88:	ea02 0103 	and.w	r1, r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4319      	orrs	r1, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	0008fb7f 	.word	0x0008fb7f

08007aac <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	041b      	lsls	r3, r3, #16
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	051b      	lsls	r3, r3, #20
 8007aea:	431a      	orrs	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	3b02      	subs	r3, #2
 8007af2:	061b      	lsls	r3, r3, #24
 8007af4:	431a      	orrs	r2, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	3201      	adds	r2, #1
 8007b00:	4319      	orrs	r1, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b2c:	d11d      	bne.n	8007b6a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	6852      	ldr	r2, [r2, #4]
 8007b42:	0112      	lsls	r2, r2, #4
 8007b44:	4311      	orrs	r1, r2
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	6892      	ldr	r2, [r2, #8]
 8007b4a:	0212      	lsls	r2, r2, #8
 8007b4c:	4311      	orrs	r1, r2
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	6992      	ldr	r2, [r2, #24]
 8007b52:	4311      	orrs	r1, r2
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	68d2      	ldr	r2, [r2, #12]
 8007b58:	0412      	lsls	r2, r2, #16
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	ea43 0102 	orr.w	r1, r3, r2
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b68:	e005      	b.n	8007b76 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	cff00000 	.word	0xcff00000

08007b88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007b88:	b084      	sub	sp, #16
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	f107 001c 	add.w	r0, r7, #28
 8007b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007b9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ba2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ba6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007baa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007bae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007bb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	b004      	add	sp, #16
 8007bdc:	4770      	bx	lr

08007bde <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2203      	movs	r2, #3
 8007c26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0303 	and.w	r3, r3, #3
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c70:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007c76:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007c7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007c8c:	f023 030f 	bic.w	r3, r3, #15
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	b2db      	uxtb	r3, r3
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	461a      	mov	r2, r3
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
}  
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d0c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007d12:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007d18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0

}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d54:	2300      	movs	r3, #0
 8007d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5e:	f107 0308 	add.w	r3, r7, #8
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff74 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6e:	2110      	movs	r1, #16
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f9d7 	bl	8008124 <SDMMC_GetCmdResp1>
 8007d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d78:	69fb      	ldr	r3, [r7, #28]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3720      	adds	r7, #32
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b088      	sub	sp, #32
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007d90:	2311      	movs	r3, #17
 8007d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007da0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff ff52 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db2:	2111      	movs	r1, #17
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f9b5 	bl	8008124 <SDMMC_GetCmdResp1>
 8007dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b088      	sub	sp, #32
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007dd4:	2312      	movs	r3, #18
 8007dd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007de6:	f107 0308 	add.w	r3, r7, #8
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ff30 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df6:	2112      	movs	r1, #18
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f993 	bl	8008124 <SDMMC_GetCmdResp1>
 8007dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e00:	69fb      	ldr	r3, [r7, #28]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3720      	adds	r7, #32
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b088      	sub	sp, #32
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007e18:	2318      	movs	r3, #24
 8007e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e2a:	f107 0308 	add.w	r3, r7, #8
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ff0e 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3a:	2118      	movs	r1, #24
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f971 	bl	8008124 <SDMMC_GetCmdResp1>
 8007e42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e44:	69fb      	ldr	r3, [r7, #28]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b088      	sub	sp, #32
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007e5c:	2319      	movs	r3, #25
 8007e5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e60:	2340      	movs	r3, #64	; 0x40
 8007e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e6e:	f107 0308 	add.w	r3, r7, #8
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff feec 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7e:	2119      	movs	r1, #25
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f94f 	bl	8008124 <SDMMC_GetCmdResp1>
 8007e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e88:	69fb      	ldr	r3, [r7, #28]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007ea0:	230c      	movs	r3, #12
 8007ea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff feca 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007ebe:	4a05      	ldr	r2, [pc, #20]	; (8007ed4 <SDMMC_CmdStopTransfer+0x40>)
 8007ec0:	210c      	movs	r1, #12
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f92e 	bl	8008124 <SDMMC_GetCmdResp1>
 8007ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eca:	69fb      	ldr	r3, [r7, #28]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	05f5e100 	.word	0x05f5e100

08007ed8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007ee8:	2307      	movs	r3, #7
 8007eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007efa:	f107 0310 	add.w	r3, r7, #16
 8007efe:	4619      	mov	r1, r3
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fea6 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0a:	2107      	movs	r1, #7
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f909 	bl	8008124 <SDMMC_GetCmdResp1>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3728      	adds	r7, #40	; 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b088      	sub	sp, #32
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fe85 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb23 	bl	8008594 <SDMMC_GetCmdError>
 8007f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f50:	69fb      	ldr	r3, [r7, #28]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b088      	sub	sp, #32
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f68:	2308      	movs	r3, #8
 8007f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f7a:	f107 0308 	add.w	r3, r7, #8
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fe66 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fab6 	bl	80084f8 <SDMMC_GetCmdResp7>
 8007f8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3720      	adds	r7, #32
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007fa6:	2337      	movs	r3, #55	; 0x37
 8007fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff fe47 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc8:	2137      	movs	r1, #55	; 0x37
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f8aa 	bl	8008124 <SDMMC_GetCmdResp1>
 8007fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3720      	adds	r7, #32
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007ff2:	2329      	movs	r3, #41	; 0x29
 8007ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008004:	f107 0308 	add.w	r3, r7, #8
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fe21 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f9bd 	bl	8008390 <SDMMC_GetCmdResp3>
 8008016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008018:	69fb      	ldr	r3, [r7, #28]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b088      	sub	sp, #32
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800802e:	2302      	movs	r3, #2
 8008030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008032:	23c0      	movs	r3, #192	; 0xc0
 8008034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800803a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008040:	f107 0308 	add.w	r3, r7, #8
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff fe03 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f957 	bl	8008300 <SDMMC_GetCmdResp2>
 8008052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008054:	69fb      	ldr	r3, [r7, #28]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b088      	sub	sp, #32
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800806c:	2309      	movs	r3, #9
 800806e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008070:	23c0      	movs	r3, #192	; 0xc0
 8008072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800807c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff fde4 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f938 	bl	8008300 <SDMMC_GetCmdResp2>
 8008090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008092:	69fb      	ldr	r3, [r7, #28]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3720      	adds	r7, #32
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80080aa:	2303      	movs	r3, #3
 80080ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080ae:	2340      	movs	r3, #64	; 0x40
 80080b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080b2:	2300      	movs	r3, #0
 80080b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080bc:	f107 0308 	add.w	r3, r7, #8
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff fdc5 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	2103      	movs	r1, #3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f99d 	bl	800840c <SDMMC_GetCmdResp6>
 80080d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080d4:	69fb      	ldr	r3, [r7, #28]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3720      	adds	r7, #32
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b088      	sub	sp, #32
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80080ec:	230d      	movs	r3, #13
 80080ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080f0:	2340      	movs	r3, #64	; 0x40
 80080f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fda4 	bl	8007c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800810a:	f241 3288 	movw	r2, #5000	; 0x1388
 800810e:	210d      	movs	r1, #13
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f807 	bl	8008124 <SDMMC_GetCmdResp1>
 8008116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008118:	69fb      	ldr	r3, [r7, #28]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	460b      	mov	r3, r1
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008132:	4b70      	ldr	r3, [pc, #448]	; (80082f4 <SDMMC_GetCmdResp1+0x1d0>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a70      	ldr	r2, [pc, #448]	; (80082f8 <SDMMC_GetCmdResp1+0x1d4>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	0a5a      	lsrs	r2, r3, #9
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	fb02 f303 	mul.w	r3, r2, r3
 8008144:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	61fa      	str	r2, [r7, #28]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008154:	e0c9      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0ef      	beq.n	8008146 <SDMMC_GetCmdResp1+0x22>
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ea      	bne.n	8008146 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2204      	movs	r2, #4
 8008180:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008182:	2304      	movs	r3, #4
 8008184:	e0b1      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008198:	2301      	movs	r3, #1
 800819a:	e0a6      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	22c5      	movs	r2, #197	; 0xc5
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff fd7f 	bl	8007ca6 <SDIO_GetCommandResponse>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d001      	beq.n	80081b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e099      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80081b6:	2100      	movs	r1, #0
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff fd81 	bl	8007cc0 <SDIO_GetResponse>
 80081be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <SDMMC_GetCmdResp1+0x1d8>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e08d      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	da02      	bge.n	80081da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80081d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081d8:	e087      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	e080      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80081f2:	2380      	movs	r3, #128	; 0x80
 80081f4:	e079      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008204:	e071      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008214:	e069      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008224:	e061      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008234:	e059      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008244:	e051      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008254:	e049      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008264:	e041      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008274:	e039      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008284:	e031      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008294:	e029      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80082a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80082a4:	e021      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80082b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082b4:	e019      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80082c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082c4:	e011      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80082d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80082d4:	e009      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80082e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80082e4:	e001      	b.n	80082ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80082e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3720      	adds	r7, #32
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000020 	.word	0x20000020
 80082f8:	10624dd3 	.word	0x10624dd3
 80082fc:	fdffe008 	.word	0xfdffe008

08008300 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008308:	4b1f      	ldr	r3, [pc, #124]	; (8008388 <SDMMC_GetCmdResp2+0x88>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <SDMMC_GetCmdResp2+0x8c>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	0a5b      	lsrs	r3, r3, #9
 8008314:	f241 3288 	movw	r2, #5000	; 0x1388
 8008318:	fb02 f303 	mul.w	r3, r2, r3
 800831c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1e5a      	subs	r2, r3, #1
 8008322:	60fa      	str	r2, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800832c:	e026      	b.n	800837c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0ef      	beq.n	800831e <SDMMC_GetCmdResp2+0x1e>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1ea      	bne.n	800831e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2204      	movs	r2, #4
 8008358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800835a:	2304      	movs	r3, #4
 800835c:	e00e      	b.n	800837c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008370:	2301      	movs	r3, #1
 8008372:	e003      	b.n	800837c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	22c5      	movs	r2, #197	; 0xc5
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	20000020 	.word	0x20000020
 800838c:	10624dd3 	.word	0x10624dd3

08008390 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008398:	4b1a      	ldr	r3, [pc, #104]	; (8008404 <SDMMC_GetCmdResp3+0x74>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1a      	ldr	r2, [pc, #104]	; (8008408 <SDMMC_GetCmdResp3+0x78>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	0a5b      	lsrs	r3, r3, #9
 80083a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a8:	fb02 f303 	mul.w	r3, r2, r3
 80083ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1e5a      	subs	r2, r3, #1
 80083b2:	60fa      	str	r2, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083bc:	e01b      	b.n	80083f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0ef      	beq.n	80083ae <SDMMC_GetCmdResp3+0x1e>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1ea      	bne.n	80083ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2204      	movs	r2, #4
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083ea:	2304      	movs	r3, #4
 80083ec:	e003      	b.n	80083f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	22c5      	movs	r2, #197	; 0xc5
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20000020 	.word	0x20000020
 8008408:	10624dd3 	.word	0x10624dd3

0800840c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800841a:	4b35      	ldr	r3, [pc, #212]	; (80084f0 <SDMMC_GetCmdResp6+0xe4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a35      	ldr	r2, [pc, #212]	; (80084f4 <SDMMC_GetCmdResp6+0xe8>)
 8008420:	fba2 2303 	umull	r2, r3, r2, r3
 8008424:	0a5b      	lsrs	r3, r3, #9
 8008426:	f241 3288 	movw	r2, #5000	; 0x1388
 800842a:	fb02 f303 	mul.w	r3, r2, r3
 800842e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	1e5a      	subs	r2, r3, #1
 8008434:	61fa      	str	r2, [r7, #28]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800843a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800843e:	e052      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0ef      	beq.n	8008430 <SDMMC_GetCmdResp6+0x24>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1ea      	bne.n	8008430 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2204      	movs	r2, #4
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800846c:	2304      	movs	r3, #4
 800846e:	e03a      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008482:	2301      	movs	r3, #1
 8008484:	e02f      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff fc0d 	bl	8007ca6 <SDIO_GetCommandResponse>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	4293      	cmp	r3, r2
 8008494:	d001      	beq.n	800849a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008496:	2301      	movs	r3, #1
 8008498:	e025      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	22c5      	movs	r2, #197	; 0xc5
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff fc0c 	bl	8007cc0 <SDIO_GetResponse>
 80084a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80084be:	2300      	movs	r3, #0
 80084c0:	e011      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084d0:	e009      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084e0:	e001      	b.n	80084e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3720      	adds	r7, #32
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000020 	.word	0x20000020
 80084f4:	10624dd3 	.word	0x10624dd3

080084f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008500:	4b22      	ldr	r3, [pc, #136]	; (800858c <SDMMC_GetCmdResp7+0x94>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a22      	ldr	r2, [pc, #136]	; (8008590 <SDMMC_GetCmdResp7+0x98>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	0a5b      	lsrs	r3, r3, #9
 800850c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008510:	fb02 f303 	mul.w	r3, r2, r3
 8008514:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	60fa      	str	r2, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008524:	e02c      	b.n	8008580 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0ef      	beq.n	8008516 <SDMMC_GetCmdResp7+0x1e>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1ea      	bne.n	8008516 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2204      	movs	r2, #4
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008552:	2304      	movs	r3, #4
 8008554:	e014      	b.n	8008580 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008568:	2301      	movs	r3, #1
 800856a:	e009      	b.n	8008580 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2240      	movs	r2, #64	; 0x40
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800857e:	2300      	movs	r3, #0
  
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	20000020 	.word	0x20000020
 8008590:	10624dd3 	.word	0x10624dd3

08008594 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800859c:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <SDMMC_GetCmdError+0x50>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a11      	ldr	r2, [pc, #68]	; (80085e8 <SDMMC_GetCmdError+0x54>)
 80085a2:	fba2 2303 	umull	r2, r3, r2, r3
 80085a6:	0a5b      	lsrs	r3, r3, #9
 80085a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ac:	fb02 f303 	mul.w	r3, r2, r3
 80085b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1e5a      	subs	r2, r3, #1
 80085b6:	60fa      	str	r2, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d102      	bne.n	80085c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085c0:	e009      	b.n	80085d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0f1      	beq.n	80085b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	22c5      	movs	r2, #197	; 0xc5
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000020 	.word	0x20000020
 80085e8:	10624dd3 	.word	0x10624dd3

080085ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <MX_FATFS_Init+0x18>)
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <MX_FATFS_Init+0x1c>)
 80085f4:	f000 fab2 	bl	8008b5c <FATFS_LinkDriver>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	4b03      	ldr	r3, [pc, #12]	; (800860c <MX_FATFS_Init+0x20>)
 80085fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008600:	bf00      	nop
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20001164 	.word	0x20001164
 8008608:	0800f818 	.word	0x0800f818
 800860c:	20001160 	.word	0x20001160

08008610 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800861a:	f000 f888 	bl	800872e <BSP_SD_IsDetected>
 800861e:	4603      	mov	r3, r0
 8008620:	2b01      	cmp	r3, #1
 8008622:	d001      	beq.n	8008628 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e005      	b.n	8008634 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008628:	4804      	ldr	r0, [pc, #16]	; (800863c <BSP_SD_Init+0x2c>)
 800862a:	f7fc fee9 	bl	8005400 <HAL_SD_Init>
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008632:	79fb      	ldrb	r3, [r7, #7]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	2000092c 	.word	0x2000092c

08008640 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	68f9      	ldr	r1, [r7, #12]
 8008656:	4806      	ldr	r0, [pc, #24]	; (8008670 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008658:	f7fc ff82 	bl	8005560 <HAL_SD_ReadBlocks_DMA>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008666:	7dfb      	ldrb	r3, [r7, #23]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	2000092c 	.word	0x2000092c

08008674 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	68f9      	ldr	r1, [r7, #12]
 800868a:	4806      	ldr	r0, [pc, #24]	; (80086a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800868c:	f7fd f84a 	bl	8005724 <HAL_SD_WriteBlocks_DMA>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	2000092c 	.word	0x2000092c

080086a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80086ac:	4805      	ldr	r0, [pc, #20]	; (80086c4 <BSP_SD_GetCardState+0x1c>)
 80086ae:	f7fd fc7f 	bl	8005fb0 <HAL_SD_GetCardState>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	bf14      	ite	ne
 80086b8:	2301      	movne	r3, #1
 80086ba:	2300      	moveq	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
}
 80086be:	4618      	mov	r0, r3
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	2000092c 	.word	0x2000092c

080086c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4803      	ldr	r0, [pc, #12]	; (80086e0 <BSP_SD_GetCardInfo+0x18>)
 80086d4:	f7fd fc40 	bl	8005f58 <HAL_SD_GetCardInfo>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	2000092c 	.word	0x2000092c

080086e4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80086ec:	f000 f818 	bl	8008720 <BSP_SD_AbortCallback>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008700:	f000 f9c4 	bl	8008a8c <BSP_SD_WriteCpltCallback>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008714:	f000 f9c8 	bl	8008aa8 <BSP_SD_ReadCpltCallback>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0

}
 8008724:	bf00      	nop
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008734:	2301      	movs	r3, #1
 8008736:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008738:	f000 f80c 	bl	8008754 <BSP_PlatformIsDetected>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008742:	2300      	movs	r3, #0
 8008744:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	b2db      	uxtb	r3, r3
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800875a:	2301      	movs	r3, #1
 800875c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800875e:	2108      	movs	r1, #8
 8008760:	4806      	ldr	r0, [pc, #24]	; (800877c <BSP_PlatformIsDetected+0x28>)
 8008762:	f7fb ffb9 	bl	80046d8 <HAL_GPIO_ReadPin>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800876c:	2300      	movs	r3, #0
 800876e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008770:	79fb      	ldrb	r3, [r7, #7]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40020c00 	.word	0x40020c00

08008780 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8008788:	f000 fa34 	bl	8008bf4 <osKernelSysTick>
 800878c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800878e:	e006      	b.n	800879e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008790:	f7ff ff8a 	bl	80086a8 <BSP_SD_GetCardState>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800879a:	2300      	movs	r3, #0
 800879c:	e009      	b.n	80087b2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800879e:	f000 fa29 	bl	8008bf4 <osKernelSysTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d8f0      	bhi.n	8008790 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80087ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80087c6:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <SD_CheckStatus+0x38>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80087cc:	f7ff ff6c 	bl	80086a8 <BSP_SD_GetCardState>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d107      	bne.n	80087e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80087d6:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <SD_CheckStatus+0x38>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <SD_CheckStatus+0x38>)
 80087e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80087e6:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <SD_CheckStatus+0x38>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000089 	.word	0x20000089

080087f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008802:	4b20      	ldr	r3, [pc, #128]	; (8008884 <SD_initialize+0x8c>)
 8008804:	2201      	movs	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8008808:	f000 f9e8 	bl	8008bdc <osKernelRunning>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d030      	beq.n	8008874 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008812:	f7ff fefd 	bl	8008610 <BSP_SD_Init>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff ffcc 	bl	80087bc <SD_CheckStatus>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	4b16      	ldr	r3, [pc, #88]	; (8008884 <SD_initialize+0x8c>)
 800882a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800882c:	4b15      	ldr	r3, [pc, #84]	; (8008884 <SD_initialize+0x8c>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b01      	cmp	r3, #1
 8008834:	d01e      	beq.n	8008874 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <SD_initialize+0x90>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10e      	bne.n	800885c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <SD_initialize+0x94>)
 8008840:	f107 0408 	add.w	r4, r7, #8
 8008844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800884a:	f107 0308 	add.w	r3, r7, #8
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fb67 	bl	8008f24 <osMessageCreate>
 8008856:	4603      	mov	r3, r0
 8008858:	4a0b      	ldr	r2, [pc, #44]	; (8008888 <SD_initialize+0x90>)
 800885a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <SD_initialize+0x90>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d107      	bne.n	8008874 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8008864:	4b07      	ldr	r3, [pc, #28]	; (8008884 <SD_initialize+0x8c>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	b2da      	uxtb	r2, r3
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <SD_initialize+0x8c>)
 8008872:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008874:	4b03      	ldr	r3, [pc, #12]	; (8008884 <SD_initialize+0x8c>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	b2db      	uxtb	r3, r3
}
 800887a:	4618      	mov	r0, r3
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	bd90      	pop	{r4, r7, pc}
 8008882:	bf00      	nop
 8008884:	20000089 	.word	0x20000089
 8008888:	20001168 	.word	0x20001168
 800888c:	0800d5ac 	.word	0x0800d5ac

08008890 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff ff8d 	bl	80087bc <SD_CheckStatus>
 80088a2:	4603      	mov	r3, r0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80088c2:	f247 5030 	movw	r0, #30000	; 0x7530
 80088c6:	f7ff ff5b 	bl	8008780 <SD_CheckStatusWithTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	da02      	bge.n	80088d6 <SD_read+0x2a>
  {
    return res;
 80088d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d4:	e032      	b.n	800893c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	68b8      	ldr	r0, [r7, #8]
 80088dc:	f7ff feb0 	bl	8008640 <BSP_SD_ReadBlocks_DMA>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80088e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d124      	bne.n	8008938 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <SD_read+0x98>)
 80088f0:	6819      	ldr	r1, [r3, #0]
 80088f2:	f107 0314 	add.w	r3, r7, #20
 80088f6:	f247 5230 	movw	r2, #30000	; 0x7530
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fb7a 	bl	8008ff4 <osMessageGet>

    if (event.status == osEventMessage)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b10      	cmp	r3, #16
 8008904:	d118      	bne.n	8008938 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d115      	bne.n	8008938 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800890c:	f000 f972 	bl	8008bf4 <osKernelSysTick>
 8008910:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8008912:	e008      	b.n	8008926 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008914:	f7ff fec8 	bl	80086a8 <BSP_SD_GetCardState>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <SD_read+0x7a>
              {
                res = RES_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008924:	e008      	b.n	8008938 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8008926:	f000 f965 	bl	8008bf4 <osKernelSysTick>
 800892a:	4602      	mov	r2, r0
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	f247 522f 	movw	r2, #29999	; 0x752f
 8008934:	4293      	cmp	r3, r2
 8008936:	d9ed      	bls.n	8008914 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800893c:	4618      	mov	r0, r3
 800893e:	3728      	adds	r7, #40	; 0x28
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20001168 	.word	0x20001168

08008948 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	; 0x28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800895e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008962:	f7ff ff0d 	bl	8008780 <SD_CheckStatusWithTimeout>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	da02      	bge.n	8008972 <SD_write+0x2a>
  {
    return res;
 800896c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008970:	e02e      	b.n	80089d0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	68b8      	ldr	r0, [r7, #8]
 8008978:	f7ff fe7c 	bl	8008674 <BSP_SD_WriteBlocks_DMA>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d124      	bne.n	80089cc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <SD_write+0x90>)
 8008984:	6819      	ldr	r1, [r3, #0]
 8008986:	f107 0314 	add.w	r3, r7, #20
 800898a:	f247 5230 	movw	r2, #30000	; 0x7530
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fb30 	bl	8008ff4 <osMessageGet>

    if (event.status == osEventMessage)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b10      	cmp	r3, #16
 8008998:	d118      	bne.n	80089cc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d115      	bne.n	80089cc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80089a0:	f000 f928 	bl	8008bf4 <osKernelSysTick>
 80089a4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80089a6:	e008      	b.n	80089ba <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80089a8:	f7ff fe7e 	bl	80086a8 <BSP_SD_GetCardState>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d103      	bne.n	80089ba <SD_write+0x72>
          {
            res = RES_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80089b8:	e008      	b.n	80089cc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80089ba:	f000 f91b 	bl	8008bf4 <osKernelSysTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d9ed      	bls.n	80089a8 <SD_write+0x60>
    }

  }
#endif

  return res;
 80089cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3728      	adds	r7, #40	; 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20001168 	.word	0x20001168

080089dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08c      	sub	sp, #48	; 0x30
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	603a      	str	r2, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
 80089e8:	460b      	mov	r3, r1
 80089ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80089f2:	4b25      	ldr	r3, [pc, #148]	; (8008a88 <SD_ioctl+0xac>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <SD_ioctl+0x28>
 8008a00:	2303      	movs	r3, #3
 8008a02:	e03c      	b.n	8008a7e <SD_ioctl+0xa2>

  switch (cmd)
 8008a04:	79bb      	ldrb	r3, [r7, #6]
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d834      	bhi.n	8008a74 <SD_ioctl+0x98>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <SD_ioctl+0x34>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a5b 	.word	0x08008a5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a26:	e028      	b.n	8008a7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a28:	f107 030c 	add.w	r3, r7, #12
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff fe4b 	bl	80086c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a3e:	e01c      	b.n	8008a7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a40:	f107 030c 	add.w	r3, r7, #12
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fe3f 	bl	80086c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a58:	e00f      	b.n	8008a7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a5a:	f107 030c 	add.w	r3, r7, #12
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fe32 	bl	80086c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	0a5a      	lsrs	r2, r3, #9
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a72:	e002      	b.n	8008a7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008a74:	2304      	movs	r3, #4
 8008a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3730      	adds	r7, #48	; 0x30
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000089 	.word	0x20000089

08008a8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8008a90:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <BSP_SD_WriteCpltCallback+0x18>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	2102      	movs	r1, #2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fa6b 	bl	8008f74 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8008a9e:	bf00      	nop
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20001168 	.word	0x20001168

08008aa8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8008aac:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <BSP_SD_ReadCpltCallback+0x18>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fa5d 	bl	8008f74 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8008aba:	bf00      	nop
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20001168 	.word	0x20001168

08008ac4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ada:	4b1f      	ldr	r3, [pc, #124]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008adc:	7a5b      	ldrb	r3, [r3, #9]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d131      	bne.n	8008b48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008ae6:	7a5b      	ldrb	r3, [r3, #9]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008aee:	2100      	movs	r1, #0
 8008af0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008af2:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008af4:	7a5b      	ldrb	r3, [r3, #9]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008b04:	7a5b      	ldrb	r3, [r3, #9]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	79fa      	ldrb	r2, [r7, #7]
 8008b10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b12:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008b14:	7a5b      	ldrb	r3, [r3, #9]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	b2d1      	uxtb	r1, r2
 8008b1c:	4a0e      	ldr	r2, [pc, #56]	; (8008b58 <FATFS_LinkDriverEx+0x94>)
 8008b1e:	7251      	strb	r1, [r2, #9]
 8008b20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b22:	7dbb      	ldrb	r3, [r7, #22]
 8008b24:	3330      	adds	r3, #48	; 0x30
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	223a      	movs	r2, #58	; 0x3a
 8008b32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3302      	adds	r3, #2
 8008b38:	222f      	movs	r2, #47	; 0x2f
 8008b3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3303      	adds	r3, #3
 8008b40:	2200      	movs	r2, #0
 8008b42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	2000116c 	.word	0x2000116c

08008b5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b66:	2200      	movs	r2, #0
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff ffaa 	bl	8008ac4 <FATFS_LinkDriverEx>
 8008b70:	4603      	mov	r3, r0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	4603      	mov	r3, r0
 8008b82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b8c:	2b84      	cmp	r3, #132	; 0x84
 8008b8e:	d005      	beq.n	8008b9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008b90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	3303      	adds	r3, #3
 8008b9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bb0:	f3ef 8305 	mrs	r3, IPSR
 8008bb4:	607b      	str	r3, [r7, #4]
  return(result);
 8008bb6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bf14      	ite	ne
 8008bbc:	2301      	movne	r3, #1
 8008bbe:	2300      	moveq	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bd2:	f001 fc9d 	bl	800a510 <vTaskStartScheduler>
  
  return osOK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8008be0:	f002 f8e8 	bl	800adb4 <xTaskGetSchedulerState>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d101      	bne.n	8008bee <osKernelRunning+0x12>
    return 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e000      	b.n	8008bf0 <osKernelRunning+0x14>
  else
    return 1;
 8008bee:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008bf8:	f7ff ffd7 	bl	8008baa <inHandlerMode>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008c02:	f001 fda5 	bl	800a750 <xTaskGetTickCountFromISR>
 8008c06:	4603      	mov	r3, r0
 8008c08:	e002      	b.n	8008c10 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008c0a:	f001 fd91 	bl	800a730 <xTaskGetTickCount>
 8008c0e:	4603      	mov	r3, r0
  }
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c16:	b089      	sub	sp, #36	; 0x24
 8008c18:	af04      	add	r7, sp, #16
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d020      	beq.n	8008c68 <osThreadCreate+0x54>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01c      	beq.n	8008c68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685c      	ldr	r4, [r3, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681d      	ldr	r5, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	691e      	ldr	r6, [r3, #16]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff ff9a 	bl	8008b7a <makeFreeRtosPriority>
 8008c46:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c50:	9202      	str	r2, [sp, #8]
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	9100      	str	r1, [sp, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f001 fa8f 	bl	800a180 <xTaskCreateStatic>
 8008c62:	4603      	mov	r3, r0
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	e01c      	b.n	8008ca2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685c      	ldr	r4, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c74:	b29e      	uxth	r6, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff ff7c 	bl	8008b7a <makeFreeRtosPriority>
 8008c82:	4602      	mov	r2, r0
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	9200      	str	r2, [sp, #0]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	4632      	mov	r2, r6
 8008c90:	4629      	mov	r1, r5
 8008c92:	4620      	mov	r0, r4
 8008c94:	f001 fad1 	bl	800a23a <xTaskCreate>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d001      	beq.n	8008ca2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e000      	b.n	8008ca4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <osDelay+0x16>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	e000      	b.n	8008cc4 <osDelay+0x18>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 fbef 	bl	800a4a8 <vTaskDelay>
  
  return osOK;
 8008cca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8008ce6:	f7ff ff60 	bl	8008baa <inHandlerMode>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01c      	beq.n	8008d2a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	f107 0208 	add.w	r2, r7, #8
 8008cf6:	f107 030c 	add.w	r3, r7, #12
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	2201      	movs	r2, #1
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 fb23 	bl	800b34c <xTaskGenericNotifyFromISR>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d002      	beq.n	8008d12 <osSignalSet+0x3e>
      return 0x80000000;
 8008d0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d10:	e019      	b.n	8008d46 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d015      	beq.n	8008d44 <osSignalSet+0x70>
 8008d18:	4b0d      	ldr	r3, [pc, #52]	; (8008d50 <osSignalSet+0x7c>)
 8008d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	e00c      	b.n	8008d44 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	f107 0308 	add.w	r3, r7, #8
 8008d30:	2201      	movs	r2, #1
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f002 fa54 	bl	800b1e0 <xTaskGenericNotify>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d002      	beq.n	8008d44 <osSignalSet+0x70>
    return 0x80000000;
 8008d3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d42:	e000      	b.n	8008d46 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008d44:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b089      	sub	sp, #36	; 0x24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d103      	bne.n	8008d78 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	e009      	b.n	8008d8c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d006      	beq.n	8008d8c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <osSignalWait+0x38>
      ticks = 1;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8008d8c:	f7ff ff0d 	bl	8008baa <inHandlerMode>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008d96:	2382      	movs	r3, #130	; 0x82
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	e01b      	b.n	8008dd4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	f107 0310 	add.w	r3, r7, #16
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2000      	movs	r0, #0
 8008da8:	f002 f9c0 	bl	800b12c <xTaskNotifyWait>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d008      	beq.n	8008dc4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <osSignalWait+0x6a>
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	e00a      	b.n	8008dd4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	e007      	b.n	8008dd4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da02      	bge.n	8008dd0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8008dca:	2386      	movs	r3, #134	; 0x86
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	e001      	b.n	8008dd4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	461c      	mov	r4, r3
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008de0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	3724      	adds	r7, #36	; 0x24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd90      	pop	{r4, r7, pc}

08008dec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4619      	mov	r1, r3
 8008e02:	2001      	movs	r0, #1
 8008e04:	f000 fb89 	bl	800951a <xQueueCreateMutexStatic>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	e003      	b.n	8008e14 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	f000 fb6c 	bl	80094ea <xQueueCreateMutex>
 8008e12:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008e26:	2300      	movs	r3, #0
 8008e28:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <osMutexWait+0x18>
    return osErrorParameter;
 8008e30:	2380      	movs	r3, #128	; 0x80
 8008e32:	e03a      	b.n	8008eaa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3e:	d103      	bne.n	8008e48 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e009      	b.n	8008e5c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d006      	beq.n	8008e5c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <osMutexWait+0x40>
      ticks = 1;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008e5c:	f7ff fea5 	bl	8008baa <inHandlerMode>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d017      	beq.n	8008e96 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 ff80 	bl	8009d74 <xQueueReceiveFromISR>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d001      	beq.n	8008e7e <osMutexWait+0x62>
      return osErrorOS;
 8008e7a:	23ff      	movs	r3, #255	; 0xff
 8008e7c:	e015      	b.n	8008eaa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d011      	beq.n	8008ea8 <osMutexWait+0x8c>
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <osMutexWait+0x98>)
 8008e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	e008      	b.n	8008ea8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008e96:	68f9      	ldr	r1, [r7, #12]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fe5f 	bl	8009b5c <xQueueSemaphoreTake>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <osMutexWait+0x8c>
    return osErrorOS;
 8008ea4:	23ff      	movs	r3, #255	; 0xff
 8008ea6:	e000      	b.n	8008eaa <osMutexWait+0x8e>
  }
  
  return osOK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008ec8:	f7ff fe6f 	bl	8008baa <inHandlerMode>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d016      	beq.n	8008f00 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fcd2 	bl	8009882 <xQueueGiveFromISR>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d001      	beq.n	8008ee8 <osMutexRelease+0x30>
      return osErrorOS;
 8008ee4:	23ff      	movs	r3, #255	; 0xff
 8008ee6:	e017      	b.n	8008f18 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d013      	beq.n	8008f16 <osMutexRelease+0x5e>
 8008eee:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <osMutexRelease+0x68>)
 8008ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	e00a      	b.n	8008f16 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fb22 	bl	8009550 <xQueueGenericSend>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d001      	beq.n	8008f16 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008f12:	23ff      	movs	r3, #255	; 0xff
 8008f14:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008f16:	68fb      	ldr	r3, [r7, #12]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008f24:	b590      	push	{r4, r7, lr}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d011      	beq.n	8008f5a <osMessageCreate+0x36>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00d      	beq.n	8008f5a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6859      	ldr	r1, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	2400      	movs	r4, #0
 8008f50:	9400      	str	r4, [sp, #0]
 8008f52:	f000 f9df 	bl	8009314 <xQueueGenericCreateStatic>
 8008f56:	4603      	mov	r3, r0
 8008f58:	e008      	b.n	8008f6c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	4619      	mov	r1, r3
 8008f66:	f000 fa4d 	bl	8009404 <xQueueGenericCreate>
 8008f6a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd90      	pop	{r4, r7, pc}

08008f74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <osMessagePut+0x1e>
    ticks = 1;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008f92:	f7ff fe0a 	bl	8008baa <inHandlerMode>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d018      	beq.n	8008fce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008f9c:	f107 0210 	add.w	r2, r7, #16
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 fbd0 	bl	800974c <xQueueGenericSendFromISR>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d001      	beq.n	8008fb6 <osMessagePut+0x42>
      return osErrorOS;
 8008fb2:	23ff      	movs	r3, #255	; 0xff
 8008fb4:	e018      	b.n	8008fe8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d014      	beq.n	8008fe6 <osMessagePut+0x72>
 8008fbc:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <osMessagePut+0x7c>)
 8008fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	e00b      	b.n	8008fe6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008fce:	f107 0108 	add.w	r1, r7, #8
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 faba 	bl	8009550 <xQueueGenericSend>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d001      	beq.n	8008fe6 <osMessagePut+0x72>
      return osErrorOS;
 8008fe2:	23ff      	movs	r3, #255	; 0xff
 8008fe4:	e000      	b.n	8008fe8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b08b      	sub	sp, #44	; 0x2c
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10a      	bne.n	8009024 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800900e:	2380      	movs	r3, #128	; 0x80
 8009010:	617b      	str	r3, [r7, #20]
    return event;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	461c      	mov	r4, r3
 8009016:	f107 0314 	add.w	r3, r7, #20
 800901a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800901e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009022:	e054      	b.n	80090ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d103      	bne.n	800903c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009034:	f04f 33ff 	mov.w	r3, #4294967295
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
 800903a:	e009      	b.n	8009050 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d006      	beq.n	8009050 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <osMessageGet+0x5c>
      ticks = 1;
 800904c:	2301      	movs	r3, #1
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009050:	f7ff fdab 	bl	8008baa <inHandlerMode>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d01c      	beq.n	8009094 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800905a:	f107 0220 	add.w	r2, r7, #32
 800905e:	f107 0314 	add.w	r3, r7, #20
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	68b8      	ldr	r0, [r7, #8]
 8009068:	f000 fe84 	bl	8009d74 <xQueueReceiveFromISR>
 800906c:	4603      	mov	r3, r0
 800906e:	2b01      	cmp	r3, #1
 8009070:	d102      	bne.n	8009078 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009072:	2310      	movs	r3, #16
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e001      	b.n	800907c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01d      	beq.n	80090be <osMessageGet+0xca>
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <osMessageGet+0xe4>)
 8009084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	e014      	b.n	80090be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009094:	f107 0314 	add.w	r3, r7, #20
 8009098:	3304      	adds	r3, #4
 800909a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909c:	4619      	mov	r1, r3
 800909e:	68b8      	ldr	r0, [r7, #8]
 80090a0:	f000 fc7c 	bl	800999c <xQueueReceive>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d102      	bne.n	80090b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80090aa:	2310      	movs	r3, #16
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e006      	b.n	80090be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <osMessageGet+0xc6>
 80090b6:	2300      	movs	r3, #0
 80090b8:	e000      	b.n	80090bc <osMessageGet+0xc8>
 80090ba:	2340      	movs	r3, #64	; 0x40
 80090bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	461c      	mov	r4, r3
 80090c2:	f107 0314 	add.w	r3, r7, #20
 80090c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	372c      	adds	r7, #44	; 0x2c
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd90      	pop	{r4, r7, pc}
 80090d6:	bf00      	nop
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f103 0208 	add.w	r2, r3, #8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f103 0208 	add.w	r2, r3, #8
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 0208 	add.w	r2, r3, #8
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
}
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d103      	bne.n	800919e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e00c      	b.n	80091b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3308      	adds	r3, #8
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e002      	b.n	80091ac <vListInsert+0x2e>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d2f6      	bcs.n	80091a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	601a      	str	r2, [r3, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6892      	ldr	r2, [r2, #8]
 8009206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6852      	ldr	r2, [r2, #4]
 8009210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d103      	bne.n	8009224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	1e5a      	subs	r2, r3, #1
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800926e:	f002 fe09 	bl	800be84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	441a      	add	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929e:	3b01      	subs	r3, #1
 80092a0:	68f9      	ldr	r1, [r7, #12]
 80092a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	441a      	add	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	22ff      	movs	r2, #255	; 0xff
 80092b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	22ff      	movs	r2, #255	; 0xff
 80092ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d114      	bne.n	80092ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01a      	beq.n	8009302 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3310      	adds	r3, #16
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 fbb3 	bl	800aa3c <xTaskRemoveFromEventList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d012      	beq.n	8009302 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092dc:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <xQueueGenericReset+0xcc>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	e009      	b.n	8009302 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3310      	adds	r3, #16
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fef2 	bl	80090dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3324      	adds	r3, #36	; 0x24
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7ff feed 	bl	80090dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009302:	f002 fdef 	bl	800bee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009306:	2301      	movs	r3, #1
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08e      	sub	sp, #56	; 0x38
 8009318:	af02      	add	r7, sp, #8
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <xQueueGenericCreateStatic+0x52>
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <xQueueGenericCreateStatic+0x56>
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <xQueueGenericCreateStatic+0x58>
 800936a:	2300      	movs	r3, #0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	623b      	str	r3, [r7, #32]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <xQueueGenericCreateStatic+0x7e>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <xQueueGenericCreateStatic+0x82>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <xQueueGenericCreateStatic+0x84>
 8009396:	2300      	movs	r3, #0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	61fb      	str	r3, [r7, #28]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093b2:	2348      	movs	r3, #72	; 0x48
 80093b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b48      	cmp	r3, #72	; 0x48
 80093ba:	d00a      	beq.n	80093d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	61bb      	str	r3, [r7, #24]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00d      	beq.n	80093fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	4613      	mov	r3, r2
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f83f 	bl	8009478 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3730      	adds	r7, #48	; 0x30
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08a      	sub	sp, #40	; 0x28
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	613b      	str	r3, [r7, #16]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	fb02 f303 	mul.w	r3, r2, r3
 8009436:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	3348      	adds	r3, #72	; 0x48
 800943c:	4618      	mov	r0, r3
 800943e:	f002 fe43 	bl	800c0c8 <pvPortMalloc>
 8009442:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d011      	beq.n	800946e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	3348      	adds	r3, #72	; 0x48
 8009452:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800945c:	79fa      	ldrb	r2, [r7, #7]
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	4613      	mov	r3, r2
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f805 	bl	8009478 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800946e:	69bb      	ldr	r3, [r7, #24]
	}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e002      	b.n	800949a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094a6:	2101      	movs	r1, #1
 80094a8:	69b8      	ldr	r0, [r7, #24]
 80094aa:	f7ff fecb 	bl	8009244 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00e      	beq.n	80094e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80094d6:	2300      	movs	r3, #0
 80094d8:	2200      	movs	r2, #0
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f837 	bl	8009550 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80094e2:	bf00      	nop
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	4603      	mov	r3, r0
 80094f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094f4:	2301      	movs	r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	2300      	movs	r3, #0
 80094fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	461a      	mov	r2, r3
 8009500:	6939      	ldr	r1, [r7, #16]
 8009502:	6978      	ldr	r0, [r7, #20]
 8009504:	f7ff ff7e 	bl	8009404 <xQueueGenericCreate>
 8009508:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff ffd3 	bl	80094b6 <prvInitialiseMutex>

		return xNewQueue;
 8009510:	68fb      	ldr	r3, [r7, #12]
	}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800951a:	b580      	push	{r7, lr}
 800951c:	b088      	sub	sp, #32
 800951e:	af02      	add	r7, sp, #8
 8009520:	4603      	mov	r3, r0
 8009522:	6039      	str	r1, [r7, #0]
 8009524:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009526:	2301      	movs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2200      	movs	r2, #0
 8009536:	6939      	ldr	r1, [r7, #16]
 8009538:	6978      	ldr	r0, [r7, #20]
 800953a:	f7ff feeb 	bl	8009314 <xQueueGenericCreateStatic>
 800953e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff ffb8 	bl	80094b6 <prvInitialiseMutex>

		return xNewQueue;
 8009546:	68fb      	ldr	r3, [r7, #12]
	}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08e      	sub	sp, #56	; 0x38
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800955e:	2300      	movs	r3, #0
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10a      	bne.n	8009582 <xQueueGenericSend+0x32>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <xQueueGenericSend+0x40>
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <xQueueGenericSend+0x44>
 8009590:	2301      	movs	r3, #1
 8009592:	e000      	b.n	8009596 <xQueueGenericSend+0x46>
 8009594:	2300      	movs	r3, #0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10a      	bne.n	80095b0 <xQueueGenericSend+0x60>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d103      	bne.n	80095be <xQueueGenericSend+0x6e>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <xQueueGenericSend+0x72>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <xQueueGenericSend+0x74>
 80095c2:	2300      	movs	r3, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xQueueGenericSend+0x8e>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	623b      	str	r3, [r7, #32]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095de:	f001 fbe9 	bl	800adb4 <xTaskGetSchedulerState>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <xQueueGenericSend+0x9e>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <xQueueGenericSend+0xa2>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <xQueueGenericSend+0xa4>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <xQueueGenericSend+0xbe>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	61fb      	str	r3, [r7, #28]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800960e:	f002 fc39 	bl	800be84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961a:	429a      	cmp	r2, r3
 800961c:	d302      	bcc.n	8009624 <xQueueGenericSend+0xd4>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d129      	bne.n	8009678 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800962a:	f000 fc3b 	bl	8009ea4 <prvCopyDataToQueue>
 800962e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	d010      	beq.n	800965a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	3324      	adds	r3, #36	; 0x24
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f9fd 	bl	800aa3c <xTaskRemoveFromEventList>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d013      	beq.n	8009670 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009648:	4b3f      	ldr	r3, [pc, #252]	; (8009748 <xQueueGenericSend+0x1f8>)
 800964a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	e00a      	b.n	8009670 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	2b00      	cmp	r3, #0
 800965e:	d007      	beq.n	8009670 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009660:	4b39      	ldr	r3, [pc, #228]	; (8009748 <xQueueGenericSend+0x1f8>)
 8009662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009670:	f002 fc38 	bl	800bee4 <vPortExitCritical>
				return pdPASS;
 8009674:	2301      	movs	r3, #1
 8009676:	e063      	b.n	8009740 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d103      	bne.n	8009686 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800967e:	f002 fc31 	bl	800bee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009682:	2300      	movs	r3, #0
 8009684:	e05c      	b.n	8009740 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009688:	2b00      	cmp	r3, #0
 800968a:	d106      	bne.n	800969a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800968c:	f107 0314 	add.w	r3, r7, #20
 8009690:	4618      	mov	r0, r3
 8009692:	f001 fa35 	bl	800ab00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009696:	2301      	movs	r3, #1
 8009698:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800969a:	f002 fc23 	bl	800bee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800969e:	f000 ff9d 	bl	800a5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096a2:	f002 fbef 	bl	800be84 <vPortEnterCritical>
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ac:	b25b      	sxtb	r3, r3
 80096ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b2:	d103      	bne.n	80096bc <xQueueGenericSend+0x16c>
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c2:	b25b      	sxtb	r3, r3
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSend+0x182>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096d2:	f002 fc07 	bl	800bee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096d6:	1d3a      	adds	r2, r7, #4
 80096d8:	f107 0314 	add.w	r3, r7, #20
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 fa24 	bl	800ab2c <xTaskCheckForTimeOut>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d124      	bne.n	8009734 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ec:	f000 fcd2 	bl	800a094 <prvIsQueueFull>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d018      	beq.n	8009728 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	3310      	adds	r3, #16
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f001 f94c 	bl	800a99c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009706:	f000 fc5d 	bl	8009fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800970a:	f000 ff75 	bl	800a5f8 <xTaskResumeAll>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	f47f af7c 	bne.w	800960e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009716:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <xQueueGenericSend+0x1f8>)
 8009718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	e772      	b.n	800960e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800972a:	f000 fc4b 	bl	8009fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800972e:	f000 ff63 	bl	800a5f8 <xTaskResumeAll>
 8009732:	e76c      	b.n	800960e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009736:	f000 fc45 	bl	8009fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800973a:	f000 ff5d 	bl	800a5f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800973e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009740:	4618      	mov	r0, r3
 8009742:	3738      	adds	r7, #56	; 0x38
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b090      	sub	sp, #64	; 0x40
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d103      	bne.n	8009788 <xQueueGenericSendFromISR+0x3c>
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <xQueueGenericSendFromISR+0x40>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <xQueueGenericSendFromISR+0x42>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d103      	bne.n	80097b6 <xQueueGenericSendFromISR+0x6a>
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d101      	bne.n	80097ba <xQueueGenericSendFromISR+0x6e>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e000      	b.n	80097bc <xQueueGenericSendFromISR+0x70>
 80097ba:	2300      	movs	r3, #0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10a      	bne.n	80097d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	623b      	str	r3, [r7, #32]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097d6:	f002 fc37 	bl	800c048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097da:	f3ef 8211 	mrs	r2, BASEPRI
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	61fa      	str	r2, [r7, #28]
 80097f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fe:	429a      	cmp	r2, r3
 8009800:	d302      	bcc.n	8009808 <xQueueGenericSendFromISR+0xbc>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d12f      	bne.n	8009868 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800981e:	f000 fb41 	bl	8009ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009822:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982a:	d112      	bne.n	8009852 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	2b00      	cmp	r3, #0
 8009832:	d016      	beq.n	8009862 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	3324      	adds	r3, #36	; 0x24
 8009838:	4618      	mov	r0, r3
 800983a:	f001 f8ff 	bl	800aa3c <xTaskRemoveFromEventList>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00e      	beq.n	8009862 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	e007      	b.n	8009862 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009856:	3301      	adds	r3, #1
 8009858:	b2db      	uxtb	r3, r3
 800985a:	b25a      	sxtb	r2, r3
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009862:	2301      	movs	r3, #1
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009866:	e001      	b.n	800986c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009868:	2300      	movs	r3, #0
 800986a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009876:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800987a:	4618      	mov	r0, r3
 800987c:	3740      	adds	r7, #64	; 0x40
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b08e      	sub	sp, #56	; 0x38
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	623b      	str	r3, [r7, #32]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00a      	beq.n	80098ca <xQueueGiveFromISR+0x48>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	61fb      	str	r3, [r7, #28]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d103      	bne.n	80098da <xQueueGiveFromISR+0x58>
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <xQueueGiveFromISR+0x5c>
 80098da:	2301      	movs	r3, #1
 80098dc:	e000      	b.n	80098e0 <xQueueGiveFromISR+0x5e>
 80098de:	2300      	movs	r3, #0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <xQueueGiveFromISR+0x78>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	61bb      	str	r3, [r7, #24]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098fa:	f002 fba5 	bl	800c048 <vPortValidateInterruptPriority>
	__asm volatile
 80098fe:	f3ef 8211 	mrs	r2, BASEPRI
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	617a      	str	r2, [r7, #20]
 8009914:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009916:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009926:	429a      	cmp	r2, r3
 8009928:	d22b      	bcs.n	8009982 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800993c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d112      	bne.n	800996c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	d016      	beq.n	800997c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	3324      	adds	r3, #36	; 0x24
 8009952:	4618      	mov	r0, r3
 8009954:	f001 f872 	bl	800aa3c <xTaskRemoveFromEventList>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00e      	beq.n	800997c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2201      	movs	r2, #1
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	e007      	b.n	800997c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009970:	3301      	adds	r3, #1
 8009972:	b2db      	uxtb	r3, r3
 8009974:	b25a      	sxtb	r2, r3
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800997c:	2301      	movs	r3, #1
 800997e:	637b      	str	r3, [r7, #52]	; 0x34
 8009980:	e001      	b.n	8009986 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009982:	2300      	movs	r3, #0
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f383 8811 	msr	BASEPRI, r3
}
 8009990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009994:	4618      	mov	r0, r3
 8009996:	3738      	adds	r7, #56	; 0x38
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	; 0x30
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10a      	bne.n	80099cc <xQueueReceive+0x30>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	623b      	str	r3, [r7, #32]
}
 80099c8:	bf00      	nop
 80099ca:	e7fe      	b.n	80099ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d103      	bne.n	80099da <xQueueReceive+0x3e>
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <xQueueReceive+0x42>
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <xQueueReceive+0x44>
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <xQueueReceive+0x5e>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	61fb      	str	r3, [r7, #28]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099fa:	f001 f9db 	bl	800adb4 <xTaskGetSchedulerState>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <xQueueReceive+0x6e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <xQueueReceive+0x72>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <xQueueReceive+0x74>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xQueueReceive+0x8e>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	61bb      	str	r3, [r7, #24]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a2a:	f002 fa2b 	bl	800be84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d01f      	beq.n	8009a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3e:	f000 fa9b 	bl	8009f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00f      	beq.n	8009a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	3310      	adds	r3, #16
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fff0 	bl	800aa3c <xTaskRemoveFromEventList>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a62:	4b3d      	ldr	r3, [pc, #244]	; (8009b58 <xQueueReceive+0x1bc>)
 8009a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a72:	f002 fa37 	bl	800bee4 <vPortExitCritical>
				return pdPASS;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e069      	b.n	8009b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a80:	f002 fa30 	bl	800bee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a84:	2300      	movs	r3, #0
 8009a86:	e062      	b.n	8009b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d106      	bne.n	8009a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8e:	f107 0310 	add.w	r3, r7, #16
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 f834 	bl	800ab00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a9c:	f002 fa22 	bl	800bee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009aa0:	f000 fd9c 	bl	800a5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa4:	f002 f9ee 	bl	800be84 <vPortEnterCritical>
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aae:	b25b      	sxtb	r3, r3
 8009ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab4:	d103      	bne.n	8009abe <xQueueReceive+0x122>
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac4:	b25b      	sxtb	r3, r3
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d103      	bne.n	8009ad4 <xQueueReceive+0x138>
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad4:	f002 fa06 	bl	800bee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad8:	1d3a      	adds	r2, r7, #4
 8009ada:	f107 0310 	add.w	r3, r7, #16
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f001 f823 	bl	800ab2c <xTaskCheckForTimeOut>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d123      	bne.n	8009b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aee:	f000 fabb 	bl	800a068 <prvIsQueueEmpty>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d017      	beq.n	8009b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	3324      	adds	r3, #36	; 0x24
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 ff4b 	bl	800a99c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b08:	f000 fa5c 	bl	8009fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b0c:	f000 fd74 	bl	800a5f8 <xTaskResumeAll>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d189      	bne.n	8009a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b16:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <xQueueReceive+0x1bc>)
 8009b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	e780      	b.n	8009a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b2a:	f000 fa4b 	bl	8009fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b2e:	f000 fd63 	bl	800a5f8 <xTaskResumeAll>
 8009b32:	e77a      	b.n	8009a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b36:	f000 fa45 	bl	8009fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b3a:	f000 fd5d 	bl	800a5f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b40:	f000 fa92 	bl	800a068 <prvIsQueueEmpty>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f43f af6f 	beq.w	8009a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3730      	adds	r7, #48	; 0x30
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08e      	sub	sp, #56	; 0x38
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	623b      	str	r3, [r7, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	61fb      	str	r3, [r7, #28]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bac:	f001 f902 	bl	800adb4 <xTaskGetSchedulerState>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <xQueueSemaphoreTake+0x60>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <xQueueSemaphoreTake+0x64>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e000      	b.n	8009bc2 <xQueueSemaphoreTake+0x66>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10a      	bne.n	8009bdc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	61bb      	str	r3, [r7, #24]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bdc:	f002 f952 	bl	800be84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d024      	beq.n	8009c36 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	1e5a      	subs	r2, r3, #1
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009bfc:	f001 fa82 	bl	800b104 <pvTaskIncrementMutexHeldCount>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00f      	beq.n	8009c2e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	3310      	adds	r3, #16
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 ff12 	bl	800aa3c <xTaskRemoveFromEventList>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c1e:	4b54      	ldr	r3, [pc, #336]	; (8009d70 <xQueueSemaphoreTake+0x214>)
 8009c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c2e:	f002 f959 	bl	800bee4 <vPortExitCritical>
				return pdPASS;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e097      	b.n	8009d66 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d111      	bne.n	8009c60 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	617b      	str	r3, [r7, #20]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c58:	f002 f944 	bl	800bee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e082      	b.n	8009d66 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c66:	f107 030c 	add.w	r3, r7, #12
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 ff48 	bl	800ab00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c74:	f002 f936 	bl	800bee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c78:	f000 fcb0 	bl	800a5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c7c:	f002 f902 	bl	800be84 <vPortEnterCritical>
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d103      	bne.n	8009c96 <xQueueSemaphoreTake+0x13a>
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d103      	bne.n	8009cac <xQueueSemaphoreTake+0x150>
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cac:	f002 f91a 	bl	800bee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cb0:	463a      	mov	r2, r7
 8009cb2:	f107 030c 	add.w	r3, r7, #12
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 ff37 	bl	800ab2c <xTaskCheckForTimeOut>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d132      	bne.n	8009d2a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cc6:	f000 f9cf 	bl	800a068 <prvIsQueueEmpty>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d026      	beq.n	8009d1e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009cd8:	f002 f8d4 	bl	800be84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 f885 	bl	800adf0 <xTaskPriorityInherit>
 8009ce6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ce8:	f002 f8fc 	bl	800bee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	3324      	adds	r3, #36	; 0x24
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 fe51 	bl	800a99c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cfc:	f000 f962 	bl	8009fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d00:	f000 fc7a 	bl	800a5f8 <xTaskResumeAll>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f47f af68 	bne.w	8009bdc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d0c:	4b18      	ldr	r3, [pc, #96]	; (8009d70 <xQueueSemaphoreTake+0x214>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	e75e      	b.n	8009bdc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d20:	f000 f950 	bl	8009fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d24:	f000 fc68 	bl	800a5f8 <xTaskResumeAll>
 8009d28:	e758      	b.n	8009bdc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d2c:	f000 f94a 	bl	8009fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d30:	f000 fc62 	bl	800a5f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d36:	f000 f997 	bl	800a068 <prvIsQueueEmpty>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f43f af4d 	beq.w	8009bdc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00d      	beq.n	8009d64 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009d48:	f002 f89c 	bl	800be84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d4e:	f000 f891 	bl	8009e74 <prvGetDisinheritPriorityAfterTimeout>
 8009d52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f944 	bl	800afe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d60:	f002 f8c0 	bl	800bee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3738      	adds	r7, #56	; 0x38
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08e      	sub	sp, #56	; 0x38
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	623b      	str	r3, [r7, #32]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <xQueueReceiveFromISR+0x3a>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <xQueueReceiveFromISR+0x3e>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueReceiveFromISR+0x40>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	61fb      	str	r3, [r7, #28]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dce:	f002 f93b 	bl	800c048 <vPortValidateInterruptPriority>
	__asm volatile
 8009dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	61ba      	str	r2, [r7, #24]
 8009de8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d02f      	beq.n	8009e5a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e08:	f000 f8b6 	bl	8009f78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	1e5a      	subs	r2, r3, #1
 8009e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d112      	bne.n	8009e44 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d016      	beq.n	8009e54 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	3310      	adds	r3, #16
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 fe06 	bl	800aa3c <xTaskRemoveFromEventList>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00e      	beq.n	8009e54 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e007      	b.n	8009e54 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e48:	3301      	adds	r3, #1
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	b25a      	sxtb	r2, r3
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e54:	2301      	movs	r3, #1
 8009e56:	637b      	str	r3, [r7, #52]	; 0x34
 8009e58:	e001      	b.n	8009e5e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f383 8811 	msr	BASEPRI, r3
}
 8009e68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3738      	adds	r7, #56	; 0x38
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d006      	beq.n	8009e92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f1c3 0307 	rsb	r3, r3, #7
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e001      	b.n	8009e96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e96:	68fb      	ldr	r3, [r7, #12]
	}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10d      	bne.n	8009ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d14d      	bne.n	8009f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 f804 	bl	800aedc <xTaskPriorityDisinherit>
 8009ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	609a      	str	r2, [r3, #8]
 8009edc:	e043      	b.n	8009f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d119      	bne.n	8009f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6858      	ldr	r0, [r3, #4]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eec:	461a      	mov	r2, r3
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	f002 fe99 	bl	800cc26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d32b      	bcc.n	8009f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	605a      	str	r2, [r3, #4]
 8009f16:	e026      	b.n	8009f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68d8      	ldr	r0, [r3, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f20:	461a      	mov	r2, r3
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	f002 fe7f 	bl	800cc26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	425b      	negs	r3, r3
 8009f32:	441a      	add	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d207      	bcs.n	8009f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	425b      	negs	r3, r3
 8009f4e:	441a      	add	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d105      	bne.n	8009f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f6e:	697b      	ldr	r3, [r7, #20]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d018      	beq.n	8009fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	441a      	add	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d303      	bcc.n	8009fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68d9      	ldr	r1, [r3, #12]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6838      	ldr	r0, [r7, #0]
 8009fb8:	f002 fe35 	bl	800cc26 <memcpy>
	}
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fcc:	f001 ff5a 	bl	800be84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fd8:	e011      	b.n	8009ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d012      	beq.n	800a008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3324      	adds	r3, #36	; 0x24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fd28 	bl	800aa3c <xTaskRemoveFromEventList>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ff2:	f000 fdfd 	bl	800abf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dce9      	bgt.n	8009fda <prvUnlockQueue+0x16>
 800a006:	e000      	b.n	800a00a <prvUnlockQueue+0x46>
					break;
 800a008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	22ff      	movs	r2, #255	; 0xff
 800a00e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a012:	f001 ff67 	bl	800bee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a016:	f001 ff35 	bl	800be84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a022:	e011      	b.n	800a048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d012      	beq.n	800a052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3310      	adds	r3, #16
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fd03 	bl	800aa3c <xTaskRemoveFromEventList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a03c:	f000 fdd8 	bl	800abf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	3b01      	subs	r3, #1
 800a044:	b2db      	uxtb	r3, r3
 800a046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dce9      	bgt.n	800a024 <prvUnlockQueue+0x60>
 800a050:	e000      	b.n	800a054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	22ff      	movs	r2, #255	; 0xff
 800a058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a05c:	f001 ff42 	bl	800bee4 <vPortExitCritical>
}
 800a060:	bf00      	nop
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a070:	f001 ff08 	bl	800be84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d102      	bne.n	800a082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e001      	b.n	800a086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a086:	f001 ff2d 	bl	800bee4 <vPortExitCritical>

	return xReturn;
 800a08a:	68fb      	ldr	r3, [r7, #12]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a09c:	f001 fef2 	bl	800be84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d102      	bne.n	800a0b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	e001      	b.n	800a0b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0b6:	f001 ff15 	bl	800bee4 <vPortExitCritical>

	return xReturn;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	e014      	b.n	800a0fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0d4:	4a0f      	ldr	r2, [pc, #60]	; (800a114 <vQueueAddToRegistry+0x50>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10b      	bne.n	800a0f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0e0:	490c      	ldr	r1, [pc, #48]	; (800a114 <vQueueAddToRegistry+0x50>)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0ea:	4a0a      	ldr	r2, [pc, #40]	; (800a114 <vQueueAddToRegistry+0x50>)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0f6:	e006      	b.n	800a106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b07      	cmp	r3, #7
 800a102:	d9e7      	bls.n	800a0d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20001178 	.word	0x20001178

0800a118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a128:	f001 feac 	bl	800be84 <vPortEnterCritical>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a132:	b25b      	sxtb	r3, r3
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d103      	bne.n	800a142 <vQueueWaitForMessageRestricted+0x2a>
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d103      	bne.n	800a158 <vQueueWaitForMessageRestricted+0x40>
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a158:	f001 fec4 	bl	800bee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	3324      	adds	r3, #36	; 0x24
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	68b9      	ldr	r1, [r7, #8]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fc39 	bl	800a9e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a172:	6978      	ldr	r0, [r7, #20]
 800a174:	f7ff ff26 	bl	8009fc4 <prvUnlockQueue>
	}
 800a178:	bf00      	nop
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08e      	sub	sp, #56	; 0x38
 800a184:	af04      	add	r7, sp, #16
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	623b      	str	r3, [r7, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	61fb      	str	r3, [r7, #28]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1c6:	2354      	movs	r3, #84	; 0x54
 800a1c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b54      	cmp	r3, #84	; 0x54
 800a1ce:	d00a      	beq.n	800a1e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	61bb      	str	r3, [r7, #24]
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01e      	beq.n	800a22c <xTaskCreateStatic+0xac>
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01b      	beq.n	800a22c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	2202      	movs	r2, #2
 800a202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a206:	2300      	movs	r3, #0
 800a208:	9303      	str	r3, [sp, #12]
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	9302      	str	r3, [sp, #8]
 800a20e:	f107 0314 	add.w	r3, r7, #20
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 f850 	bl	800a2c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a226:	f000 f8d5 	bl	800a3d4 <prvAddNewTaskToReadyList>
 800a22a:	e001      	b.n	800a230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a230:	697b      	ldr	r3, [r7, #20]
	}
 800a232:	4618      	mov	r0, r3
 800a234:	3728      	adds	r7, #40	; 0x28
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b08c      	sub	sp, #48	; 0x30
 800a23e:	af04      	add	r7, sp, #16
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	60b9      	str	r1, [r7, #8]
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	4613      	mov	r3, r2
 800a248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 ff3a 	bl	800c0c8 <pvPortMalloc>
 800a254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00e      	beq.n	800a27a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a25c:	2054      	movs	r0, #84	; 0x54
 800a25e:	f001 ff33 	bl	800c0c8 <pvPortMalloc>
 800a262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
 800a270:	e005      	b.n	800a27e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f001 fff4 	bl	800c260 <vPortFree>
 800a278:	e001      	b.n	800a27e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d017      	beq.n	800a2b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a28c:	88fa      	ldrh	r2, [r7, #6]
 800a28e:	2300      	movs	r3, #0
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	9302      	str	r3, [sp, #8]
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	9301      	str	r3, [sp, #4]
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f80e 	bl	800a2c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2a8:	69f8      	ldr	r0, [r7, #28]
 800a2aa:	f000 f893 	bl	800a3d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	e002      	b.n	800a2ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3720      	adds	r7, #32
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <prvInitialiseNewTask+0x48>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	617b      	str	r3, [r7, #20]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d01f      	beq.n	800a352 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a312:	2300      	movs	r3, #0
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	e012      	b.n	800a33e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	7819      	ldrb	r1, [r3, #0]
 800a320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	4413      	add	r3, r2
 800a326:	3334      	adds	r3, #52	; 0x34
 800a328:	460a      	mov	r2, r1
 800a32a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d006      	beq.n	800a346 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	3301      	adds	r3, #1
 800a33c:	61fb      	str	r3, [r7, #28]
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	2b0f      	cmp	r3, #15
 800a342:	d9e9      	bls.n	800a318 <prvInitialiseNewTask+0x54>
 800a344:	e000      	b.n	800a348 <prvInitialiseNewTask+0x84>
			{
				break;
 800a346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a350:	e003      	b.n	800a35a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	2b06      	cmp	r3, #6
 800a35e:	d901      	bls.n	800a364 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a360:	2306      	movs	r3, #6
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a36e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	2200      	movs	r2, #0
 800a374:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	3304      	adds	r3, #4
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe fece 	bl	800911c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	3318      	adds	r3, #24
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fec9 	bl	800911c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	f1c3 0207 	rsb	r2, r3, #7
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	68f9      	ldr	r1, [r7, #12]
 800a3b2:	69b8      	ldr	r0, [r7, #24]
 800a3b4:	f001 fc3c 	bl	800bc30 <pxPortInitialiseStack>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3ca:	bf00      	nop
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3dc:	f001 fd52 	bl	800be84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3e0:	4b2a      	ldr	r3, [pc, #168]	; (800a48c <prvAddNewTaskToReadyList+0xb8>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	4a29      	ldr	r2, [pc, #164]	; (800a48c <prvAddNewTaskToReadyList+0xb8>)
 800a3e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3ea:	4b29      	ldr	r3, [pc, #164]	; (800a490 <prvAddNewTaskToReadyList+0xbc>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d109      	bne.n	800a406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3f2:	4a27      	ldr	r2, [pc, #156]	; (800a490 <prvAddNewTaskToReadyList+0xbc>)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3f8:	4b24      	ldr	r3, [pc, #144]	; (800a48c <prvAddNewTaskToReadyList+0xb8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d110      	bne.n	800a422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a400:	f000 fc1a 	bl	800ac38 <prvInitialiseTaskLists>
 800a404:	e00d      	b.n	800a422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a406:	4b23      	ldr	r3, [pc, #140]	; (800a494 <prvAddNewTaskToReadyList+0xc0>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d109      	bne.n	800a422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a40e:	4b20      	ldr	r3, [pc, #128]	; (800a490 <prvAddNewTaskToReadyList+0xbc>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	429a      	cmp	r2, r3
 800a41a:	d802      	bhi.n	800a422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a41c:	4a1c      	ldr	r2, [pc, #112]	; (800a490 <prvAddNewTaskToReadyList+0xbc>)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a422:	4b1d      	ldr	r3, [pc, #116]	; (800a498 <prvAddNewTaskToReadyList+0xc4>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3301      	adds	r3, #1
 800a428:	4a1b      	ldr	r2, [pc, #108]	; (800a498 <prvAddNewTaskToReadyList+0xc4>)
 800a42a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a430:	2201      	movs	r2, #1
 800a432:	409a      	lsls	r2, r3
 800a434:	4b19      	ldr	r3, [pc, #100]	; (800a49c <prvAddNewTaskToReadyList+0xc8>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4313      	orrs	r3, r2
 800a43a:	4a18      	ldr	r2, [pc, #96]	; (800a49c <prvAddNewTaskToReadyList+0xc8>)
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a442:	4613      	mov	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4a15      	ldr	r2, [pc, #84]	; (800a4a0 <prvAddNewTaskToReadyList+0xcc>)
 800a44c:	441a      	add	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3304      	adds	r3, #4
 800a452:	4619      	mov	r1, r3
 800a454:	4610      	mov	r0, r2
 800a456:	f7fe fe6e 	bl	8009136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a45a:	f001 fd43 	bl	800bee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a45e:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <prvAddNewTaskToReadyList+0xc0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a466:	4b0a      	ldr	r3, [pc, #40]	; (800a490 <prvAddNewTaskToReadyList+0xbc>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	429a      	cmp	r2, r3
 800a472:	d207      	bcs.n	800a484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <prvAddNewTaskToReadyList+0xd0>)
 800a476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	200012b8 	.word	0x200012b8
 800a490:	200011b8 	.word	0x200011b8
 800a494:	200012c4 	.word	0x200012c4
 800a498:	200012d4 	.word	0x200012d4
 800a49c:	200012c0 	.word	0x200012c0
 800a4a0:	200011bc 	.word	0x200011bc
 800a4a4:	e000ed04 	.word	0xe000ed04

0800a4a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d017      	beq.n	800a4ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4ba:	4b13      	ldr	r3, [pc, #76]	; (800a508 <vTaskDelay+0x60>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <vTaskDelay+0x30>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60bb      	str	r3, [r7, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4d8:	f000 f880 	bl	800a5dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 f80e 	bl	800b500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4e4:	f000 f888 	bl	800a5f8 <xTaskResumeAll>
 800a4e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d107      	bne.n	800a500 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <vTaskDelay+0x64>)
 800a4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	200012e0 	.word	0x200012e0
 800a50c:	e000ed04 	.word	0xe000ed04

0800a510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a51e:	463a      	mov	r2, r7
 800a520:	1d39      	adds	r1, r7, #4
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f7f6 fed6 	bl	80012d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	9202      	str	r2, [sp, #8]
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	2300      	movs	r3, #0
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	2300      	movs	r3, #0
 800a53c:	460a      	mov	r2, r1
 800a53e:	4921      	ldr	r1, [pc, #132]	; (800a5c4 <vTaskStartScheduler+0xb4>)
 800a540:	4821      	ldr	r0, [pc, #132]	; (800a5c8 <vTaskStartScheduler+0xb8>)
 800a542:	f7ff fe1d 	bl	800a180 <xTaskCreateStatic>
 800a546:	4603      	mov	r3, r0
 800a548:	4a20      	ldr	r2, [pc, #128]	; (800a5cc <vTaskStartScheduler+0xbc>)
 800a54a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a54c:	4b1f      	ldr	r3, [pc, #124]	; (800a5cc <vTaskStartScheduler+0xbc>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	e001      	b.n	800a55e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d102      	bne.n	800a56a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a564:	f001 f832 	bl	800b5cc <xTimerCreateTimerTask>
 800a568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d116      	bne.n	800a59e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	613b      	str	r3, [r7, #16]
}
 800a582:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a584:	4b12      	ldr	r3, [pc, #72]	; (800a5d0 <vTaskStartScheduler+0xc0>)
 800a586:	f04f 32ff 	mov.w	r2, #4294967295
 800a58a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a58c:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <vTaskStartScheduler+0xc4>)
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a592:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <vTaskStartScheduler+0xc8>)
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a598:	f001 fbd2 	bl	800bd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a59c:	e00e      	b.n	800a5bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a4:	d10a      	bne.n	800a5bc <vTaskStartScheduler+0xac>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60fb      	str	r3, [r7, #12]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vTaskStartScheduler+0xaa>
}
 800a5bc:	bf00      	nop
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	0800d5bc 	.word	0x0800d5bc
 800a5c8:	0800ac09 	.word	0x0800ac09
 800a5cc:	200012dc 	.word	0x200012dc
 800a5d0:	200012d8 	.word	0x200012d8
 800a5d4:	200012c4 	.word	0x200012c4
 800a5d8:	200012bc 	.word	0x200012bc

0800a5dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5e0:	4b04      	ldr	r3, [pc, #16]	; (800a5f4 <vTaskSuspendAll+0x18>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	4a03      	ldr	r2, [pc, #12]	; (800a5f4 <vTaskSuspendAll+0x18>)
 800a5e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5ea:	bf00      	nop
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	200012e0 	.word	0x200012e0

0800a5f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a606:	4b41      	ldr	r3, [pc, #260]	; (800a70c <xTaskResumeAll+0x114>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <xTaskResumeAll+0x2c>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	603b      	str	r3, [r7, #0]
}
 800a620:	bf00      	nop
 800a622:	e7fe      	b.n	800a622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a624:	f001 fc2e 	bl	800be84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a628:	4b38      	ldr	r3, [pc, #224]	; (800a70c <xTaskResumeAll+0x114>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	4a37      	ldr	r2, [pc, #220]	; (800a70c <xTaskResumeAll+0x114>)
 800a630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a632:	4b36      	ldr	r3, [pc, #216]	; (800a70c <xTaskResumeAll+0x114>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d161      	bne.n	800a6fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a63a:	4b35      	ldr	r3, [pc, #212]	; (800a710 <xTaskResumeAll+0x118>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d05d      	beq.n	800a6fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a642:	e02e      	b.n	800a6a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a644:	4b33      	ldr	r3, [pc, #204]	; (800a714 <xTaskResumeAll+0x11c>)
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3318      	adds	r3, #24
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fdcd 	bl	80091f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3304      	adds	r3, #4
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fdc8 	bl	80091f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	2201      	movs	r2, #1
 800a666:	409a      	lsls	r2, r3
 800a668:	4b2b      	ldr	r3, [pc, #172]	; (800a718 <xTaskResumeAll+0x120>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	4a2a      	ldr	r2, [pc, #168]	; (800a718 <xTaskResumeAll+0x120>)
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4a27      	ldr	r2, [pc, #156]	; (800a71c <xTaskResumeAll+0x124>)
 800a680:	441a      	add	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3304      	adds	r3, #4
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7fe fd54 	bl	8009136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a692:	4b23      	ldr	r3, [pc, #140]	; (800a720 <xTaskResumeAll+0x128>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a698:	429a      	cmp	r2, r3
 800a69a:	d302      	bcc.n	800a6a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a69c:	4b21      	ldr	r3, [pc, #132]	; (800a724 <xTaskResumeAll+0x12c>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6a2:	4b1c      	ldr	r3, [pc, #112]	; (800a714 <xTaskResumeAll+0x11c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1cc      	bne.n	800a644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6b0:	f000 fb60 	bl	800ad74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6b4:	4b1c      	ldr	r3, [pc, #112]	; (800a728 <xTaskResumeAll+0x130>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6c0:	f000 f858 	bl	800a774 <xTaskIncrementTick>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a6ca:	4b16      	ldr	r3, [pc, #88]	; (800a724 <xTaskResumeAll+0x12c>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f1      	bne.n	800a6c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a6dc:	4b12      	ldr	r3, [pc, #72]	; (800a728 <xTaskResumeAll+0x130>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6e2:	4b10      	ldr	r3, [pc, #64]	; (800a724 <xTaskResumeAll+0x12c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <xTaskResumeAll+0x134>)
 800a6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6fe:	f001 fbf1 	bl	800bee4 <vPortExitCritical>

	return xAlreadyYielded;
 800a702:	68bb      	ldr	r3, [r7, #8]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	200012e0 	.word	0x200012e0
 800a710:	200012b8 	.word	0x200012b8
 800a714:	20001278 	.word	0x20001278
 800a718:	200012c0 	.word	0x200012c0
 800a71c:	200011bc 	.word	0x200011bc
 800a720:	200011b8 	.word	0x200011b8
 800a724:	200012cc 	.word	0x200012cc
 800a728:	200012c8 	.word	0x200012c8
 800a72c:	e000ed04 	.word	0xe000ed04

0800a730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a736:	4b05      	ldr	r3, [pc, #20]	; (800a74c <xTaskGetTickCount+0x1c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a73c:	687b      	ldr	r3, [r7, #4]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	200012bc 	.word	0x200012bc

0800a750 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a756:	f001 fc77 	bl	800c048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a75a:	2300      	movs	r3, #0
 800a75c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <xTaskGetTickCountFromISR+0x20>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a764:	683b      	ldr	r3, [r7, #0]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	200012bc 	.word	0x200012bc

0800a774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a77e:	4b4e      	ldr	r3, [pc, #312]	; (800a8b8 <xTaskIncrementTick+0x144>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	f040 808e 	bne.w	800a8a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a788:	4b4c      	ldr	r3, [pc, #304]	; (800a8bc <xTaskIncrementTick+0x148>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3301      	adds	r3, #1
 800a78e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a790:	4a4a      	ldr	r2, [pc, #296]	; (800a8bc <xTaskIncrementTick+0x148>)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d120      	bne.n	800a7de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a79c:	4b48      	ldr	r3, [pc, #288]	; (800a8c0 <xTaskIncrementTick+0x14c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <xTaskIncrementTick+0x48>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	603b      	str	r3, [r7, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	e7fe      	b.n	800a7ba <xTaskIncrementTick+0x46>
 800a7bc:	4b40      	ldr	r3, [pc, #256]	; (800a8c0 <xTaskIncrementTick+0x14c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	4b40      	ldr	r3, [pc, #256]	; (800a8c4 <xTaskIncrementTick+0x150>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a3e      	ldr	r2, [pc, #248]	; (800a8c0 <xTaskIncrementTick+0x14c>)
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	4a3e      	ldr	r2, [pc, #248]	; (800a8c4 <xTaskIncrementTick+0x150>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	4b3d      	ldr	r3, [pc, #244]	; (800a8c8 <xTaskIncrementTick+0x154>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a3c      	ldr	r2, [pc, #240]	; (800a8c8 <xTaskIncrementTick+0x154>)
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	f000 facb 	bl	800ad74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7de:	4b3b      	ldr	r3, [pc, #236]	; (800a8cc <xTaskIncrementTick+0x158>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d348      	bcc.n	800a87a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7e8:	4b35      	ldr	r3, [pc, #212]	; (800a8c0 <xTaskIncrementTick+0x14c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d104      	bne.n	800a7fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7f2:	4b36      	ldr	r3, [pc, #216]	; (800a8cc <xTaskIncrementTick+0x158>)
 800a7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f8:	601a      	str	r2, [r3, #0]
					break;
 800a7fa:	e03e      	b.n	800a87a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7fc:	4b30      	ldr	r3, [pc, #192]	; (800a8c0 <xTaskIncrementTick+0x14c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	429a      	cmp	r2, r3
 800a812:	d203      	bcs.n	800a81c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a814:	4a2d      	ldr	r2, [pc, #180]	; (800a8cc <xTaskIncrementTick+0x158>)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a81a:	e02e      	b.n	800a87a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	3304      	adds	r3, #4
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe fce5 	bl	80091f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d004      	beq.n	800a838 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	3318      	adds	r3, #24
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fcdc 	bl	80091f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	2201      	movs	r2, #1
 800a83e:	409a      	lsls	r2, r3
 800a840:	4b23      	ldr	r3, [pc, #140]	; (800a8d0 <xTaskIncrementTick+0x15c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4313      	orrs	r3, r2
 800a846:	4a22      	ldr	r2, [pc, #136]	; (800a8d0 <xTaskIncrementTick+0x15c>)
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4a1f      	ldr	r2, [pc, #124]	; (800a8d4 <xTaskIncrementTick+0x160>)
 800a858:	441a      	add	r2, r3
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	3304      	adds	r3, #4
 800a85e:	4619      	mov	r1, r3
 800a860:	4610      	mov	r0, r2
 800a862:	f7fe fc68 	bl	8009136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86a:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <xTaskIncrementTick+0x164>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	429a      	cmp	r2, r3
 800a872:	d3b9      	bcc.n	800a7e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a874:	2301      	movs	r3, #1
 800a876:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a878:	e7b6      	b.n	800a7e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a87a:	4b17      	ldr	r3, [pc, #92]	; (800a8d8 <xTaskIncrementTick+0x164>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a880:	4914      	ldr	r1, [pc, #80]	; (800a8d4 <xTaskIncrementTick+0x160>)
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	440b      	add	r3, r1
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d901      	bls.n	800a896 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a892:	2301      	movs	r3, #1
 800a894:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <xTaskIncrementTick+0x168>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	e004      	b.n	800a8ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8a4:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <xTaskIncrementTick+0x16c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	4a0d      	ldr	r2, [pc, #52]	; (800a8e0 <xTaskIncrementTick+0x16c>)
 800a8ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8ae:	697b      	ldr	r3, [r7, #20]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	200012e0 	.word	0x200012e0
 800a8bc:	200012bc 	.word	0x200012bc
 800a8c0:	20001270 	.word	0x20001270
 800a8c4:	20001274 	.word	0x20001274
 800a8c8:	200012d0 	.word	0x200012d0
 800a8cc:	200012d8 	.word	0x200012d8
 800a8d0:	200012c0 	.word	0x200012c0
 800a8d4:	200011bc 	.word	0x200011bc
 800a8d8:	200011b8 	.word	0x200011b8
 800a8dc:	200012cc 	.word	0x200012cc
 800a8e0:	200012c8 	.word	0x200012c8

0800a8e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8ea:	4b27      	ldr	r3, [pc, #156]	; (800a988 <vTaskSwitchContext+0xa4>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8f2:	4b26      	ldr	r3, [pc, #152]	; (800a98c <vTaskSwitchContext+0xa8>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8f8:	e03f      	b.n	800a97a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a8fa:	4b24      	ldr	r3, [pc, #144]	; (800a98c <vTaskSwitchContext+0xa8>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a900:	4b23      	ldr	r3, [pc, #140]	; (800a990 <vTaskSwitchContext+0xac>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	fab3 f383 	clz	r3, r3
 800a90c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a90e:	7afb      	ldrb	r3, [r7, #11]
 800a910:	f1c3 031f 	rsb	r3, r3, #31
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	491f      	ldr	r1, [pc, #124]	; (800a994 <vTaskSwitchContext+0xb0>)
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	440b      	add	r3, r1
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	607b      	str	r3, [r7, #4]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <vTaskSwitchContext+0x5a>
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4a12      	ldr	r2, [pc, #72]	; (800a994 <vTaskSwitchContext+0xb0>)
 800a94c:	4413      	add	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	605a      	str	r2, [r3, #4]
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	3308      	adds	r3, #8
 800a962:	429a      	cmp	r2, r3
 800a964:	d104      	bne.n	800a970 <vTaskSwitchContext+0x8c>
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	605a      	str	r2, [r3, #4]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	4a08      	ldr	r2, [pc, #32]	; (800a998 <vTaskSwitchContext+0xb4>)
 800a978:	6013      	str	r3, [r2, #0]
}
 800a97a:	bf00      	nop
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	200012e0 	.word	0x200012e0
 800a98c:	200012cc 	.word	0x200012cc
 800a990:	200012c0 	.word	0x200012c0
 800a994:	200011bc 	.word	0x200011bc
 800a998:	200011b8 	.word	0x200011b8

0800a99c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	60fb      	str	r3, [r7, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9c2:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <vTaskPlaceOnEventList+0x44>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3318      	adds	r3, #24
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7fe fbd7 	bl	800917e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	6838      	ldr	r0, [r7, #0]
 800a9d4:	f000 fd94 	bl	800b500 <prvAddCurrentTaskToDelayedList>
}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	200011b8 	.word	0x200011b8

0800a9e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	617b      	str	r3, [r7, #20]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3318      	adds	r3, #24
 800aa12:	4619      	mov	r1, r3
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7fe fb8e 	bl	8009136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aa20:	f04f 33ff 	mov.w	r3, #4294967295
 800aa24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	68b8      	ldr	r0, [r7, #8]
 800aa2a:	f000 fd69 	bl	800b500 <prvAddCurrentTaskToDelayedList>
	}
 800aa2e:	bf00      	nop
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	200011b8 	.word	0x200011b8

0800aa3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10a      	bne.n	800aa68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	60fb      	str	r3, [r7, #12]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3318      	adds	r3, #24
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe fbbf 	bl	80091f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa72:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <xTaskRemoveFromEventList+0xac>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d11c      	bne.n	800aab4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fbb6 	bl	80091f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	2201      	movs	r2, #1
 800aa8a:	409a      	lsls	r2, r3
 800aa8c:	4b17      	ldr	r3, [pc, #92]	; (800aaec <xTaskRemoveFromEventList+0xb0>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	4a16      	ldr	r2, [pc, #88]	; (800aaec <xTaskRemoveFromEventList+0xb0>)
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4a13      	ldr	r2, [pc, #76]	; (800aaf0 <xTaskRemoveFromEventList+0xb4>)
 800aaa4:	441a      	add	r2, r3
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	4619      	mov	r1, r3
 800aaac:	4610      	mov	r0, r2
 800aaae:	f7fe fb42 	bl	8009136 <vListInsertEnd>
 800aab2:	e005      	b.n	800aac0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	3318      	adds	r3, #24
 800aab8:	4619      	mov	r1, r3
 800aaba:	480e      	ldr	r0, [pc, #56]	; (800aaf4 <xTaskRemoveFromEventList+0xb8>)
 800aabc:	f7fe fb3b 	bl	8009136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac4:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <xTaskRemoveFromEventList+0xbc>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d905      	bls.n	800aada <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aace:	2301      	movs	r3, #1
 800aad0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aad2:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <xTaskRemoveFromEventList+0xc0>)
 800aad4:	2201      	movs	r2, #1
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e001      	b.n	800aade <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aada:	2300      	movs	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aade:	697b      	ldr	r3, [r7, #20]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	200012e0 	.word	0x200012e0
 800aaec:	200012c0 	.word	0x200012c0
 800aaf0:	200011bc 	.word	0x200011bc
 800aaf4:	20001278 	.word	0x20001278
 800aaf8:	200011b8 	.word	0x200011b8
 800aafc:	200012cc 	.word	0x200012cc

0800ab00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab08:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <vTaskInternalSetTimeOutState+0x24>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab10:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <vTaskInternalSetTimeOutState+0x28>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	605a      	str	r2, [r3, #4]
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	200012d0 	.word	0x200012d0
 800ab28:	200012bc 	.word	0x200012bc

0800ab2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b088      	sub	sp, #32
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	613b      	str	r3, [r7, #16]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	60fb      	str	r3, [r7, #12]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab6e:	f001 f989 	bl	800be84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <xTaskCheckForTimeOut+0xbc>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d102      	bne.n	800ab92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	e023      	b.n	800abda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	4b15      	ldr	r3, [pc, #84]	; (800abec <xTaskCheckForTimeOut+0xc0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d007      	beq.n	800abae <xTaskCheckForTimeOut+0x82>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d302      	bcc.n	800abae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	61fb      	str	r3, [r7, #28]
 800abac:	e015      	b.n	800abda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d20b      	bcs.n	800abd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff ff9b 	bl	800ab00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abca:	2300      	movs	r3, #0
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e004      	b.n	800abda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abda:	f001 f983 	bl	800bee4 <vPortExitCritical>

	return xReturn;
 800abde:	69fb      	ldr	r3, [r7, #28]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3720      	adds	r7, #32
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	200012bc 	.word	0x200012bc
 800abec:	200012d0 	.word	0x200012d0

0800abf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abf4:	4b03      	ldr	r3, [pc, #12]	; (800ac04 <vTaskMissedYield+0x14>)
 800abf6:	2201      	movs	r2, #1
 800abf8:	601a      	str	r2, [r3, #0]
}
 800abfa:	bf00      	nop
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	200012cc 	.word	0x200012cc

0800ac08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac10:	f000 f852 	bl	800acb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac14:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <prvIdleTask+0x28>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d9f9      	bls.n	800ac10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <prvIdleTask+0x2c>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac2c:	e7f0      	b.n	800ac10 <prvIdleTask+0x8>
 800ac2e:	bf00      	nop
 800ac30:	200011bc 	.word	0x200011bc
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac3e:	2300      	movs	r3, #0
 800ac40:	607b      	str	r3, [r7, #4]
 800ac42:	e00c      	b.n	800ac5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a12      	ldr	r2, [pc, #72]	; (800ac98 <prvInitialiseTaskLists+0x60>)
 800ac50:	4413      	add	r3, r2
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fa42 	bl	80090dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b06      	cmp	r3, #6
 800ac62:	d9ef      	bls.n	800ac44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac64:	480d      	ldr	r0, [pc, #52]	; (800ac9c <prvInitialiseTaskLists+0x64>)
 800ac66:	f7fe fa39 	bl	80090dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac6a:	480d      	ldr	r0, [pc, #52]	; (800aca0 <prvInitialiseTaskLists+0x68>)
 800ac6c:	f7fe fa36 	bl	80090dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac70:	480c      	ldr	r0, [pc, #48]	; (800aca4 <prvInitialiseTaskLists+0x6c>)
 800ac72:	f7fe fa33 	bl	80090dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac76:	480c      	ldr	r0, [pc, #48]	; (800aca8 <prvInitialiseTaskLists+0x70>)
 800ac78:	f7fe fa30 	bl	80090dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac7c:	480b      	ldr	r0, [pc, #44]	; (800acac <prvInitialiseTaskLists+0x74>)
 800ac7e:	f7fe fa2d 	bl	80090dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac82:	4b0b      	ldr	r3, [pc, #44]	; (800acb0 <prvInitialiseTaskLists+0x78>)
 800ac84:	4a05      	ldr	r2, [pc, #20]	; (800ac9c <prvInitialiseTaskLists+0x64>)
 800ac86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <prvInitialiseTaskLists+0x7c>)
 800ac8a:	4a05      	ldr	r2, [pc, #20]	; (800aca0 <prvInitialiseTaskLists+0x68>)
 800ac8c:	601a      	str	r2, [r3, #0]
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200011bc 	.word	0x200011bc
 800ac9c:	20001248 	.word	0x20001248
 800aca0:	2000125c 	.word	0x2000125c
 800aca4:	20001278 	.word	0x20001278
 800aca8:	2000128c 	.word	0x2000128c
 800acac:	200012a4 	.word	0x200012a4
 800acb0:	20001270 	.word	0x20001270
 800acb4:	20001274 	.word	0x20001274

0800acb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acbe:	e019      	b.n	800acf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acc0:	f001 f8e0 	bl	800be84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc4:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <prvCheckTasksWaitingTermination+0x50>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3304      	adds	r3, #4
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fa8d 	bl	80091f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acd6:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <prvCheckTasksWaitingTermination+0x54>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3b01      	subs	r3, #1
 800acdc:	4a0b      	ldr	r2, [pc, #44]	; (800ad0c <prvCheckTasksWaitingTermination+0x54>)
 800acde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <prvCheckTasksWaitingTermination+0x58>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <prvCheckTasksWaitingTermination+0x58>)
 800ace8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acea:	f001 f8fb 	bl	800bee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f810 	bl	800ad14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <prvCheckTasksWaitingTermination+0x58>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e1      	bne.n	800acc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acfc:	bf00      	nop
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	2000128c 	.word	0x2000128c
 800ad0c:	200012b8 	.word	0x200012b8
 800ad10:	200012a0 	.word	0x200012a0

0800ad14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d108      	bne.n	800ad38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f001 fa98 	bl	800c260 <vPortFree>
				vPortFree( pxTCB );
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 fa95 	bl	800c260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad36:	e018      	b.n	800ad6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d103      	bne.n	800ad4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 fa8c 	bl	800c260 <vPortFree>
	}
 800ad48:	e00f      	b.n	800ad6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d00a      	beq.n	800ad6a <prvDeleteTCB+0x56>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	60fb      	str	r3, [r7, #12]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <prvDeleteTCB+0x54>
	}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	; (800adac <prvResetNextTaskUnblockTime+0x38>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad84:	4b0a      	ldr	r3, [pc, #40]	; (800adb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ad86:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad8c:	e008      	b.n	800ada0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad8e:	4b07      	ldr	r3, [pc, #28]	; (800adac <prvResetNextTaskUnblockTime+0x38>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a04      	ldr	r2, [pc, #16]	; (800adb0 <prvResetNextTaskUnblockTime+0x3c>)
 800ad9e:	6013      	str	r3, [r2, #0]
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20001270 	.word	0x20001270
 800adb0:	200012d8 	.word	0x200012d8

0800adb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adba:	4b0b      	ldr	r3, [pc, #44]	; (800ade8 <xTaskGetSchedulerState+0x34>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adc2:	2301      	movs	r3, #1
 800adc4:	607b      	str	r3, [r7, #4]
 800adc6:	e008      	b.n	800adda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc8:	4b08      	ldr	r3, [pc, #32]	; (800adec <xTaskGetSchedulerState+0x38>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d102      	bne.n	800add6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800add0:	2302      	movs	r3, #2
 800add2:	607b      	str	r3, [r7, #4]
 800add4:	e001      	b.n	800adda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800add6:	2300      	movs	r3, #0
 800add8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adda:	687b      	ldr	r3, [r7, #4]
	}
 800addc:	4618      	mov	r0, r3
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	200012c4 	.word	0x200012c4
 800adec:	200012e0 	.word	0x200012e0

0800adf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d05e      	beq.n	800aec4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0a:	4b31      	ldr	r3, [pc, #196]	; (800aed0 <xTaskPriorityInherit+0xe0>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d24e      	bcs.n	800aeb2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	db06      	blt.n	800ae2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae1c:	4b2c      	ldr	r3, [pc, #176]	; (800aed0 <xTaskPriorityInherit+0xe0>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	f1c3 0207 	rsb	r2, r3, #7
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6959      	ldr	r1, [r3, #20]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4a26      	ldr	r2, [pc, #152]	; (800aed4 <xTaskPriorityInherit+0xe4>)
 800ae3c:	4413      	add	r3, r2
 800ae3e:	4299      	cmp	r1, r3
 800ae40:	d12f      	bne.n	800aea2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	3304      	adds	r3, #4
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe f9d2 	bl	80091f0 <uxListRemove>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	2201      	movs	r2, #1
 800ae58:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5c:	43da      	mvns	r2, r3
 800ae5e:	4b1e      	ldr	r3, [pc, #120]	; (800aed8 <xTaskPriorityInherit+0xe8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4013      	ands	r3, r2
 800ae64:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <xTaskPriorityInherit+0xe8>)
 800ae66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae68:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <xTaskPriorityInherit+0xe0>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	2201      	movs	r2, #1
 800ae78:	409a      	lsls	r2, r3
 800ae7a:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <xTaskPriorityInherit+0xe8>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <xTaskPriorityInherit+0xe8>)
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4a10      	ldr	r2, [pc, #64]	; (800aed4 <xTaskPriorityInherit+0xe4>)
 800ae92:	441a      	add	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	3304      	adds	r3, #4
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	f7fe f94b 	bl	8009136 <vListInsertEnd>
 800aea0:	e004      	b.n	800aeac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <xTaskPriorityInherit+0xe0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aeac:	2301      	movs	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	e008      	b.n	800aec4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <xTaskPriorityInherit+0xe0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d201      	bcs.n	800aec4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aec0:	2301      	movs	r3, #1
 800aec2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aec4:	68fb      	ldr	r3, [r7, #12]
	}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	200011b8 	.word	0x200011b8
 800aed4:	200011bc 	.word	0x200011bc
 800aed8:	200012c0 	.word	0x200012c0

0800aedc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d06e      	beq.n	800afd0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aef2:	4b3a      	ldr	r3, [pc, #232]	; (800afdc <xTaskPriorityDisinherit+0x100>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d00a      	beq.n	800af12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	60fb      	str	r3, [r7, #12]
}
 800af0e:	bf00      	nop
 800af10:	e7fe      	b.n	800af10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	60bb      	str	r3, [r7, #8]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af34:	1e5a      	subs	r2, r3, #1
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af42:	429a      	cmp	r2, r3
 800af44:	d044      	beq.n	800afd0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d140      	bne.n	800afd0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	3304      	adds	r3, #4
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe f94c 	bl	80091f0 <uxListRemove>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d115      	bne.n	800af8a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af62:	491f      	ldr	r1, [pc, #124]	; (800afe0 <xTaskPriorityDisinherit+0x104>)
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	440b      	add	r3, r1
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xTaskPriorityDisinherit+0xae>
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	2201      	movs	r2, #1
 800af7a:	fa02 f303 	lsl.w	r3, r2, r3
 800af7e:	43da      	mvns	r2, r3
 800af80:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <xTaskPriorityDisinherit+0x108>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4013      	ands	r3, r2
 800af86:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <xTaskPriorityDisinherit+0x108>)
 800af88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	f1c3 0207 	rsb	r2, r3, #7
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	2201      	movs	r2, #1
 800afa4:	409a      	lsls	r2, r3
 800afa6:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <xTaskPriorityDisinherit+0x108>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4313      	orrs	r3, r2
 800afac:	4a0d      	ldr	r2, [pc, #52]	; (800afe4 <xTaskPriorityDisinherit+0x108>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	4613      	mov	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4a08      	ldr	r2, [pc, #32]	; (800afe0 <xTaskPriorityDisinherit+0x104>)
 800afbe:	441a      	add	r2, r3
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f7fe f8b5 	bl	8009136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afcc:	2301      	movs	r3, #1
 800afce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afd0:	697b      	ldr	r3, [r7, #20]
	}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	200011b8 	.word	0x200011b8
 800afe0:	200011bc 	.word	0x200011bc
 800afe4:	200012c0 	.word	0x200012c0

0800afe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aff6:	2301      	movs	r3, #1
 800aff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d077      	beq.n	800b0f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	60fb      	str	r3, [r7, #12]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d902      	bls.n	800b02e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	61fb      	str	r3, [r7, #28]
 800b02c:	e002      	b.n	800b034 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b032:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d058      	beq.n	800b0f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	429a      	cmp	r2, r3
 800b046:	d153      	bne.n	800b0f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b048:	4b2b      	ldr	r3, [pc, #172]	; (800b0f8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d10a      	bne.n	800b068 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60bb      	str	r3, [r7, #8]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	db04      	blt.n	800b086 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f1c3 0207 	rsb	r2, r3, #7
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6959      	ldr	r1, [r3, #20]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4a19      	ldr	r2, [pc, #100]	; (800b0fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b096:	4413      	add	r3, r2
 800b098:	4299      	cmp	r1, r3
 800b09a:	d129      	bne.n	800b0f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fe f8a5 	bl	80091f0 <uxListRemove>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10a      	bne.n	800b0c2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	43da      	mvns	r2, r3
 800b0b8:	4b11      	ldr	r3, [pc, #68]	; (800b100 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4013      	ands	r3, r2
 800b0be:	4a10      	ldr	r2, [pc, #64]	; (800b100 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	409a      	lsls	r2, r3
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	4a0b      	ldr	r2, [pc, #44]	; (800b100 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4a06      	ldr	r2, [pc, #24]	; (800b0fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b0e2:	441a      	add	r2, r3
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fe f823 	bl	8009136 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0f0:	bf00      	nop
 800b0f2:	3720      	adds	r7, #32
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	200011b8 	.word	0x200011b8
 800b0fc:	200011bc 	.word	0x200011bc
 800b100:	200012c0 	.word	0x200012c0

0800b104 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b104:	b480      	push	{r7}
 800b106:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b108:	4b07      	ldr	r3, [pc, #28]	; (800b128 <pvTaskIncrementMutexHeldCount+0x24>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b110:	4b05      	ldr	r3, [pc, #20]	; (800b128 <pvTaskIncrementMutexHeldCount+0x24>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b116:	3201      	adds	r2, #1
 800b118:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b11a:	4b03      	ldr	r3, [pc, #12]	; (800b128 <pvTaskIncrementMutexHeldCount+0x24>)
 800b11c:	681b      	ldr	r3, [r3, #0]
	}
 800b11e:	4618      	mov	r0, r3
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	200011b8 	.word	0x200011b8

0800b12c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b13a:	f000 fea3 	bl	800be84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b13e:	4b26      	ldr	r3, [pc, #152]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d01a      	beq.n	800b182 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b14c:	4b22      	ldr	r3, [pc, #136]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	43d2      	mvns	r2, r2
 800b156:	400a      	ands	r2, r1
 800b158:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b15a:	4b1f      	ldr	r3, [pc, #124]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00b      	beq.n	800b182 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b16a:	2101      	movs	r1, #1
 800b16c:	6838      	ldr	r0, [r7, #0]
 800b16e:	f000 f9c7 	bl	800b500 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b172:	4b1a      	ldr	r3, [pc, #104]	; (800b1dc <xTaskNotifyWait+0xb0>)
 800b174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b182:	f000 feaf 	bl	800bee4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b186:	f000 fe7d 	bl	800be84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b190:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b19a:	4b0f      	ldr	r3, [pc, #60]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d002      	beq.n	800b1ae <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	617b      	str	r3, [r7, #20]
 800b1ac:	e008      	b.n	800b1c0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b1ae:	4b0a      	ldr	r3, [pc, #40]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	43d2      	mvns	r2, r2
 800b1b8:	400a      	ands	r2, r1
 800b1ba:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1c0:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <xTaskNotifyWait+0xac>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800b1ca:	f000 fe8b 	bl	800bee4 <vPortExitCritical>

		return xReturn;
 800b1ce:	697b      	ldr	r3, [r7, #20]
	}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200011b8 	.word	0x200011b8
 800b1dc:	e000ed04 	.word	0xe000ed04

0800b1e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b08a      	sub	sp, #40	; 0x28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <xTaskGenericNotify+0x30>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	61bb      	str	r3, [r7, #24]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b214:	f000 fe36 	bl	800be84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b22c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	2202      	movs	r2, #2
 800b232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d828      	bhi.n	800b28e <xTaskGenericNotify+0xae>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <xTaskGenericNotify+0x64>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b2af 	.word	0x0800b2af
 800b248:	0800b259 	.word	0x0800b259
 800b24c:	0800b267 	.word	0x0800b267
 800b250:	0800b273 	.word	0x0800b273
 800b254:	0800b27b 	.word	0x0800b27b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	431a      	orrs	r2, r3
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b264:	e026      	b.n	800b2b4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b270:	e020      	b.n	800b2b4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b278:	e01c      	b.n	800b2b4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b27a:	7ffb      	ldrb	r3, [r7, #31]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d003      	beq.n	800b288 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b286:	e015      	b.n	800b2b4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800b288:	2300      	movs	r3, #0
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b28c:	e012      	b.n	800b2b4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d00c      	beq.n	800b2b2 <xTaskGenericNotify+0xd2>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	617b      	str	r3, [r7, #20]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskGenericNotify+0xcc>
					break;
 800b2ae:	bf00      	nop
 800b2b0:	e000      	b.n	800b2b4 <xTaskGenericNotify+0xd4>

					break;
 800b2b2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b2b4:	7ffb      	ldrb	r3, [r7, #31]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d139      	bne.n	800b32e <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fd ff96 	bl	80091f0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	409a      	lsls	r2, r3
 800b2cc:	4b1b      	ldr	r3, [pc, #108]	; (800b33c <xTaskGenericNotify+0x15c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	4a1a      	ldr	r2, [pc, #104]	; (800b33c <xTaskGenericNotify+0x15c>)
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4a17      	ldr	r2, [pc, #92]	; (800b340 <xTaskGenericNotify+0x160>)
 800b2e4:	441a      	add	r2, r3
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f7fd ff22 	bl	8009136 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <xTaskGenericNotify+0x130>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	613b      	str	r3, [r7, #16]
}
 800b30c:	bf00      	nop
 800b30e:	e7fe      	b.n	800b30e <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b310:	6a3b      	ldr	r3, [r7, #32]
 800b312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b314:	4b0b      	ldr	r3, [pc, #44]	; (800b344 <xTaskGenericNotify+0x164>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d907      	bls.n	800b32e <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b31e:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <xTaskGenericNotify+0x168>)
 800b320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b32e:	f000 fdd9 	bl	800bee4 <vPortExitCritical>

		return xReturn;
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b334:	4618      	mov	r0, r3
 800b336:	3728      	adds	r7, #40	; 0x28
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	200012c0 	.word	0x200012c0
 800b340:	200011bc 	.word	0x200011bc
 800b344:	200011b8 	.word	0x200011b8
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08e      	sub	sp, #56	; 0x38
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4613      	mov	r3, r2
 800b35a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b35c:	2301      	movs	r3, #1
 800b35e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b37c:	f000 fe64 	bl	800c048 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b384:	f3ef 8211 	mrs	r2, BASEPRI
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	623a      	str	r2, [r7, #32]
 800b39a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b39c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	d828      	bhi.n	800b418 <xTaskGenericNotifyFromISR+0xcc>
 800b3c6:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <xTaskGenericNotifyFromISR+0x80>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b439 	.word	0x0800b439
 800b3d0:	0800b3e1 	.word	0x0800b3e1
 800b3d4:	0800b3ef 	.word	0x0800b3ef
 800b3d8:	0800b3fb 	.word	0x0800b3fb
 800b3dc:	0800b403 	.word	0x0800b403
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b3ec:	e027      	b.n	800b43e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b3f8:	e021      	b.n	800b43e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800b400:	e01d      	b.n	800b43e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b406:	2b02      	cmp	r3, #2
 800b408:	d003      	beq.n	800b412 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b410:	e015      	b.n	800b43e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800b412:	2300      	movs	r3, #0
 800b414:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b416:	e012      	b.n	800b43e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b420:	d00c      	beq.n	800b43c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	61bb      	str	r3, [r7, #24]
}
 800b434:	bf00      	nop
 800b436:	e7fe      	b.n	800b436 <xTaskGenericNotifyFromISR+0xea>
					break;
 800b438:	bf00      	nop
 800b43a:	e000      	b.n	800b43e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800b43c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b43e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b442:	2b01      	cmp	r3, #1
 800b444:	d145      	bne.n	800b4d2 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00a      	beq.n	800b464 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b464:	4b20      	ldr	r3, [pc, #128]	; (800b4e8 <xTaskGenericNotifyFromISR+0x19c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d11c      	bne.n	800b4a6 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	3304      	adds	r3, #4
 800b470:	4618      	mov	r0, r3
 800b472:	f7fd febd 	bl	80091f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	2201      	movs	r2, #1
 800b47c:	409a      	lsls	r2, r3
 800b47e:	4b1b      	ldr	r3, [pc, #108]	; (800b4ec <xTaskGenericNotifyFromISR+0x1a0>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4313      	orrs	r3, r2
 800b484:	4a19      	ldr	r2, [pc, #100]	; (800b4ec <xTaskGenericNotifyFromISR+0x1a0>)
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4a16      	ldr	r2, [pc, #88]	; (800b4f0 <xTaskGenericNotifyFromISR+0x1a4>)
 800b496:	441a      	add	r2, r3
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	3304      	adds	r3, #4
 800b49c:	4619      	mov	r1, r3
 800b49e:	4610      	mov	r0, r2
 800b4a0:	f7fd fe49 	bl	8009136 <vListInsertEnd>
 800b4a4:	e005      	b.n	800b4b2 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	3318      	adds	r3, #24
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4811      	ldr	r0, [pc, #68]	; (800b4f4 <xTaskGenericNotifyFromISR+0x1a8>)
 800b4ae:	f7fd fe42 	bl	8009136 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b6:	4b10      	ldr	r3, [pc, #64]	; (800b4f8 <xTaskGenericNotifyFromISR+0x1ac>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d908      	bls.n	800b4d2 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b4cc:	4b0b      	ldr	r3, [pc, #44]	; (800b4fc <xTaskGenericNotifyFromISR+0x1b0>)
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f383 8811 	msr	BASEPRI, r3
}
 800b4dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3738      	adds	r7, #56	; 0x38
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	200012e0 	.word	0x200012e0
 800b4ec:	200012c0 	.word	0x200012c0
 800b4f0:	200011bc 	.word	0x200011bc
 800b4f4:	20001278 	.word	0x20001278
 800b4f8:	200011b8 	.word	0x200011b8
 800b4fc:	200012cc 	.word	0x200012cc

0800b500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b50a:	4b29      	ldr	r3, [pc, #164]	; (800b5b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b510:	4b28      	ldr	r3, [pc, #160]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3304      	adds	r3, #4
 800b516:	4618      	mov	r0, r3
 800b518:	f7fd fe6a 	bl	80091f0 <uxListRemove>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10b      	bne.n	800b53a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b522:	4b24      	ldr	r3, [pc, #144]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	2201      	movs	r2, #1
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	43da      	mvns	r2, r3
 800b530:	4b21      	ldr	r3, [pc, #132]	; (800b5b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4013      	ands	r3, r2
 800b536:	4a20      	ldr	r2, [pc, #128]	; (800b5b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b538:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b540:	d10a      	bne.n	800b558 <prvAddCurrentTaskToDelayedList+0x58>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d007      	beq.n	800b558 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b548:	4b1a      	ldr	r3, [pc, #104]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4619      	mov	r1, r3
 800b550:	481a      	ldr	r0, [pc, #104]	; (800b5bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b552:	f7fd fdf0 	bl	8009136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b556:	e026      	b.n	800b5a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b560:	4b14      	ldr	r3, [pc, #80]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d209      	bcs.n	800b584 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b570:	4b13      	ldr	r3, [pc, #76]	; (800b5c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	4b0f      	ldr	r3, [pc, #60]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f7fd fdfe 	bl	800917e <vListInsert>
}
 800b582:	e010      	b.n	800b5a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b584:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4619      	mov	r1, r3
 800b590:	4610      	mov	r0, r2
 800b592:	f7fd fdf4 	bl	800917e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b596:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d202      	bcs.n	800b5a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b5a0:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6013      	str	r3, [r2, #0]
}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	200012bc 	.word	0x200012bc
 800b5b4:	200011b8 	.word	0x200011b8
 800b5b8:	200012c0 	.word	0x200012c0
 800b5bc:	200012a4 	.word	0x200012a4
 800b5c0:	20001274 	.word	0x20001274
 800b5c4:	20001270 	.word	0x20001270
 800b5c8:	200012d8 	.word	0x200012d8

0800b5cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b08a      	sub	sp, #40	; 0x28
 800b5d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5d6:	f000 faeb 	bl	800bbb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5da:	4b1c      	ldr	r3, [pc, #112]	; (800b64c <xTimerCreateTimerTask+0x80>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d021      	beq.n	800b626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5ea:	1d3a      	adds	r2, r7, #4
 800b5ec:	f107 0108 	add.w	r1, r7, #8
 800b5f0:	f107 030c 	add.w	r3, r7, #12
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f5 fe89 	bl	800130c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	9202      	str	r2, [sp, #8]
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	2302      	movs	r3, #2
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	2300      	movs	r3, #0
 800b60a:	460a      	mov	r2, r1
 800b60c:	4910      	ldr	r1, [pc, #64]	; (800b650 <xTimerCreateTimerTask+0x84>)
 800b60e:	4811      	ldr	r0, [pc, #68]	; (800b654 <xTimerCreateTimerTask+0x88>)
 800b610:	f7fe fdb6 	bl	800a180 <xTaskCreateStatic>
 800b614:	4603      	mov	r3, r0
 800b616:	4a10      	ldr	r2, [pc, #64]	; (800b658 <xTimerCreateTimerTask+0x8c>)
 800b618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <xTimerCreateTimerTask+0x8c>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b622:	2301      	movs	r3, #1
 800b624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	613b      	str	r3, [r7, #16]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b642:	697b      	ldr	r3, [r7, #20]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20001314 	.word	0x20001314
 800b650:	0800d5c4 	.word	0x0800d5c4
 800b654:	0800b791 	.word	0x0800b791
 800b658:	20001318 	.word	0x20001318

0800b65c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10a      	bne.n	800b68a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	623b      	str	r3, [r7, #32]
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b68a:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <xTimerGenericCommand+0x98>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d02a      	beq.n	800b6e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b05      	cmp	r3, #5
 800b6a2:	dc18      	bgt.n	800b6d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6a4:	f7ff fb86 	bl	800adb4 <xTaskGetSchedulerState>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d109      	bne.n	800b6c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6ae:	4b11      	ldr	r3, [pc, #68]	; (800b6f4 <xTimerGenericCommand+0x98>)
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f107 0114 	add.w	r1, r7, #20
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	f7fd ff49 	bl	8009550 <xQueueGenericSend>
 800b6be:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c0:	e012      	b.n	800b6e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <xTimerGenericCommand+0x98>)
 800b6c4:	6818      	ldr	r0, [r3, #0]
 800b6c6:	f107 0114 	add.w	r1, r7, #20
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f7fd ff3f 	bl	8009550 <xQueueGenericSend>
 800b6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800b6d4:	e008      	b.n	800b6e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <xTimerGenericCommand+0x98>)
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	f107 0114 	add.w	r1, r7, #20
 800b6de:	2300      	movs	r3, #0
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	f7fe f833 	bl	800974c <xQueueGenericSendFromISR>
 800b6e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3728      	adds	r7, #40	; 0x28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20001314 	.word	0x20001314

0800b6f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b702:	4b22      	ldr	r3, [pc, #136]	; (800b78c <prvProcessExpiredTimer+0x94>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	3304      	adds	r3, #4
 800b710:	4618      	mov	r0, r3
 800b712:	f7fd fd6d 	bl	80091f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d022      	beq.n	800b76a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	699a      	ldr	r2, [r3, #24]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	18d1      	adds	r1, r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	6978      	ldr	r0, [r7, #20]
 800b732:	f000 f8d1 	bl	800b8d8 <prvInsertTimerInActiveList>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01f      	beq.n	800b77c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b73c:	2300      	movs	r3, #0
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	2300      	movs	r3, #0
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	2100      	movs	r1, #0
 800b746:	6978      	ldr	r0, [r7, #20]
 800b748:	f7ff ff88 	bl	800b65c <xTimerGenericCommand>
 800b74c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d113      	bne.n	800b77c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	60fb      	str	r3, [r7, #12]
}
 800b766:	bf00      	nop
 800b768:	e7fe      	b.n	800b768 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b770:	f023 0301 	bic.w	r3, r3, #1
 800b774:	b2da      	uxtb	r2, r3
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	6978      	ldr	r0, [r7, #20]
 800b782:	4798      	blx	r3
}
 800b784:	bf00      	nop
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	2000130c 	.word	0x2000130c

0800b790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b798:	f107 0308 	add.w	r3, r7, #8
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f857 	bl	800b850 <prvGetNextExpireTime>
 800b7a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 f803 	bl	800b7b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7ae:	f000 f8d5 	bl	800b95c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7b2:	e7f1      	b.n	800b798 <prvTimerTask+0x8>

0800b7b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7be:	f7fe ff0d 	bl	800a5dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7c2:	f107 0308 	add.w	r3, r7, #8
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 f866 	bl	800b898 <prvSampleTimeNow>
 800b7cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d130      	bne.n	800b836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <prvProcessTimerOrBlockTask+0x3c>
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d806      	bhi.n	800b7f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7e2:	f7fe ff09 	bl	800a5f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7e6:	68f9      	ldr	r1, [r7, #12]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff ff85 	bl	800b6f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7ee:	e024      	b.n	800b83a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d008      	beq.n	800b808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7f6:	4b13      	ldr	r3, [pc, #76]	; (800b844 <prvProcessTimerOrBlockTask+0x90>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <prvProcessTimerOrBlockTask+0x50>
 800b800:	2301      	movs	r3, #1
 800b802:	e000      	b.n	800b806 <prvProcessTimerOrBlockTask+0x52>
 800b804:	2300      	movs	r3, #0
 800b806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b808:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <prvProcessTimerOrBlockTask+0x94>)
 800b80a:	6818      	ldr	r0, [r3, #0]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	4619      	mov	r1, r3
 800b816:	f7fe fc7f 	bl	800a118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b81a:	f7fe feed 	bl	800a5f8 <xTaskResumeAll>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10a      	bne.n	800b83a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b824:	4b09      	ldr	r3, [pc, #36]	; (800b84c <prvProcessTimerOrBlockTask+0x98>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
}
 800b834:	e001      	b.n	800b83a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b836:	f7fe fedf 	bl	800a5f8 <xTaskResumeAll>
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20001310 	.word	0x20001310
 800b848:	20001314 	.word	0x20001314
 800b84c:	e000ed04 	.word	0xe000ed04

0800b850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b858:	4b0e      	ldr	r3, [pc, #56]	; (800b894 <prvGetNextExpireTime+0x44>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <prvGetNextExpireTime+0x16>
 800b862:	2201      	movs	r2, #1
 800b864:	e000      	b.n	800b868 <prvGetNextExpireTime+0x18>
 800b866:	2200      	movs	r2, #0
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d105      	bne.n	800b880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <prvGetNextExpireTime+0x44>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e001      	b.n	800b884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b884:	68fb      	ldr	r3, [r7, #12]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	2000130c 	.word	0x2000130c

0800b898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8a0:	f7fe ff46 	bl	800a730 <xTaskGetTickCount>
 800b8a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8a6:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <prvSampleTimeNow+0x3c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d205      	bcs.n	800b8bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8b0:	f000 f91a 	bl	800bae8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	e002      	b.n	800b8c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8c2:	4a04      	ldr	r2, [pc, #16]	; (800b8d4 <prvSampleTimeNow+0x3c>)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	2000131c 	.word	0x2000131c

0800b8d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d812      	bhi.n	800b924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d302      	bcc.n	800b912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b90c:	2301      	movs	r3, #1
 800b90e:	617b      	str	r3, [r7, #20]
 800b910:	e01b      	b.n	800b94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b912:	4b10      	ldr	r3, [pc, #64]	; (800b954 <prvInsertTimerInActiveList+0x7c>)
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3304      	adds	r3, #4
 800b91a:	4619      	mov	r1, r3
 800b91c:	4610      	mov	r0, r2
 800b91e:	f7fd fc2e 	bl	800917e <vListInsert>
 800b922:	e012      	b.n	800b94a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d206      	bcs.n	800b93a <prvInsertTimerInActiveList+0x62>
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d302      	bcc.n	800b93a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	e007      	b.n	800b94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b93a:	4b07      	ldr	r3, [pc, #28]	; (800b958 <prvInsertTimerInActiveList+0x80>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3304      	adds	r3, #4
 800b942:	4619      	mov	r1, r3
 800b944:	4610      	mov	r0, r2
 800b946:	f7fd fc1a 	bl	800917e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b94a:	697b      	ldr	r3, [r7, #20]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20001310 	.word	0x20001310
 800b958:	2000130c 	.word	0x2000130c

0800b95c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08c      	sub	sp, #48	; 0x30
 800b960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b962:	e0ae      	b.n	800bac2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f2c0 80aa 	blt.w	800bac0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d004      	beq.n	800b982 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	3304      	adds	r3, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fd fc37 	bl	80091f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b982:	1d3b      	adds	r3, r7, #4
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff ff87 	bl	800b898 <prvSampleTimeNow>
 800b98a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b09      	cmp	r3, #9
 800b990:	f200 8097 	bhi.w	800bac2 <prvProcessReceivedCommands+0x166>
 800b994:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <prvProcessReceivedCommands+0x40>)
 800b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99a:	bf00      	nop
 800b99c:	0800b9c5 	.word	0x0800b9c5
 800b9a0:	0800b9c5 	.word	0x0800b9c5
 800b9a4:	0800b9c5 	.word	0x0800b9c5
 800b9a8:	0800ba39 	.word	0x0800ba39
 800b9ac:	0800ba4d 	.word	0x0800ba4d
 800b9b0:	0800ba97 	.word	0x0800ba97
 800b9b4:	0800b9c5 	.word	0x0800b9c5
 800b9b8:	0800b9c5 	.word	0x0800b9c5
 800b9bc:	0800ba39 	.word	0x0800ba39
 800b9c0:	0800ba4d 	.word	0x0800ba4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9ca:	f043 0301 	orr.w	r3, r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	18d1      	adds	r1, r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a3a      	ldr	r2, [r7, #32]
 800b9e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9e4:	f7ff ff78 	bl	800b8d8 <prvInsertTimerInActiveList>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d069      	beq.n	800bac2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9fc:	f003 0304 	and.w	r3, r3, #4
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d05e      	beq.n	800bac2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	441a      	add	r2, r3
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	2300      	movs	r3, #0
 800ba12:	2100      	movs	r1, #0
 800ba14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba16:	f7ff fe21 	bl	800b65c <xTimerGenericCommand>
 800ba1a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d14f      	bne.n	800bac2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	61bb      	str	r3, [r7, #24]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba3e:	f023 0301 	bic.w	r3, r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ba4a:	e03a      	b.n	800bac2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba52:	f043 0301 	orr.w	r3, r3, #1
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10a      	bne.n	800ba82 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	617b      	str	r3, [r7, #20]
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	699a      	ldr	r2, [r3, #24]
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	18d1      	adds	r1, r2, r3
 800ba8a:	6a3b      	ldr	r3, [r7, #32]
 800ba8c:	6a3a      	ldr	r2, [r7, #32]
 800ba8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba90:	f7ff ff22 	bl	800b8d8 <prvInsertTimerInActiveList>
					break;
 800ba94:	e015      	b.n	800bac2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba9c:	f003 0302 	and.w	r3, r3, #2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800baa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baa6:	f000 fbdb 	bl	800c260 <vPortFree>
 800baaa:	e00a      	b.n	800bac2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bab2:	f023 0301 	bic.w	r3, r3, #1
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800babe:	e000      	b.n	800bac2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bac0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bac2:	4b08      	ldr	r3, [pc, #32]	; (800bae4 <prvProcessReceivedCommands+0x188>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f107 0108 	add.w	r1, r7, #8
 800baca:	2200      	movs	r2, #0
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fd ff65 	bl	800999c <xQueueReceive>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f47f af45 	bne.w	800b964 <prvProcessReceivedCommands+0x8>
	}
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	3728      	adds	r7, #40	; 0x28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20001314 	.word	0x20001314

0800bae8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800baee:	e048      	b.n	800bb82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baf0:	4b2d      	ldr	r3, [pc, #180]	; (800bba8 <prvSwitchTimerLists+0xc0>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bafa:	4b2b      	ldr	r3, [pc, #172]	; (800bba8 <prvSwitchTimerLists+0xc0>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3304      	adds	r3, #4
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fd fb71 	bl	80091f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb1c:	f003 0304 	and.w	r3, r3, #4
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d02e      	beq.n	800bb82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d90e      	bls.n	800bb54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb42:	4b19      	ldr	r3, [pc, #100]	; (800bba8 <prvSwitchTimerLists+0xc0>)
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7fd fb16 	bl	800917e <vListInsert>
 800bb52:	e016      	b.n	800bb82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb54:	2300      	movs	r3, #0
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f7ff fd7c 	bl	800b65c <xTimerGenericCommand>
 800bb64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	603b      	str	r3, [r7, #0]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <prvSwitchTimerLists+0xc0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1b1      	bne.n	800baf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb8c:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <prvSwitchTimerLists+0xc0>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb92:	4b06      	ldr	r3, [pc, #24]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a04      	ldr	r2, [pc, #16]	; (800bba8 <prvSwitchTimerLists+0xc0>)
 800bb98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb9a:	4a04      	ldr	r2, [pc, #16]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	6013      	str	r3, [r2, #0]
}
 800bba0:	bf00      	nop
 800bba2:	3718      	adds	r7, #24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	2000130c 	.word	0x2000130c
 800bbac:	20001310 	.word	0x20001310

0800bbb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbb6:	f000 f965 	bl	800be84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbba:	4b15      	ldr	r3, [pc, #84]	; (800bc10 <prvCheckForValidListAndQueue+0x60>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d120      	bne.n	800bc04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bbc2:	4814      	ldr	r0, [pc, #80]	; (800bc14 <prvCheckForValidListAndQueue+0x64>)
 800bbc4:	f7fd fa8a 	bl	80090dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbc8:	4813      	ldr	r0, [pc, #76]	; (800bc18 <prvCheckForValidListAndQueue+0x68>)
 800bbca:	f7fd fa87 	bl	80090dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbce:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <prvCheckForValidListAndQueue+0x6c>)
 800bbd0:	4a10      	ldr	r2, [pc, #64]	; (800bc14 <prvCheckForValidListAndQueue+0x64>)
 800bbd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bbd4:	4b12      	ldr	r3, [pc, #72]	; (800bc20 <prvCheckForValidListAndQueue+0x70>)
 800bbd6:	4a10      	ldr	r2, [pc, #64]	; (800bc18 <prvCheckForValidListAndQueue+0x68>)
 800bbd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	4b11      	ldr	r3, [pc, #68]	; (800bc24 <prvCheckForValidListAndQueue+0x74>)
 800bbe0:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <prvCheckForValidListAndQueue+0x78>)
 800bbe2:	210c      	movs	r1, #12
 800bbe4:	200a      	movs	r0, #10
 800bbe6:	f7fd fb95 	bl	8009314 <xQueueGenericCreateStatic>
 800bbea:	4603      	mov	r3, r0
 800bbec:	4a08      	ldr	r2, [pc, #32]	; (800bc10 <prvCheckForValidListAndQueue+0x60>)
 800bbee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <prvCheckForValidListAndQueue+0x60>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <prvCheckForValidListAndQueue+0x60>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	490b      	ldr	r1, [pc, #44]	; (800bc2c <prvCheckForValidListAndQueue+0x7c>)
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fa60 	bl	800a0c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc04:	f000 f96e 	bl	800bee4 <vPortExitCritical>
}
 800bc08:	bf00      	nop
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20001314 	.word	0x20001314
 800bc14:	200012e4 	.word	0x200012e4
 800bc18:	200012f8 	.word	0x200012f8
 800bc1c:	2000130c 	.word	0x2000130c
 800bc20:	20001310 	.word	0x20001310
 800bc24:	20001398 	.word	0x20001398
 800bc28:	20001320 	.word	0x20001320
 800bc2c:	0800d5cc 	.word	0x0800d5cc

0800bc30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3b04      	subs	r3, #4
 800bc40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3b04      	subs	r3, #4
 800bc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	f023 0201 	bic.w	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3b04      	subs	r3, #4
 800bc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc60:	4a0c      	ldr	r2, [pc, #48]	; (800bc94 <pxPortInitialiseStack+0x64>)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3b14      	subs	r3, #20
 800bc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3b04      	subs	r3, #4
 800bc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f06f 0202 	mvn.w	r2, #2
 800bc7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3b20      	subs	r3, #32
 800bc84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc86:	68fb      	ldr	r3, [r7, #12]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	0800bc99 	.word	0x0800bc99

0800bc98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bca2:	4b12      	ldr	r3, [pc, #72]	; (800bcec <prvTaskExitError+0x54>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d00a      	beq.n	800bcc2 <prvTaskExitError+0x2a>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60fb      	str	r3, [r7, #12]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <prvTaskExitError+0x28>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	60bb      	str	r3, [r7, #8]
}
 800bcd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bcd6:	bf00      	nop
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0fc      	beq.n	800bcd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcde:	bf00      	nop
 800bce0:	bf00      	nop
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	2000008c 	.word	0x2000008c

0800bcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bcf0:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <pxCurrentTCBConst2>)
 800bcf2:	6819      	ldr	r1, [r3, #0]
 800bcf4:	6808      	ldr	r0, [r1, #0]
 800bcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfa:	f380 8809 	msr	PSP, r0
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f04f 0000 	mov.w	r0, #0
 800bd06:	f380 8811 	msr	BASEPRI, r0
 800bd0a:	4770      	bx	lr
 800bd0c:	f3af 8000 	nop.w

0800bd10 <pxCurrentTCBConst2>:
 800bd10:	200011b8 	.word	0x200011b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop

0800bd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd18:	4808      	ldr	r0, [pc, #32]	; (800bd3c <prvPortStartFirstTask+0x24>)
 800bd1a:	6800      	ldr	r0, [r0, #0]
 800bd1c:	6800      	ldr	r0, [r0, #0]
 800bd1e:	f380 8808 	msr	MSP, r0
 800bd22:	f04f 0000 	mov.w	r0, #0
 800bd26:	f380 8814 	msr	CONTROL, r0
 800bd2a:	b662      	cpsie	i
 800bd2c:	b661      	cpsie	f
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	df00      	svc	0
 800bd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd3a:	bf00      	nop
 800bd3c:	e000ed08 	.word	0xe000ed08

0800bd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd46:	4b46      	ldr	r3, [pc, #280]	; (800be60 <xPortStartScheduler+0x120>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a46      	ldr	r2, [pc, #280]	; (800be64 <xPortStartScheduler+0x124>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d10a      	bne.n	800bd66 <xPortStartScheduler+0x26>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	613b      	str	r3, [r7, #16]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd66:	4b3e      	ldr	r3, [pc, #248]	; (800be60 <xPortStartScheduler+0x120>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a3f      	ldr	r2, [pc, #252]	; (800be68 <xPortStartScheduler+0x128>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d10a      	bne.n	800bd86 <xPortStartScheduler+0x46>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	60fb      	str	r3, [r7, #12]
}
 800bd82:	bf00      	nop
 800bd84:	e7fe      	b.n	800bd84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd86:	4b39      	ldr	r3, [pc, #228]	; (800be6c <xPortStartScheduler+0x12c>)
 800bd88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	22ff      	movs	r2, #255	; 0xff
 800bd96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bda8:	b2da      	uxtb	r2, r3
 800bdaa:	4b31      	ldr	r3, [pc, #196]	; (800be70 <xPortStartScheduler+0x130>)
 800bdac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdae:	4b31      	ldr	r3, [pc, #196]	; (800be74 <xPortStartScheduler+0x134>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdb4:	e009      	b.n	800bdca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bdb6:	4b2f      	ldr	r3, [pc, #188]	; (800be74 <xPortStartScheduler+0x134>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	4a2d      	ldr	r2, [pc, #180]	; (800be74 <xPortStartScheduler+0x134>)
 800bdbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdc0:	78fb      	ldrb	r3, [r7, #3]
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdca:	78fb      	ldrb	r3, [r7, #3]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd2:	2b80      	cmp	r3, #128	; 0x80
 800bdd4:	d0ef      	beq.n	800bdb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bdd6:	4b27      	ldr	r3, [pc, #156]	; (800be74 <xPortStartScheduler+0x134>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f1c3 0307 	rsb	r3, r3, #7
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d00a      	beq.n	800bdf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	60bb      	str	r3, [r7, #8]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdf8:	4b1e      	ldr	r3, [pc, #120]	; (800be74 <xPortStartScheduler+0x134>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	021b      	lsls	r3, r3, #8
 800bdfe:	4a1d      	ldr	r2, [pc, #116]	; (800be74 <xPortStartScheduler+0x134>)
 800be00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be02:	4b1c      	ldr	r3, [pc, #112]	; (800be74 <xPortStartScheduler+0x134>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be0a:	4a1a      	ldr	r2, [pc, #104]	; (800be74 <xPortStartScheduler+0x134>)
 800be0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	b2da      	uxtb	r2, r3
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be16:	4b18      	ldr	r3, [pc, #96]	; (800be78 <xPortStartScheduler+0x138>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a17      	ldr	r2, [pc, #92]	; (800be78 <xPortStartScheduler+0x138>)
 800be1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be22:	4b15      	ldr	r3, [pc, #84]	; (800be78 <xPortStartScheduler+0x138>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a14      	ldr	r2, [pc, #80]	; (800be78 <xPortStartScheduler+0x138>)
 800be28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be2e:	f000 f8dd 	bl	800bfec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be32:	4b12      	ldr	r3, [pc, #72]	; (800be7c <xPortStartScheduler+0x13c>)
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be38:	f000 f8fc 	bl	800c034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be3c:	4b10      	ldr	r3, [pc, #64]	; (800be80 <xPortStartScheduler+0x140>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a0f      	ldr	r2, [pc, #60]	; (800be80 <xPortStartScheduler+0x140>)
 800be42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800be46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be48:	f7ff ff66 	bl	800bd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be4c:	f7fe fd4a 	bl	800a8e4 <vTaskSwitchContext>
	prvTaskExitError();
 800be50:	f7ff ff22 	bl	800bc98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	e000ed00 	.word	0xe000ed00
 800be64:	410fc271 	.word	0x410fc271
 800be68:	410fc270 	.word	0x410fc270
 800be6c:	e000e400 	.word	0xe000e400
 800be70:	200013e0 	.word	0x200013e0
 800be74:	200013e4 	.word	0x200013e4
 800be78:	e000ed20 	.word	0xe000ed20
 800be7c:	2000008c 	.word	0x2000008c
 800be80:	e000ef34 	.word	0xe000ef34

0800be84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	607b      	str	r3, [r7, #4]
}
 800be9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be9e:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <vPortEnterCritical+0x58>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	4a0d      	ldr	r2, [pc, #52]	; (800bedc <vPortEnterCritical+0x58>)
 800bea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bea8:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <vPortEnterCritical+0x58>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d10f      	bne.n	800bed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800beb0:	4b0b      	ldr	r3, [pc, #44]	; (800bee0 <vPortEnterCritical+0x5c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00a      	beq.n	800bed0 <vPortEnterCritical+0x4c>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	603b      	str	r3, [r7, #0]
}
 800becc:	bf00      	nop
 800bece:	e7fe      	b.n	800bece <vPortEnterCritical+0x4a>
	}
}
 800bed0:	bf00      	nop
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	2000008c 	.word	0x2000008c
 800bee0:	e000ed04 	.word	0xe000ed04

0800bee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800beea:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <vPortExitCritical+0x50>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <vPortExitCritical+0x24>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	607b      	str	r3, [r7, #4]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf08:	4b0a      	ldr	r3, [pc, #40]	; (800bf34 <vPortExitCritical+0x50>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	4a09      	ldr	r2, [pc, #36]	; (800bf34 <vPortExitCritical+0x50>)
 800bf10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <vPortExitCritical+0x50>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <vPortExitCritical+0x42>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	f383 8811 	msr	BASEPRI, r3
}
 800bf24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf26:	bf00      	nop
 800bf28:	370c      	adds	r7, #12
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	2000008c 	.word	0x2000008c
	...

0800bf40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf40:	f3ef 8009 	mrs	r0, PSP
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <pxCurrentTCBConst>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	f01e 0f10 	tst.w	lr, #16
 800bf50:	bf08      	it	eq
 800bf52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5a:	6010      	str	r0, [r2, #0]
 800bf5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf64:	f380 8811 	msr	BASEPRI, r0
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f7fe fcb8 	bl	800a8e4 <vTaskSwitchContext>
 800bf74:	f04f 0000 	mov.w	r0, #0
 800bf78:	f380 8811 	msr	BASEPRI, r0
 800bf7c:	bc09      	pop	{r0, r3}
 800bf7e:	6819      	ldr	r1, [r3, #0]
 800bf80:	6808      	ldr	r0, [r1, #0]
 800bf82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf86:	f01e 0f10 	tst.w	lr, #16
 800bf8a:	bf08      	it	eq
 800bf8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf90:	f380 8809 	msr	PSP, r0
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	f3af 8000 	nop.w

0800bfa0 <pxCurrentTCBConst>:
 800bfa0:	200011b8 	.word	0x200011b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop

0800bfa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	607b      	str	r3, [r7, #4]
}
 800bfc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfc2:	f7fe fbd7 	bl	800a774 <xTaskIncrementTick>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d003      	beq.n	800bfd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfcc:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <SysTick_Handler+0x40>)
 800bfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	f383 8811 	msr	BASEPRI, r3
}
 800bfde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bff0:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <vPortSetupTimerInterrupt+0x34>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bff6:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <vPortSetupTimerInterrupt+0x38>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bffc:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <vPortSetupTimerInterrupt+0x3c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a0a      	ldr	r2, [pc, #40]	; (800c02c <vPortSetupTimerInterrupt+0x40>)
 800c002:	fba2 2303 	umull	r2, r3, r2, r3
 800c006:	099b      	lsrs	r3, r3, #6
 800c008:	4a09      	ldr	r2, [pc, #36]	; (800c030 <vPortSetupTimerInterrupt+0x44>)
 800c00a:	3b01      	subs	r3, #1
 800c00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c00e:	4b04      	ldr	r3, [pc, #16]	; (800c020 <vPortSetupTimerInterrupt+0x34>)
 800c010:	2207      	movs	r2, #7
 800c012:	601a      	str	r2, [r3, #0]
}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	e000e010 	.word	0xe000e010
 800c024:	e000e018 	.word	0xe000e018
 800c028:	20000020 	.word	0x20000020
 800c02c:	10624dd3 	.word	0x10624dd3
 800c030:	e000e014 	.word	0xe000e014

0800c034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c044 <vPortEnableVFP+0x10>
 800c038:	6801      	ldr	r1, [r0, #0]
 800c03a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c03e:	6001      	str	r1, [r0, #0]
 800c040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c042:	bf00      	nop
 800c044:	e000ed88 	.word	0xe000ed88

0800c048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c04e:	f3ef 8305 	mrs	r3, IPSR
 800c052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b0f      	cmp	r3, #15
 800c058:	d914      	bls.n	800c084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c05a:	4a17      	ldr	r2, [pc, #92]	; (800c0b8 <vPortValidateInterruptPriority+0x70>)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	4413      	add	r3, r2
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c064:	4b15      	ldr	r3, [pc, #84]	; (800c0bc <vPortValidateInterruptPriority+0x74>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	7afa      	ldrb	r2, [r7, #11]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d20a      	bcs.n	800c084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	607b      	str	r3, [r7, #4]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c084:	4b0e      	ldr	r3, [pc, #56]	; (800c0c0 <vPortValidateInterruptPriority+0x78>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c08c:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <vPortValidateInterruptPriority+0x7c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d90a      	bls.n	800c0aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	603b      	str	r3, [r7, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <vPortValidateInterruptPriority+0x60>
	}
 800c0aa:	bf00      	nop
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	e000e3f0 	.word	0xe000e3f0
 800c0bc:	200013e0 	.word	0x200013e0
 800c0c0:	e000ed0c 	.word	0xe000ed0c
 800c0c4:	200013e4 	.word	0x200013e4

0800c0c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08a      	sub	sp, #40	; 0x28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0d4:	f7fe fa82 	bl	800a5dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0d8:	4b5b      	ldr	r3, [pc, #364]	; (800c248 <pvPortMalloc+0x180>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0e0:	f000 f920 	bl	800c324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0e4:	4b59      	ldr	r3, [pc, #356]	; (800c24c <pvPortMalloc+0x184>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f040 8093 	bne.w	800c218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d01d      	beq.n	800c134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	2b00      	cmp	r3, #0
 800c108:	d014      	beq.n	800c134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f023 0307 	bic.w	r3, r3, #7
 800c110:	3308      	adds	r3, #8
 800c112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <pvPortMalloc+0x6c>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	617b      	str	r3, [r7, #20]
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d06e      	beq.n	800c218 <pvPortMalloc+0x150>
 800c13a:	4b45      	ldr	r3, [pc, #276]	; (800c250 <pvPortMalloc+0x188>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	429a      	cmp	r2, r3
 800c142:	d869      	bhi.n	800c218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c144:	4b43      	ldr	r3, [pc, #268]	; (800c254 <pvPortMalloc+0x18c>)
 800c146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c148:	4b42      	ldr	r3, [pc, #264]	; (800c254 <pvPortMalloc+0x18c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c14e:	e004      	b.n	800c15a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	429a      	cmp	r2, r3
 800c162:	d903      	bls.n	800c16c <pvPortMalloc+0xa4>
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f1      	bne.n	800c150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c16c:	4b36      	ldr	r3, [pc, #216]	; (800c248 <pvPortMalloc+0x180>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c172:	429a      	cmp	r2, r3
 800c174:	d050      	beq.n	800c218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2208      	movs	r2, #8
 800c17c:	4413      	add	r3, r2
 800c17e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	2308      	movs	r3, #8
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	429a      	cmp	r2, r3
 800c196:	d91f      	bls.n	800c1d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4413      	add	r3, r2
 800c19e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00a      	beq.n	800c1c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	613b      	str	r3, [r7, #16]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1d2:	69b8      	ldr	r0, [r7, #24]
 800c1d4:	f000 f908 	bl	800c3e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1d8:	4b1d      	ldr	r3, [pc, #116]	; (800c250 <pvPortMalloc+0x188>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	4a1b      	ldr	r2, [pc, #108]	; (800c250 <pvPortMalloc+0x188>)
 800c1e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <pvPortMalloc+0x188>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	4b1b      	ldr	r3, [pc, #108]	; (800c258 <pvPortMalloc+0x190>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d203      	bcs.n	800c1fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1f2:	4b17      	ldr	r3, [pc, #92]	; (800c250 <pvPortMalloc+0x188>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a18      	ldr	r2, [pc, #96]	; (800c258 <pvPortMalloc+0x190>)
 800c1f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	4b13      	ldr	r3, [pc, #76]	; (800c24c <pvPortMalloc+0x184>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	431a      	orrs	r2, r3
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	2200      	movs	r2, #0
 800c20c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c20e:	4b13      	ldr	r3, [pc, #76]	; (800c25c <pvPortMalloc+0x194>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	4a11      	ldr	r2, [pc, #68]	; (800c25c <pvPortMalloc+0x194>)
 800c216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c218:	f7fe f9ee 	bl	800a5f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	f003 0307 	and.w	r3, r3, #7
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <pvPortMalloc+0x174>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	60fb      	str	r3, [r7, #12]
}
 800c238:	bf00      	nop
 800c23a:	e7fe      	b.n	800c23a <pvPortMalloc+0x172>
	return pvReturn;
 800c23c:	69fb      	ldr	r3, [r7, #28]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3728      	adds	r7, #40	; 0x28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	20004ff0 	.word	0x20004ff0
 800c24c:	20005004 	.word	0x20005004
 800c250:	20004ff4 	.word	0x20004ff4
 800c254:	20004fe8 	.word	0x20004fe8
 800c258:	20004ff8 	.word	0x20004ff8
 800c25c:	20004ffc 	.word	0x20004ffc

0800c260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d04d      	beq.n	800c30e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c272:	2308      	movs	r3, #8
 800c274:	425b      	negs	r3, r3
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4413      	add	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	4b24      	ldr	r3, [pc, #144]	; (800c318 <vPortFree+0xb8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4013      	ands	r3, r2
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10a      	bne.n	800c2a4 <vPortFree+0x44>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	60fb      	str	r3, [r7, #12]
}
 800c2a0:	bf00      	nop
 800c2a2:	e7fe      	b.n	800c2a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00a      	beq.n	800c2c2 <vPortFree+0x62>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	60bb      	str	r3, [r7, #8]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	4b14      	ldr	r3, [pc, #80]	; (800c318 <vPortFree+0xb8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01e      	beq.n	800c30e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d11a      	bne.n	800c30e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <vPortFree+0xb8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	43db      	mvns	r3, r3
 800c2e2:	401a      	ands	r2, r3
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2e8:	f7fe f978 	bl	800a5dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <vPortFree+0xbc>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	4a09      	ldr	r2, [pc, #36]	; (800c31c <vPortFree+0xbc>)
 800c2f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2fa:	6938      	ldr	r0, [r7, #16]
 800c2fc:	f000 f874 	bl	800c3e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <vPortFree+0xc0>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3301      	adds	r3, #1
 800c306:	4a06      	ldr	r2, [pc, #24]	; (800c320 <vPortFree+0xc0>)
 800c308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c30a:	f7fe f975 	bl	800a5f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c30e:	bf00      	nop
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20005004 	.word	0x20005004
 800c31c:	20004ff4 	.word	0x20004ff4
 800c320:	20005000 	.word	0x20005000

0800c324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c32a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c330:	4b27      	ldr	r3, [pc, #156]	; (800c3d0 <prvHeapInit+0xac>)
 800c332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00c      	beq.n	800c358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3307      	adds	r3, #7
 800c342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f023 0307 	bic.w	r3, r3, #7
 800c34a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	4a1f      	ldr	r2, [pc, #124]	; (800c3d0 <prvHeapInit+0xac>)
 800c354:	4413      	add	r3, r2
 800c356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c35c:	4a1d      	ldr	r2, [pc, #116]	; (800c3d4 <prvHeapInit+0xb0>)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c362:	4b1c      	ldr	r3, [pc, #112]	; (800c3d4 <prvHeapInit+0xb0>)
 800c364:	2200      	movs	r2, #0
 800c366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	4413      	add	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c370:	2208      	movs	r2, #8
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f023 0307 	bic.w	r3, r3, #7
 800c37e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4a15      	ldr	r2, [pc, #84]	; (800c3d8 <prvHeapInit+0xb4>)
 800c384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c386:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <prvHeapInit+0xb4>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2200      	movs	r2, #0
 800c38c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c38e:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <prvHeapInit+0xb4>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3a4:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <prvHeapInit+0xb4>)
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a0a      	ldr	r2, [pc, #40]	; (800c3dc <prvHeapInit+0xb8>)
 800c3b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	4a09      	ldr	r2, [pc, #36]	; (800c3e0 <prvHeapInit+0xbc>)
 800c3ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3bc:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <prvHeapInit+0xc0>)
 800c3be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3c2:	601a      	str	r2, [r3, #0]
}
 800c3c4:	bf00      	nop
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	200013e8 	.word	0x200013e8
 800c3d4:	20004fe8 	.word	0x20004fe8
 800c3d8:	20004ff0 	.word	0x20004ff0
 800c3dc:	20004ff8 	.word	0x20004ff8
 800c3e0:	20004ff4 	.word	0x20004ff4
 800c3e4:	20005004 	.word	0x20005004

0800c3e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3f0:	4b28      	ldr	r3, [pc, #160]	; (800c494 <prvInsertBlockIntoFreeList+0xac>)
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	e002      	b.n	800c3fc <prvInsertBlockIntoFreeList+0x14>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	429a      	cmp	r2, r3
 800c404:	d8f7      	bhi.n	800c3f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	4413      	add	r3, r2
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	429a      	cmp	r2, r3
 800c416:	d108      	bne.n	800c42a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	441a      	add	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	441a      	add	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d118      	bne.n	800c470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	4b15      	ldr	r3, [pc, #84]	; (800c498 <prvInsertBlockIntoFreeList+0xb0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	429a      	cmp	r2, r3
 800c448:	d00d      	beq.n	800c466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	441a      	add	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	e008      	b.n	800c478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <prvInsertBlockIntoFreeList+0xb0>)
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	e003      	b.n	800c478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d002      	beq.n	800c486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c486:	bf00      	nop
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	20004fe8 	.word	0x20004fe8
 800c498:	20004ff0 	.word	0x20004ff0

0800c49c <findslot>:
 800c49c:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <findslot+0x2c>)
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	b118      	cbz	r0, 800c4ae <findslot+0x12>
 800c4a6:	6983      	ldr	r3, [r0, #24]
 800c4a8:	b90b      	cbnz	r3, 800c4ae <findslot+0x12>
 800c4aa:	f000 faf7 	bl	800ca9c <__sinit>
 800c4ae:	2c13      	cmp	r4, #19
 800c4b0:	d807      	bhi.n	800c4c2 <findslot+0x26>
 800c4b2:	4806      	ldr	r0, [pc, #24]	; (800c4cc <findslot+0x30>)
 800c4b4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800c4b8:	3201      	adds	r2, #1
 800c4ba:	d002      	beq.n	800c4c2 <findslot+0x26>
 800c4bc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800c4c0:	bd10      	pop	{r4, pc}
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	e7fc      	b.n	800c4c0 <findslot+0x24>
 800c4c6:	bf00      	nop
 800c4c8:	20000098 	.word	0x20000098
 800c4cc:	20005014 	.word	0x20005014

0800c4d0 <error>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	f000 fa84 	bl	800c9e0 <__errno>
 800c4d8:	2613      	movs	r6, #19
 800c4da:	4605      	mov	r5, r0
 800c4dc:	2700      	movs	r7, #0
 800c4de:	4630      	mov	r0, r6
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	beab      	bkpt	0x00ab
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	602e      	str	r6, [r5, #0]
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4ec <checkerror>:
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d101      	bne.n	800c4f4 <checkerror+0x8>
 800c4f0:	f7ff bfee 	b.w	800c4d0 <error>
 800c4f4:	4770      	bx	lr

0800c4f6 <_swiread>:
 800c4f6:	b530      	push	{r4, r5, lr}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c4fe:	9203      	str	r2, [sp, #12]
 800c500:	2406      	movs	r4, #6
 800c502:	ad01      	add	r5, sp, #4
 800c504:	4620      	mov	r0, r4
 800c506:	4629      	mov	r1, r5
 800c508:	beab      	bkpt	0x00ab
 800c50a:	4604      	mov	r4, r0
 800c50c:	4620      	mov	r0, r4
 800c50e:	f7ff ffed 	bl	800c4ec <checkerror>
 800c512:	b005      	add	sp, #20
 800c514:	bd30      	pop	{r4, r5, pc}

0800c516 <_read>:
 800c516:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c518:	4615      	mov	r5, r2
 800c51a:	9101      	str	r1, [sp, #4]
 800c51c:	f7ff ffbe 	bl	800c49c <findslot>
 800c520:	9901      	ldr	r1, [sp, #4]
 800c522:	4604      	mov	r4, r0
 800c524:	b938      	cbnz	r0, 800c536 <_read+0x20>
 800c526:	f000 fa5b 	bl	800c9e0 <__errno>
 800c52a:	2309      	movs	r3, #9
 800c52c:	6003      	str	r3, [r0, #0]
 800c52e:	f04f 30ff 	mov.w	r0, #4294967295
 800c532:	b003      	add	sp, #12
 800c534:	bd30      	pop	{r4, r5, pc}
 800c536:	6800      	ldr	r0, [r0, #0]
 800c538:	462a      	mov	r2, r5
 800c53a:	f7ff ffdc 	bl	800c4f6 <_swiread>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d0f7      	beq.n	800c532 <_read+0x1c>
 800c542:	6863      	ldr	r3, [r4, #4]
 800c544:	1a2a      	subs	r2, r5, r0
 800c546:	4413      	add	r3, r2
 800c548:	6063      	str	r3, [r4, #4]
 800c54a:	4610      	mov	r0, r2
 800c54c:	e7f1      	b.n	800c532 <_read+0x1c>

0800c54e <_swilseek>:
 800c54e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c550:	460c      	mov	r4, r1
 800c552:	4616      	mov	r6, r2
 800c554:	f7ff ffa2 	bl	800c49c <findslot>
 800c558:	4605      	mov	r5, r0
 800c55a:	b940      	cbnz	r0, 800c56e <_swilseek+0x20>
 800c55c:	f000 fa40 	bl	800c9e0 <__errno>
 800c560:	2309      	movs	r3, #9
 800c562:	6003      	str	r3, [r0, #0]
 800c564:	f04f 34ff 	mov.w	r4, #4294967295
 800c568:	4620      	mov	r0, r4
 800c56a:	b003      	add	sp, #12
 800c56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56e:	2e02      	cmp	r6, #2
 800c570:	d903      	bls.n	800c57a <_swilseek+0x2c>
 800c572:	f000 fa35 	bl	800c9e0 <__errno>
 800c576:	2316      	movs	r3, #22
 800c578:	e7f3      	b.n	800c562 <_swilseek+0x14>
 800c57a:	2e01      	cmp	r6, #1
 800c57c:	d112      	bne.n	800c5a4 <_swilseek+0x56>
 800c57e:	6843      	ldr	r3, [r0, #4]
 800c580:	18e4      	adds	r4, r4, r3
 800c582:	d4f6      	bmi.n	800c572 <_swilseek+0x24>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	260a      	movs	r6, #10
 800c588:	e9cd 3400 	strd	r3, r4, [sp]
 800c58c:	466f      	mov	r7, sp
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	beab      	bkpt	0x00ab
 800c594:	4606      	mov	r6, r0
 800c596:	4630      	mov	r0, r6
 800c598:	f7ff ffa8 	bl	800c4ec <checkerror>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	dbe1      	blt.n	800c564 <_swilseek+0x16>
 800c5a0:	606c      	str	r4, [r5, #4]
 800c5a2:	e7e1      	b.n	800c568 <_swilseek+0x1a>
 800c5a4:	2e02      	cmp	r6, #2
 800c5a6:	d1ed      	bne.n	800c584 <_swilseek+0x36>
 800c5a8:	6803      	ldr	r3, [r0, #0]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	260c      	movs	r6, #12
 800c5ae:	466f      	mov	r7, sp
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	beab      	bkpt	0x00ab
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff ff97 	bl	800c4ec <checkerror>
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	d0d0      	beq.n	800c564 <_swilseek+0x16>
 800c5c2:	4404      	add	r4, r0
 800c5c4:	e7de      	b.n	800c584 <_swilseek+0x36>

0800c5c6 <_lseek>:
 800c5c6:	f7ff bfc2 	b.w	800c54e <_swilseek>

0800c5ca <_swiwrite>:
 800c5ca:	b530      	push	{r4, r5, lr}
 800c5cc:	b085      	sub	sp, #20
 800c5ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c5d2:	9203      	str	r2, [sp, #12]
 800c5d4:	2405      	movs	r4, #5
 800c5d6:	ad01      	add	r5, sp, #4
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	beab      	bkpt	0x00ab
 800c5de:	4604      	mov	r4, r0
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f7ff ff83 	bl	800c4ec <checkerror>
 800c5e6:	b005      	add	sp, #20
 800c5e8:	bd30      	pop	{r4, r5, pc}

0800c5ea <_write>:
 800c5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	9101      	str	r1, [sp, #4]
 800c5f0:	f7ff ff54 	bl	800c49c <findslot>
 800c5f4:	9901      	ldr	r1, [sp, #4]
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	b930      	cbnz	r0, 800c608 <_write+0x1e>
 800c5fa:	f000 f9f1 	bl	800c9e0 <__errno>
 800c5fe:	2309      	movs	r3, #9
 800c600:	6003      	str	r3, [r0, #0]
 800c602:	f04f 30ff 	mov.w	r0, #4294967295
 800c606:	e012      	b.n	800c62e <_write+0x44>
 800c608:	6800      	ldr	r0, [r0, #0]
 800c60a:	462a      	mov	r2, r5
 800c60c:	f7ff ffdd 	bl	800c5ca <_swiwrite>
 800c610:	2800      	cmp	r0, #0
 800c612:	dbf6      	blt.n	800c602 <_write+0x18>
 800c614:	6862      	ldr	r2, [r4, #4]
 800c616:	1a2b      	subs	r3, r5, r0
 800c618:	441a      	add	r2, r3
 800c61a:	42a8      	cmp	r0, r5
 800c61c:	6062      	str	r2, [r4, #4]
 800c61e:	d105      	bne.n	800c62c <_write+0x42>
 800c620:	2000      	movs	r0, #0
 800c622:	b003      	add	sp, #12
 800c624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c628:	f7ff bf52 	b.w	800c4d0 <error>
 800c62c:	4618      	mov	r0, r3
 800c62e:	b003      	add	sp, #12
 800c630:	bd30      	pop	{r4, r5, pc}

0800c632 <_swiclose>:
 800c632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c634:	2402      	movs	r4, #2
 800c636:	9001      	str	r0, [sp, #4]
 800c638:	ad01      	add	r5, sp, #4
 800c63a:	4620      	mov	r0, r4
 800c63c:	4629      	mov	r1, r5
 800c63e:	beab      	bkpt	0x00ab
 800c640:	4604      	mov	r4, r0
 800c642:	4620      	mov	r0, r4
 800c644:	f7ff ff52 	bl	800c4ec <checkerror>
 800c648:	b003      	add	sp, #12
 800c64a:	bd30      	pop	{r4, r5, pc}

0800c64c <_close>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4605      	mov	r5, r0
 800c650:	f7ff ff24 	bl	800c49c <findslot>
 800c654:	4604      	mov	r4, r0
 800c656:	b930      	cbnz	r0, 800c666 <_close+0x1a>
 800c658:	f000 f9c2 	bl	800c9e0 <__errno>
 800c65c:	2309      	movs	r3, #9
 800c65e:	6003      	str	r3, [r0, #0]
 800c660:	f04f 30ff 	mov.w	r0, #4294967295
 800c664:	bd38      	pop	{r3, r4, r5, pc}
 800c666:	3d01      	subs	r5, #1
 800c668:	2d01      	cmp	r5, #1
 800c66a:	d809      	bhi.n	800c680 <_close+0x34>
 800c66c:	4b09      	ldr	r3, [pc, #36]	; (800c694 <_close+0x48>)
 800c66e:	689a      	ldr	r2, [r3, #8]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	429a      	cmp	r2, r3
 800c674:	d104      	bne.n	800c680 <_close+0x34>
 800c676:	f04f 33ff 	mov.w	r3, #4294967295
 800c67a:	6003      	str	r3, [r0, #0]
 800c67c:	2000      	movs	r0, #0
 800c67e:	e7f1      	b.n	800c664 <_close+0x18>
 800c680:	6820      	ldr	r0, [r4, #0]
 800c682:	f7ff ffd6 	bl	800c632 <_swiclose>
 800c686:	2800      	cmp	r0, #0
 800c688:	d1ec      	bne.n	800c664 <_close+0x18>
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
 800c68e:	6023      	str	r3, [r4, #0]
 800c690:	e7e8      	b.n	800c664 <_close+0x18>
 800c692:	bf00      	nop
 800c694:	20005014 	.word	0x20005014

0800c698 <_swistat>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	460c      	mov	r4, r1
 800c69c:	f7ff fefe 	bl	800c49c <findslot>
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	b930      	cbnz	r0, 800c6b2 <_swistat+0x1a>
 800c6a4:	f000 f99c 	bl	800c9e0 <__errno>
 800c6a8:	2309      	movs	r3, #9
 800c6aa:	6003      	str	r3, [r0, #0]
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c6b8:	6063      	str	r3, [r4, #4]
 800c6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6be:	64a3      	str	r3, [r4, #72]	; 0x48
 800c6c0:	260c      	movs	r6, #12
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	beab      	bkpt	0x00ab
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f7ff ff0e 	bl	800c4ec <checkerror>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	bf1c      	itt	ne
 800c6d4:	6120      	strne	r0, [r4, #16]
 800c6d6:	2000      	movne	r0, #0
 800c6d8:	e7ea      	b.n	800c6b0 <_swistat+0x18>

0800c6da <_fstat>:
 800c6da:	460b      	mov	r3, r1
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	2100      	movs	r1, #0
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	2258      	movs	r2, #88	; 0x58
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 faac 	bl	800cc42 <memset>
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6f2:	f7ff bfd1 	b.w	800c698 <_swistat>

0800c6f6 <_stat>:
 800c6f6:	b538      	push	{r3, r4, r5, lr}
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	2258      	movs	r2, #88	; 0x58
 800c6fe:	2100      	movs	r1, #0
 800c700:	4628      	mov	r0, r5
 800c702:	f000 fa9e 	bl	800cc42 <memset>
 800c706:	4620      	mov	r0, r4
 800c708:	2100      	movs	r1, #0
 800c70a:	f000 f811 	bl	800c730 <_swiopen>
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	4604      	mov	r4, r0
 800c712:	d00b      	beq.n	800c72c <_stat+0x36>
 800c714:	686b      	ldr	r3, [r5, #4]
 800c716:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c71a:	606b      	str	r3, [r5, #4]
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7ff ffbb 	bl	800c698 <_swistat>
 800c722:	4605      	mov	r5, r0
 800c724:	4620      	mov	r0, r4
 800c726:	f7ff ff91 	bl	800c64c <_close>
 800c72a:	462c      	mov	r4, r5
 800c72c:	4620      	mov	r0, r4
 800c72e:	bd38      	pop	{r3, r4, r5, pc}

0800c730 <_swiopen>:
 800c730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c734:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800c7e0 <_swiopen+0xb0>
 800c738:	b097      	sub	sp, #92	; 0x5c
 800c73a:	4607      	mov	r7, r0
 800c73c:	460e      	mov	r6, r1
 800c73e:	2500      	movs	r5, #0
 800c740:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800c744:	1c61      	adds	r1, r4, #1
 800c746:	d037      	beq.n	800c7b8 <_swiopen+0x88>
 800c748:	3501      	adds	r5, #1
 800c74a:	2d14      	cmp	r5, #20
 800c74c:	d1f8      	bne.n	800c740 <_swiopen+0x10>
 800c74e:	f000 f947 	bl	800c9e0 <__errno>
 800c752:	2318      	movs	r3, #24
 800c754:	6003      	str	r3, [r0, #0]
 800c756:	f04f 34ff 	mov.w	r4, #4294967295
 800c75a:	e03d      	b.n	800c7d8 <_swiopen+0xa8>
 800c75c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800c760:	f240 6301 	movw	r3, #1537	; 0x601
 800c764:	07b2      	lsls	r2, r6, #30
 800c766:	bf48      	it	mi
 800c768:	f044 0402 	orrmi.w	r4, r4, #2
 800c76c:	421e      	tst	r6, r3
 800c76e:	bf18      	it	ne
 800c770:	f044 0404 	orrne.w	r4, r4, #4
 800c774:	0733      	lsls	r3, r6, #28
 800c776:	bf48      	it	mi
 800c778:	f024 0404 	bicmi.w	r4, r4, #4
 800c77c:	4638      	mov	r0, r7
 800c77e:	bf48      	it	mi
 800c780:	f044 0408 	orrmi.w	r4, r4, #8
 800c784:	9700      	str	r7, [sp, #0]
 800c786:	f7f3 fd23 	bl	80001d0 <strlen>
 800c78a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c78e:	2401      	movs	r4, #1
 800c790:	4620      	mov	r0, r4
 800c792:	4649      	mov	r1, r9
 800c794:	beab      	bkpt	0x00ab
 800c796:	4604      	mov	r4, r0
 800c798:	2c00      	cmp	r4, #0
 800c79a:	db08      	blt.n	800c7ae <_swiopen+0x7e>
 800c79c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800c7a0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f8c8 3004 	str.w	r3, [r8, #4]
 800c7aa:	462c      	mov	r4, r5
 800c7ac:	e014      	b.n	800c7d8 <_swiopen+0xa8>
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7ff fe8e 	bl	800c4d0 <error>
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	e00f      	b.n	800c7d8 <_swiopen+0xa8>
 800c7b8:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800c7bc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c7c0:	46e9      	mov	r9, sp
 800c7c2:	d1cb      	bne.n	800c75c <_swiopen+0x2c>
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	f7ff ff95 	bl	800c6f6 <_stat>
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	d0c5      	beq.n	800c75c <_swiopen+0x2c>
 800c7d0:	f000 f906 	bl	800c9e0 <__errno>
 800c7d4:	2311      	movs	r3, #17
 800c7d6:	6003      	str	r3, [r0, #0]
 800c7d8:	4620      	mov	r0, r4
 800c7da:	b017      	add	sp, #92	; 0x5c
 800c7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e0:	20005014 	.word	0x20005014

0800c7e4 <_get_semihosting_exts>:
 800c7e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	460f      	mov	r7, r1
 800c7ec:	482a      	ldr	r0, [pc, #168]	; (800c898 <_get_semihosting_exts+0xb4>)
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	4615      	mov	r5, r2
 800c7f2:	f7ff ff9d 	bl	800c730 <_swiopen>
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f000 fa20 	bl	800cc42 <memset>
 800c802:	1c63      	adds	r3, r4, #1
 800c804:	d016      	beq.n	800c834 <_get_semihosting_exts+0x50>
 800c806:	4620      	mov	r0, r4
 800c808:	f7ff fe48 	bl	800c49c <findslot>
 800c80c:	f04f 090c 	mov.w	r9, #12
 800c810:	4680      	mov	r8, r0
 800c812:	4648      	mov	r0, r9
 800c814:	4641      	mov	r1, r8
 800c816:	beab      	bkpt	0x00ab
 800c818:	4680      	mov	r8, r0
 800c81a:	4640      	mov	r0, r8
 800c81c:	f7ff fe66 	bl	800c4ec <checkerror>
 800c820:	2803      	cmp	r0, #3
 800c822:	dd02      	ble.n	800c82a <_get_semihosting_exts+0x46>
 800c824:	1ec3      	subs	r3, r0, #3
 800c826:	42ab      	cmp	r3, r5
 800c828:	dc08      	bgt.n	800c83c <_get_semihosting_exts+0x58>
 800c82a:	4620      	mov	r0, r4
 800c82c:	f7ff ff0e 	bl	800c64c <_close>
 800c830:	f04f 34ff 	mov.w	r4, #4294967295
 800c834:	4620      	mov	r0, r4
 800c836:	b003      	add	sp, #12
 800c838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c83c:	2204      	movs	r2, #4
 800c83e:	eb0d 0102 	add.w	r1, sp, r2
 800c842:	4620      	mov	r0, r4
 800c844:	f7ff fe67 	bl	800c516 <_read>
 800c848:	2803      	cmp	r0, #3
 800c84a:	ddee      	ble.n	800c82a <_get_semihosting_exts+0x46>
 800c84c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c850:	2b53      	cmp	r3, #83	; 0x53
 800c852:	d1ea      	bne.n	800c82a <_get_semihosting_exts+0x46>
 800c854:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c858:	2b48      	cmp	r3, #72	; 0x48
 800c85a:	d1e6      	bne.n	800c82a <_get_semihosting_exts+0x46>
 800c85c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c860:	2b46      	cmp	r3, #70	; 0x46
 800c862:	d1e2      	bne.n	800c82a <_get_semihosting_exts+0x46>
 800c864:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c868:	2b42      	cmp	r3, #66	; 0x42
 800c86a:	d1de      	bne.n	800c82a <_get_semihosting_exts+0x46>
 800c86c:	2201      	movs	r2, #1
 800c86e:	4639      	mov	r1, r7
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff fe6c 	bl	800c54e <_swilseek>
 800c876:	2800      	cmp	r0, #0
 800c878:	dbd7      	blt.n	800c82a <_get_semihosting_exts+0x46>
 800c87a:	462a      	mov	r2, r5
 800c87c:	4631      	mov	r1, r6
 800c87e:	4620      	mov	r0, r4
 800c880:	f7ff fe49 	bl	800c516 <_read>
 800c884:	4605      	mov	r5, r0
 800c886:	4620      	mov	r0, r4
 800c888:	f7ff fee0 	bl	800c64c <_close>
 800c88c:	4628      	mov	r0, r5
 800c88e:	f7ff fe2d 	bl	800c4ec <checkerror>
 800c892:	4604      	mov	r4, r0
 800c894:	e7ce      	b.n	800c834 <_get_semihosting_exts+0x50>
 800c896:	bf00      	nop
 800c898:	0800f82c 	.word	0x0800f82c

0800c89c <initialise_semihosting_exts>:
 800c89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c89e:	4d0a      	ldr	r5, [pc, #40]	; (800c8c8 <initialise_semihosting_exts+0x2c>)
 800c8a0:	4c0a      	ldr	r4, [pc, #40]	; (800c8cc <initialise_semihosting_exts+0x30>)
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	a801      	add	r0, sp, #4
 800c8a8:	6029      	str	r1, [r5, #0]
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	f7ff ff9a 	bl	800c7e4 <_get_semihosting_exts>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	dd07      	ble.n	800c8c4 <initialise_semihosting_exts+0x28>
 800c8b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c8b8:	f003 0201 	and.w	r2, r3, #1
 800c8bc:	f003 0302 	and.w	r3, r3, #2
 800c8c0:	602a      	str	r2, [r5, #0]
 800c8c2:	6023      	str	r3, [r4, #0]
 800c8c4:	b003      	add	sp, #12
 800c8c6:	bd30      	pop	{r4, r5, pc}
 800c8c8:	20000090 	.word	0x20000090
 800c8cc:	20000094 	.word	0x20000094

0800c8d0 <_has_ext_stdout_stderr>:
 800c8d0:	b510      	push	{r4, lr}
 800c8d2:	4c04      	ldr	r4, [pc, #16]	; (800c8e4 <_has_ext_stdout_stderr+0x14>)
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	da01      	bge.n	800c8de <_has_ext_stdout_stderr+0xe>
 800c8da:	f7ff ffdf 	bl	800c89c <initialise_semihosting_exts>
 800c8de:	6820      	ldr	r0, [r4, #0]
 800c8e0:	bd10      	pop	{r4, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20000094 	.word	0x20000094

0800c8e8 <initialise_monitor_handles>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	b085      	sub	sp, #20
 800c8ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800c9a0 <initialise_monitor_handles+0xb8>
 800c8f2:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	2400      	movs	r4, #0
 800c8fa:	9303      	str	r3, [sp, #12]
 800c8fc:	af01      	add	r7, sp, #4
 800c8fe:	9402      	str	r4, [sp, #8]
 800c900:	2501      	movs	r5, #1
 800c902:	4628      	mov	r0, r5
 800c904:	4639      	mov	r1, r7
 800c906:	beab      	bkpt	0x00ab
 800c908:	4605      	mov	r5, r0
 800c90a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800c9a4 <initialise_monitor_handles+0xbc>
 800c90e:	4623      	mov	r3, r4
 800c910:	4c20      	ldr	r4, [pc, #128]	; (800c994 <initialise_monitor_handles+0xac>)
 800c912:	f8c8 5000 	str.w	r5, [r8]
 800c916:	f04f 32ff 	mov.w	r2, #4294967295
 800c91a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800c91e:	3301      	adds	r3, #1
 800c920:	2b14      	cmp	r3, #20
 800c922:	d1fa      	bne.n	800c91a <initialise_monitor_handles+0x32>
 800c924:	f7ff ffd4 	bl	800c8d0 <_has_ext_stdout_stderr>
 800c928:	4d1b      	ldr	r5, [pc, #108]	; (800c998 <initialise_monitor_handles+0xb0>)
 800c92a:	b1d0      	cbz	r0, 800c962 <initialise_monitor_handles+0x7a>
 800c92c:	f04f 0a03 	mov.w	sl, #3
 800c930:	2304      	movs	r3, #4
 800c932:	f8cd 9004 	str.w	r9, [sp, #4]
 800c936:	2601      	movs	r6, #1
 800c938:	f8cd a00c 	str.w	sl, [sp, #12]
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	4630      	mov	r0, r6
 800c940:	4639      	mov	r1, r7
 800c942:	beab      	bkpt	0x00ab
 800c944:	4683      	mov	fp, r0
 800c946:	4b15      	ldr	r3, [pc, #84]	; (800c99c <initialise_monitor_handles+0xb4>)
 800c948:	f8cd 9004 	str.w	r9, [sp, #4]
 800c94c:	f8c3 b000 	str.w	fp, [r3]
 800c950:	2308      	movs	r3, #8
 800c952:	f8cd a00c 	str.w	sl, [sp, #12]
 800c956:	9302      	str	r3, [sp, #8]
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	beab      	bkpt	0x00ab
 800c95e:	4606      	mov	r6, r0
 800c960:	602e      	str	r6, [r5, #0]
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	3301      	adds	r3, #1
 800c966:	bf02      	ittt	eq
 800c968:	4b0c      	ldreq	r3, [pc, #48]	; (800c99c <initialise_monitor_handles+0xb4>)
 800c96a:	681b      	ldreq	r3, [r3, #0]
 800c96c:	602b      	streq	r3, [r5, #0]
 800c96e:	2600      	movs	r6, #0
 800c970:	f8d8 3000 	ldr.w	r3, [r8]
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	6066      	str	r6, [r4, #4]
 800c978:	f7ff ffaa 	bl	800c8d0 <_has_ext_stdout_stderr>
 800c97c:	b130      	cbz	r0, 800c98c <initialise_monitor_handles+0xa4>
 800c97e:	4b07      	ldr	r3, [pc, #28]	; (800c99c <initialise_monitor_handles+0xb4>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800c98c:	b005      	add	sp, #20
 800c98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c992:	bf00      	nop
 800c994:	20005014 	.word	0x20005014
 800c998:	20005008 	.word	0x20005008
 800c99c:	20005010 	.word	0x20005010
 800c9a0:	0800f842 	.word	0x0800f842
 800c9a4:	2000500c 	.word	0x2000500c

0800c9a8 <_isatty>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	f7ff fd77 	bl	800c49c <findslot>
 800c9ae:	2509      	movs	r5, #9
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	b920      	cbnz	r0, 800c9be <_isatty+0x16>
 800c9b4:	f000 f814 	bl	800c9e0 <__errno>
 800c9b8:	6005      	str	r5, [r0, #0]
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	bd70      	pop	{r4, r5, r6, pc}
 800c9be:	4628      	mov	r0, r5
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	beab      	bkpt	0x00ab
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	2c01      	cmp	r4, #1
 800c9c8:	d0f7      	beq.n	800c9ba <_isatty+0x12>
 800c9ca:	f000 f809 	bl	800c9e0 <__errno>
 800c9ce:	2400      	movs	r4, #0
 800c9d0:	4605      	mov	r5, r0
 800c9d2:	2613      	movs	r6, #19
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	beab      	bkpt	0x00ab
 800c9da:	4606      	mov	r6, r0
 800c9dc:	602e      	str	r6, [r5, #0]
 800c9de:	e7ec      	b.n	800c9ba <_isatty+0x12>

0800c9e0 <__errno>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	; (800c9e8 <__errno+0x8>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20000098 	.word	0x20000098

0800c9ec <std>:
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9fa:	6083      	str	r3, [r0, #8]
 800c9fc:	8181      	strh	r1, [r0, #12]
 800c9fe:	6643      	str	r3, [r0, #100]	; 0x64
 800ca00:	81c2      	strh	r2, [r0, #14]
 800ca02:	6183      	str	r3, [r0, #24]
 800ca04:	4619      	mov	r1, r3
 800ca06:	2208      	movs	r2, #8
 800ca08:	305c      	adds	r0, #92	; 0x5c
 800ca0a:	f000 f91a 	bl	800cc42 <memset>
 800ca0e:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <std+0x38>)
 800ca10:	6263      	str	r3, [r4, #36]	; 0x24
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <std+0x3c>)
 800ca14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca16:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <std+0x40>)
 800ca18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca1a:	4b05      	ldr	r3, [pc, #20]	; (800ca30 <std+0x44>)
 800ca1c:	6224      	str	r4, [r4, #32]
 800ca1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca20:	bd10      	pop	{r4, pc}
 800ca22:	bf00      	nop
 800ca24:	0800ce89 	.word	0x0800ce89
 800ca28:	0800ceab 	.word	0x0800ceab
 800ca2c:	0800cee3 	.word	0x0800cee3
 800ca30:	0800cf07 	.word	0x0800cf07

0800ca34 <_cleanup_r>:
 800ca34:	4901      	ldr	r1, [pc, #4]	; (800ca3c <_cleanup_r+0x8>)
 800ca36:	f000 b8af 	b.w	800cb98 <_fwalk_reent>
 800ca3a:	bf00      	nop
 800ca3c:	0800d1e1 	.word	0x0800d1e1

0800ca40 <__sfmoreglue>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	2268      	movs	r2, #104	; 0x68
 800ca44:	1e4d      	subs	r5, r1, #1
 800ca46:	4355      	muls	r5, r2
 800ca48:	460e      	mov	r6, r1
 800ca4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca4e:	f000 f921 	bl	800cc94 <_malloc_r>
 800ca52:	4604      	mov	r4, r0
 800ca54:	b140      	cbz	r0, 800ca68 <__sfmoreglue+0x28>
 800ca56:	2100      	movs	r1, #0
 800ca58:	e9c0 1600 	strd	r1, r6, [r0]
 800ca5c:	300c      	adds	r0, #12
 800ca5e:	60a0      	str	r0, [r4, #8]
 800ca60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca64:	f000 f8ed 	bl	800cc42 <memset>
 800ca68:	4620      	mov	r0, r4
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}

0800ca6c <__sfp_lock_acquire>:
 800ca6c:	4801      	ldr	r0, [pc, #4]	; (800ca74 <__sfp_lock_acquire+0x8>)
 800ca6e:	f000 b8d8 	b.w	800cc22 <__retarget_lock_acquire_recursive>
 800ca72:	bf00      	nop
 800ca74:	200050b5 	.word	0x200050b5

0800ca78 <__sfp_lock_release>:
 800ca78:	4801      	ldr	r0, [pc, #4]	; (800ca80 <__sfp_lock_release+0x8>)
 800ca7a:	f000 b8d3 	b.w	800cc24 <__retarget_lock_release_recursive>
 800ca7e:	bf00      	nop
 800ca80:	200050b5 	.word	0x200050b5

0800ca84 <__sinit_lock_acquire>:
 800ca84:	4801      	ldr	r0, [pc, #4]	; (800ca8c <__sinit_lock_acquire+0x8>)
 800ca86:	f000 b8cc 	b.w	800cc22 <__retarget_lock_acquire_recursive>
 800ca8a:	bf00      	nop
 800ca8c:	200050b6 	.word	0x200050b6

0800ca90 <__sinit_lock_release>:
 800ca90:	4801      	ldr	r0, [pc, #4]	; (800ca98 <__sinit_lock_release+0x8>)
 800ca92:	f000 b8c7 	b.w	800cc24 <__retarget_lock_release_recursive>
 800ca96:	bf00      	nop
 800ca98:	200050b6 	.word	0x200050b6

0800ca9c <__sinit>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4604      	mov	r4, r0
 800caa0:	f7ff fff0 	bl	800ca84 <__sinit_lock_acquire>
 800caa4:	69a3      	ldr	r3, [r4, #24]
 800caa6:	b11b      	cbz	r3, 800cab0 <__sinit+0x14>
 800caa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caac:	f7ff bff0 	b.w	800ca90 <__sinit_lock_release>
 800cab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cab4:	6523      	str	r3, [r4, #80]	; 0x50
 800cab6:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <__sinit+0x68>)
 800cab8:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <__sinit+0x6c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	bf04      	itt	eq
 800cac2:	2301      	moveq	r3, #1
 800cac4:	61a3      	streq	r3, [r4, #24]
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 f820 	bl	800cb0c <__sfp>
 800cacc:	6060      	str	r0, [r4, #4]
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 f81c 	bl	800cb0c <__sfp>
 800cad4:	60a0      	str	r0, [r4, #8]
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 f818 	bl	800cb0c <__sfp>
 800cadc:	2200      	movs	r2, #0
 800cade:	60e0      	str	r0, [r4, #12]
 800cae0:	2104      	movs	r1, #4
 800cae2:	6860      	ldr	r0, [r4, #4]
 800cae4:	f7ff ff82 	bl	800c9ec <std>
 800cae8:	68a0      	ldr	r0, [r4, #8]
 800caea:	2201      	movs	r2, #1
 800caec:	2109      	movs	r1, #9
 800caee:	f7ff ff7d 	bl	800c9ec <std>
 800caf2:	68e0      	ldr	r0, [r4, #12]
 800caf4:	2202      	movs	r2, #2
 800caf6:	2112      	movs	r1, #18
 800caf8:	f7ff ff78 	bl	800c9ec <std>
 800cafc:	2301      	movs	r3, #1
 800cafe:	61a3      	str	r3, [r4, #24]
 800cb00:	e7d2      	b.n	800caa8 <__sinit+0xc>
 800cb02:	bf00      	nop
 800cb04:	0800f8a8 	.word	0x0800f8a8
 800cb08:	0800ca35 	.word	0x0800ca35

0800cb0c <__sfp>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	4607      	mov	r7, r0
 800cb10:	f7ff ffac 	bl	800ca6c <__sfp_lock_acquire>
 800cb14:	4b1e      	ldr	r3, [pc, #120]	; (800cb90 <__sfp+0x84>)
 800cb16:	681e      	ldr	r6, [r3, #0]
 800cb18:	69b3      	ldr	r3, [r6, #24]
 800cb1a:	b913      	cbnz	r3, 800cb22 <__sfp+0x16>
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff ffbd 	bl	800ca9c <__sinit>
 800cb22:	3648      	adds	r6, #72	; 0x48
 800cb24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	d503      	bpl.n	800cb34 <__sfp+0x28>
 800cb2c:	6833      	ldr	r3, [r6, #0]
 800cb2e:	b30b      	cbz	r3, 800cb74 <__sfp+0x68>
 800cb30:	6836      	ldr	r6, [r6, #0]
 800cb32:	e7f7      	b.n	800cb24 <__sfp+0x18>
 800cb34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb38:	b9d5      	cbnz	r5, 800cb70 <__sfp+0x64>
 800cb3a:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <__sfp+0x88>)
 800cb3c:	60e3      	str	r3, [r4, #12]
 800cb3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb42:	6665      	str	r5, [r4, #100]	; 0x64
 800cb44:	f000 f86c 	bl	800cc20 <__retarget_lock_init_recursive>
 800cb48:	f7ff ff96 	bl	800ca78 <__sfp_lock_release>
 800cb4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb54:	6025      	str	r5, [r4, #0]
 800cb56:	61a5      	str	r5, [r4, #24]
 800cb58:	2208      	movs	r2, #8
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb60:	f000 f86f 	bl	800cc42 <memset>
 800cb64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb70:	3468      	adds	r4, #104	; 0x68
 800cb72:	e7d9      	b.n	800cb28 <__sfp+0x1c>
 800cb74:	2104      	movs	r1, #4
 800cb76:	4638      	mov	r0, r7
 800cb78:	f7ff ff62 	bl	800ca40 <__sfmoreglue>
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	6030      	str	r0, [r6, #0]
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d1d5      	bne.n	800cb30 <__sfp+0x24>
 800cb84:	f7ff ff78 	bl	800ca78 <__sfp_lock_release>
 800cb88:	230c      	movs	r3, #12
 800cb8a:	603b      	str	r3, [r7, #0]
 800cb8c:	e7ee      	b.n	800cb6c <__sfp+0x60>
 800cb8e:	bf00      	nop
 800cb90:	0800f8a8 	.word	0x0800f8a8
 800cb94:	ffff0001 	.word	0xffff0001

0800cb98 <_fwalk_reent>:
 800cb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb9c:	4606      	mov	r6, r0
 800cb9e:	4688      	mov	r8, r1
 800cba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cba4:	2700      	movs	r7, #0
 800cba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbaa:	f1b9 0901 	subs.w	r9, r9, #1
 800cbae:	d505      	bpl.n	800cbbc <_fwalk_reent+0x24>
 800cbb0:	6824      	ldr	r4, [r4, #0]
 800cbb2:	2c00      	cmp	r4, #0
 800cbb4:	d1f7      	bne.n	800cba6 <_fwalk_reent+0xe>
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbbc:	89ab      	ldrh	r3, [r5, #12]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d907      	bls.n	800cbd2 <_fwalk_reent+0x3a>
 800cbc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	d003      	beq.n	800cbd2 <_fwalk_reent+0x3a>
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4630      	mov	r0, r6
 800cbce:	47c0      	blx	r8
 800cbd0:	4307      	orrs	r7, r0
 800cbd2:	3568      	adds	r5, #104	; 0x68
 800cbd4:	e7e9      	b.n	800cbaa <_fwalk_reent+0x12>
	...

0800cbd8 <__libc_init_array>:
 800cbd8:	b570      	push	{r4, r5, r6, lr}
 800cbda:	4d0d      	ldr	r5, [pc, #52]	; (800cc10 <__libc_init_array+0x38>)
 800cbdc:	4c0d      	ldr	r4, [pc, #52]	; (800cc14 <__libc_init_array+0x3c>)
 800cbde:	1b64      	subs	r4, r4, r5
 800cbe0:	10a4      	asrs	r4, r4, #2
 800cbe2:	2600      	movs	r6, #0
 800cbe4:	42a6      	cmp	r6, r4
 800cbe6:	d109      	bne.n	800cbfc <__libc_init_array+0x24>
 800cbe8:	4d0b      	ldr	r5, [pc, #44]	; (800cc18 <__libc_init_array+0x40>)
 800cbea:	4c0c      	ldr	r4, [pc, #48]	; (800cc1c <__libc_init_array+0x44>)
 800cbec:	f000 fc38 	bl	800d460 <_init>
 800cbf0:	1b64      	subs	r4, r4, r5
 800cbf2:	10a4      	asrs	r4, r4, #2
 800cbf4:	2600      	movs	r6, #0
 800cbf6:	42a6      	cmp	r6, r4
 800cbf8:	d105      	bne.n	800cc06 <__libc_init_array+0x2e>
 800cbfa:	bd70      	pop	{r4, r5, r6, pc}
 800cbfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc00:	4798      	blx	r3
 800cc02:	3601      	adds	r6, #1
 800cc04:	e7ee      	b.n	800cbe4 <__libc_init_array+0xc>
 800cc06:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc0a:	4798      	blx	r3
 800cc0c:	3601      	adds	r6, #1
 800cc0e:	e7f2      	b.n	800cbf6 <__libc_init_array+0x1e>
 800cc10:	0800f8b4 	.word	0x0800f8b4
 800cc14:	0800f8b4 	.word	0x0800f8b4
 800cc18:	0800f8b4 	.word	0x0800f8b4
 800cc1c:	0800f8b8 	.word	0x0800f8b8

0800cc20 <__retarget_lock_init_recursive>:
 800cc20:	4770      	bx	lr

0800cc22 <__retarget_lock_acquire_recursive>:
 800cc22:	4770      	bx	lr

0800cc24 <__retarget_lock_release_recursive>:
 800cc24:	4770      	bx	lr

0800cc26 <memcpy>:
 800cc26:	440a      	add	r2, r1
 800cc28:	4291      	cmp	r1, r2
 800cc2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc2e:	d100      	bne.n	800cc32 <memcpy+0xc>
 800cc30:	4770      	bx	lr
 800cc32:	b510      	push	{r4, lr}
 800cc34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc3c:	4291      	cmp	r1, r2
 800cc3e:	d1f9      	bne.n	800cc34 <memcpy+0xe>
 800cc40:	bd10      	pop	{r4, pc}

0800cc42 <memset>:
 800cc42:	4402      	add	r2, r0
 800cc44:	4603      	mov	r3, r0
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d100      	bne.n	800cc4c <memset+0xa>
 800cc4a:	4770      	bx	lr
 800cc4c:	f803 1b01 	strb.w	r1, [r3], #1
 800cc50:	e7f9      	b.n	800cc46 <memset+0x4>
	...

0800cc54 <sbrk_aligned>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	4e0e      	ldr	r6, [pc, #56]	; (800cc90 <sbrk_aligned+0x3c>)
 800cc58:	460c      	mov	r4, r1
 800cc5a:	6831      	ldr	r1, [r6, #0]
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	b911      	cbnz	r1, 800cc66 <sbrk_aligned+0x12>
 800cc60:	f000 f902 	bl	800ce68 <_sbrk_r>
 800cc64:	6030      	str	r0, [r6, #0]
 800cc66:	4621      	mov	r1, r4
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f000 f8fd 	bl	800ce68 <_sbrk_r>
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	d00a      	beq.n	800cc88 <sbrk_aligned+0x34>
 800cc72:	1cc4      	adds	r4, r0, #3
 800cc74:	f024 0403 	bic.w	r4, r4, #3
 800cc78:	42a0      	cmp	r0, r4
 800cc7a:	d007      	beq.n	800cc8c <sbrk_aligned+0x38>
 800cc7c:	1a21      	subs	r1, r4, r0
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 f8f2 	bl	800ce68 <_sbrk_r>
 800cc84:	3001      	adds	r0, #1
 800cc86:	d101      	bne.n	800cc8c <sbrk_aligned+0x38>
 800cc88:	f04f 34ff 	mov.w	r4, #4294967295
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	200050bc 	.word	0x200050bc

0800cc94 <_malloc_r>:
 800cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc98:	1ccd      	adds	r5, r1, #3
 800cc9a:	f025 0503 	bic.w	r5, r5, #3
 800cc9e:	3508      	adds	r5, #8
 800cca0:	2d0c      	cmp	r5, #12
 800cca2:	bf38      	it	cc
 800cca4:	250c      	movcc	r5, #12
 800cca6:	2d00      	cmp	r5, #0
 800cca8:	4607      	mov	r7, r0
 800ccaa:	db01      	blt.n	800ccb0 <_malloc_r+0x1c>
 800ccac:	42a9      	cmp	r1, r5
 800ccae:	d905      	bls.n	800ccbc <_malloc_r+0x28>
 800ccb0:	230c      	movs	r3, #12
 800ccb2:	603b      	str	r3, [r7, #0]
 800ccb4:	2600      	movs	r6, #0
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	4e2e      	ldr	r6, [pc, #184]	; (800cd78 <_malloc_r+0xe4>)
 800ccbe:	f000 fb43 	bl	800d348 <__malloc_lock>
 800ccc2:	6833      	ldr	r3, [r6, #0]
 800ccc4:	461c      	mov	r4, r3
 800ccc6:	bb34      	cbnz	r4, 800cd16 <_malloc_r+0x82>
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4638      	mov	r0, r7
 800cccc:	f7ff ffc2 	bl	800cc54 <sbrk_aligned>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	d14d      	bne.n	800cd72 <_malloc_r+0xde>
 800ccd6:	6834      	ldr	r4, [r6, #0]
 800ccd8:	4626      	mov	r6, r4
 800ccda:	2e00      	cmp	r6, #0
 800ccdc:	d140      	bne.n	800cd60 <_malloc_r+0xcc>
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	4631      	mov	r1, r6
 800cce2:	4638      	mov	r0, r7
 800cce4:	eb04 0803 	add.w	r8, r4, r3
 800cce8:	f000 f8be 	bl	800ce68 <_sbrk_r>
 800ccec:	4580      	cmp	r8, r0
 800ccee:	d13a      	bne.n	800cd66 <_malloc_r+0xd2>
 800ccf0:	6821      	ldr	r1, [r4, #0]
 800ccf2:	3503      	adds	r5, #3
 800ccf4:	1a6d      	subs	r5, r5, r1
 800ccf6:	f025 0503 	bic.w	r5, r5, #3
 800ccfa:	3508      	adds	r5, #8
 800ccfc:	2d0c      	cmp	r5, #12
 800ccfe:	bf38      	it	cc
 800cd00:	250c      	movcc	r5, #12
 800cd02:	4629      	mov	r1, r5
 800cd04:	4638      	mov	r0, r7
 800cd06:	f7ff ffa5 	bl	800cc54 <sbrk_aligned>
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	d02b      	beq.n	800cd66 <_malloc_r+0xd2>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	442b      	add	r3, r5
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	e00e      	b.n	800cd34 <_malloc_r+0xa0>
 800cd16:	6822      	ldr	r2, [r4, #0]
 800cd18:	1b52      	subs	r2, r2, r5
 800cd1a:	d41e      	bmi.n	800cd5a <_malloc_r+0xc6>
 800cd1c:	2a0b      	cmp	r2, #11
 800cd1e:	d916      	bls.n	800cd4e <_malloc_r+0xba>
 800cd20:	1961      	adds	r1, r4, r5
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	6025      	str	r5, [r4, #0]
 800cd26:	bf18      	it	ne
 800cd28:	6059      	strne	r1, [r3, #4]
 800cd2a:	6863      	ldr	r3, [r4, #4]
 800cd2c:	bf08      	it	eq
 800cd2e:	6031      	streq	r1, [r6, #0]
 800cd30:	5162      	str	r2, [r4, r5]
 800cd32:	604b      	str	r3, [r1, #4]
 800cd34:	4638      	mov	r0, r7
 800cd36:	f104 060b 	add.w	r6, r4, #11
 800cd3a:	f000 fb0b 	bl	800d354 <__malloc_unlock>
 800cd3e:	f026 0607 	bic.w	r6, r6, #7
 800cd42:	1d23      	adds	r3, r4, #4
 800cd44:	1af2      	subs	r2, r6, r3
 800cd46:	d0b6      	beq.n	800ccb6 <_malloc_r+0x22>
 800cd48:	1b9b      	subs	r3, r3, r6
 800cd4a:	50a3      	str	r3, [r4, r2]
 800cd4c:	e7b3      	b.n	800ccb6 <_malloc_r+0x22>
 800cd4e:	6862      	ldr	r2, [r4, #4]
 800cd50:	42a3      	cmp	r3, r4
 800cd52:	bf0c      	ite	eq
 800cd54:	6032      	streq	r2, [r6, #0]
 800cd56:	605a      	strne	r2, [r3, #4]
 800cd58:	e7ec      	b.n	800cd34 <_malloc_r+0xa0>
 800cd5a:	4623      	mov	r3, r4
 800cd5c:	6864      	ldr	r4, [r4, #4]
 800cd5e:	e7b2      	b.n	800ccc6 <_malloc_r+0x32>
 800cd60:	4634      	mov	r4, r6
 800cd62:	6876      	ldr	r6, [r6, #4]
 800cd64:	e7b9      	b.n	800ccda <_malloc_r+0x46>
 800cd66:	230c      	movs	r3, #12
 800cd68:	603b      	str	r3, [r7, #0]
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	f000 faf2 	bl	800d354 <__malloc_unlock>
 800cd70:	e7a1      	b.n	800ccb6 <_malloc_r+0x22>
 800cd72:	6025      	str	r5, [r4, #0]
 800cd74:	e7de      	b.n	800cd34 <_malloc_r+0xa0>
 800cd76:	bf00      	nop
 800cd78:	200050b8 	.word	0x200050b8

0800cd7c <_puts_r>:
 800cd7c:	b570      	push	{r4, r5, r6, lr}
 800cd7e:	460e      	mov	r6, r1
 800cd80:	4605      	mov	r5, r0
 800cd82:	b118      	cbz	r0, 800cd8c <_puts_r+0x10>
 800cd84:	6983      	ldr	r3, [r0, #24]
 800cd86:	b90b      	cbnz	r3, 800cd8c <_puts_r+0x10>
 800cd88:	f7ff fe88 	bl	800ca9c <__sinit>
 800cd8c:	69ab      	ldr	r3, [r5, #24]
 800cd8e:	68ac      	ldr	r4, [r5, #8]
 800cd90:	b913      	cbnz	r3, 800cd98 <_puts_r+0x1c>
 800cd92:	4628      	mov	r0, r5
 800cd94:	f7ff fe82 	bl	800ca9c <__sinit>
 800cd98:	4b2c      	ldr	r3, [pc, #176]	; (800ce4c <_puts_r+0xd0>)
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	d120      	bne.n	800cde0 <_puts_r+0x64>
 800cd9e:	686c      	ldr	r4, [r5, #4]
 800cda0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda2:	07db      	lsls	r3, r3, #31
 800cda4:	d405      	bmi.n	800cdb2 <_puts_r+0x36>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	0598      	lsls	r0, r3, #22
 800cdaa:	d402      	bmi.n	800cdb2 <_puts_r+0x36>
 800cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdae:	f7ff ff38 	bl	800cc22 <__retarget_lock_acquire_recursive>
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	0719      	lsls	r1, r3, #28
 800cdb6:	d51d      	bpl.n	800cdf4 <_puts_r+0x78>
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	b1db      	cbz	r3, 800cdf4 <_puts_r+0x78>
 800cdbc:	3e01      	subs	r6, #1
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	60a3      	str	r3, [r4, #8]
 800cdc8:	bb39      	cbnz	r1, 800ce1a <_puts_r+0x9e>
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	da38      	bge.n	800ce40 <_puts_r+0xc4>
 800cdce:	4622      	mov	r2, r4
 800cdd0:	210a      	movs	r1, #10
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f000 f89c 	bl	800cf10 <__swbuf_r>
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d011      	beq.n	800ce00 <_puts_r+0x84>
 800cddc:	250a      	movs	r5, #10
 800cdde:	e011      	b.n	800ce04 <_puts_r+0x88>
 800cde0:	4b1b      	ldr	r3, [pc, #108]	; (800ce50 <_puts_r+0xd4>)
 800cde2:	429c      	cmp	r4, r3
 800cde4:	d101      	bne.n	800cdea <_puts_r+0x6e>
 800cde6:	68ac      	ldr	r4, [r5, #8]
 800cde8:	e7da      	b.n	800cda0 <_puts_r+0x24>
 800cdea:	4b1a      	ldr	r3, [pc, #104]	; (800ce54 <_puts_r+0xd8>)
 800cdec:	429c      	cmp	r4, r3
 800cdee:	bf08      	it	eq
 800cdf0:	68ec      	ldreq	r4, [r5, #12]
 800cdf2:	e7d5      	b.n	800cda0 <_puts_r+0x24>
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f000 f8ee 	bl	800cfd8 <__swsetup_r>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d0dd      	beq.n	800cdbc <_puts_r+0x40>
 800ce00:	f04f 35ff 	mov.w	r5, #4294967295
 800ce04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce06:	07da      	lsls	r2, r3, #31
 800ce08:	d405      	bmi.n	800ce16 <_puts_r+0x9a>
 800ce0a:	89a3      	ldrh	r3, [r4, #12]
 800ce0c:	059b      	lsls	r3, r3, #22
 800ce0e:	d402      	bmi.n	800ce16 <_puts_r+0x9a>
 800ce10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce12:	f7ff ff07 	bl	800cc24 <__retarget_lock_release_recursive>
 800ce16:	4628      	mov	r0, r5
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	da04      	bge.n	800ce28 <_puts_r+0xac>
 800ce1e:	69a2      	ldr	r2, [r4, #24]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	dc06      	bgt.n	800ce32 <_puts_r+0xb6>
 800ce24:	290a      	cmp	r1, #10
 800ce26:	d004      	beq.n	800ce32 <_puts_r+0xb6>
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	6022      	str	r2, [r4, #0]
 800ce2e:	7019      	strb	r1, [r3, #0]
 800ce30:	e7c5      	b.n	800cdbe <_puts_r+0x42>
 800ce32:	4622      	mov	r2, r4
 800ce34:	4628      	mov	r0, r5
 800ce36:	f000 f86b 	bl	800cf10 <__swbuf_r>
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d1bf      	bne.n	800cdbe <_puts_r+0x42>
 800ce3e:	e7df      	b.n	800ce00 <_puts_r+0x84>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	250a      	movs	r5, #10
 800ce44:	1c5a      	adds	r2, r3, #1
 800ce46:	6022      	str	r2, [r4, #0]
 800ce48:	701d      	strb	r5, [r3, #0]
 800ce4a:	e7db      	b.n	800ce04 <_puts_r+0x88>
 800ce4c:	0800f868 	.word	0x0800f868
 800ce50:	0800f888 	.word	0x0800f888
 800ce54:	0800f848 	.word	0x0800f848

0800ce58 <puts>:
 800ce58:	4b02      	ldr	r3, [pc, #8]	; (800ce64 <puts+0xc>)
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	6818      	ldr	r0, [r3, #0]
 800ce5e:	f7ff bf8d 	b.w	800cd7c <_puts_r>
 800ce62:	bf00      	nop
 800ce64:	20000098 	.word	0x20000098

0800ce68 <_sbrk_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4d06      	ldr	r5, [pc, #24]	; (800ce84 <_sbrk_r+0x1c>)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	4608      	mov	r0, r1
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	f7f5 f87c 	bl	8001f70 <_sbrk>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_sbrk_r+0x1a>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_sbrk_r+0x1a>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	200050c0 	.word	0x200050c0

0800ce88 <__sread>:
 800ce88:	b510      	push	{r4, lr}
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce90:	f000 fab2 	bl	800d3f8 <_read_r>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	bfab      	itete	ge
 800ce98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce9c:	181b      	addge	r3, r3, r0
 800ce9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cea2:	bfac      	ite	ge
 800cea4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cea6:	81a3      	strhlt	r3, [r4, #12]
 800cea8:	bd10      	pop	{r4, pc}

0800ceaa <__swrite>:
 800ceaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	461f      	mov	r7, r3
 800ceb0:	898b      	ldrh	r3, [r1, #12]
 800ceb2:	05db      	lsls	r3, r3, #23
 800ceb4:	4605      	mov	r5, r0
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	4616      	mov	r6, r2
 800ceba:	d505      	bpl.n	800cec8 <__swrite+0x1e>
 800cebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec0:	2302      	movs	r3, #2
 800cec2:	2200      	movs	r2, #0
 800cec4:	f000 f9c8 	bl	800d258 <_lseek_r>
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ced2:	81a3      	strh	r3, [r4, #12]
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	4628      	mov	r0, r5
 800ceda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cede:	f000 b869 	b.w	800cfb4 <_write_r>

0800cee2 <__sseek>:
 800cee2:	b510      	push	{r4, lr}
 800cee4:	460c      	mov	r4, r1
 800cee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceea:	f000 f9b5 	bl	800d258 <_lseek_r>
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	bf15      	itete	ne
 800cef4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cefa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cefe:	81a3      	strheq	r3, [r4, #12]
 800cf00:	bf18      	it	ne
 800cf02:	81a3      	strhne	r3, [r4, #12]
 800cf04:	bd10      	pop	{r4, pc}

0800cf06 <__sclose>:
 800cf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf0a:	f000 b8d3 	b.w	800d0b4 <_close_r>
	...

0800cf10 <__swbuf_r>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	460e      	mov	r6, r1
 800cf14:	4614      	mov	r4, r2
 800cf16:	4605      	mov	r5, r0
 800cf18:	b118      	cbz	r0, 800cf22 <__swbuf_r+0x12>
 800cf1a:	6983      	ldr	r3, [r0, #24]
 800cf1c:	b90b      	cbnz	r3, 800cf22 <__swbuf_r+0x12>
 800cf1e:	f7ff fdbd 	bl	800ca9c <__sinit>
 800cf22:	4b21      	ldr	r3, [pc, #132]	; (800cfa8 <__swbuf_r+0x98>)
 800cf24:	429c      	cmp	r4, r3
 800cf26:	d12b      	bne.n	800cf80 <__swbuf_r+0x70>
 800cf28:	686c      	ldr	r4, [r5, #4]
 800cf2a:	69a3      	ldr	r3, [r4, #24]
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	071a      	lsls	r2, r3, #28
 800cf32:	d52f      	bpl.n	800cf94 <__swbuf_r+0x84>
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	b36b      	cbz	r3, 800cf94 <__swbuf_r+0x84>
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	6820      	ldr	r0, [r4, #0]
 800cf3c:	1ac0      	subs	r0, r0, r3
 800cf3e:	6963      	ldr	r3, [r4, #20]
 800cf40:	b2f6      	uxtb	r6, r6
 800cf42:	4283      	cmp	r3, r0
 800cf44:	4637      	mov	r7, r6
 800cf46:	dc04      	bgt.n	800cf52 <__swbuf_r+0x42>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f000 f948 	bl	800d1e0 <_fflush_r>
 800cf50:	bb30      	cbnz	r0, 800cfa0 <__swbuf_r+0x90>
 800cf52:	68a3      	ldr	r3, [r4, #8]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	60a3      	str	r3, [r4, #8]
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	6022      	str	r2, [r4, #0]
 800cf5e:	701e      	strb	r6, [r3, #0]
 800cf60:	6963      	ldr	r3, [r4, #20]
 800cf62:	3001      	adds	r0, #1
 800cf64:	4283      	cmp	r3, r0
 800cf66:	d004      	beq.n	800cf72 <__swbuf_r+0x62>
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	07db      	lsls	r3, r3, #31
 800cf6c:	d506      	bpl.n	800cf7c <__swbuf_r+0x6c>
 800cf6e:	2e0a      	cmp	r6, #10
 800cf70:	d104      	bne.n	800cf7c <__swbuf_r+0x6c>
 800cf72:	4621      	mov	r1, r4
 800cf74:	4628      	mov	r0, r5
 800cf76:	f000 f933 	bl	800d1e0 <_fflush_r>
 800cf7a:	b988      	cbnz	r0, 800cfa0 <__swbuf_r+0x90>
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <__swbuf_r+0x9c>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	d101      	bne.n	800cf8a <__swbuf_r+0x7a>
 800cf86:	68ac      	ldr	r4, [r5, #8]
 800cf88:	e7cf      	b.n	800cf2a <__swbuf_r+0x1a>
 800cf8a:	4b09      	ldr	r3, [pc, #36]	; (800cfb0 <__swbuf_r+0xa0>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	bf08      	it	eq
 800cf90:	68ec      	ldreq	r4, [r5, #12]
 800cf92:	e7ca      	b.n	800cf2a <__swbuf_r+0x1a>
 800cf94:	4621      	mov	r1, r4
 800cf96:	4628      	mov	r0, r5
 800cf98:	f000 f81e 	bl	800cfd8 <__swsetup_r>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d0cb      	beq.n	800cf38 <__swbuf_r+0x28>
 800cfa0:	f04f 37ff 	mov.w	r7, #4294967295
 800cfa4:	e7ea      	b.n	800cf7c <__swbuf_r+0x6c>
 800cfa6:	bf00      	nop
 800cfa8:	0800f868 	.word	0x0800f868
 800cfac:	0800f888 	.word	0x0800f888
 800cfb0:	0800f848 	.word	0x0800f848

0800cfb4 <_write_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d07      	ldr	r5, [pc, #28]	; (800cfd4 <_write_r+0x20>)
 800cfb8:	4604      	mov	r4, r0
 800cfba:	4608      	mov	r0, r1
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	602a      	str	r2, [r5, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f7ff fb11 	bl	800c5ea <_write>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d102      	bne.n	800cfd2 <_write_r+0x1e>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	b103      	cbz	r3, 800cfd2 <_write_r+0x1e>
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	200050c0 	.word	0x200050c0

0800cfd8 <__swsetup_r>:
 800cfd8:	4b32      	ldr	r3, [pc, #200]	; (800d0a4 <__swsetup_r+0xcc>)
 800cfda:	b570      	push	{r4, r5, r6, lr}
 800cfdc:	681d      	ldr	r5, [r3, #0]
 800cfde:	4606      	mov	r6, r0
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	b125      	cbz	r5, 800cfee <__swsetup_r+0x16>
 800cfe4:	69ab      	ldr	r3, [r5, #24]
 800cfe6:	b913      	cbnz	r3, 800cfee <__swsetup_r+0x16>
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f7ff fd57 	bl	800ca9c <__sinit>
 800cfee:	4b2e      	ldr	r3, [pc, #184]	; (800d0a8 <__swsetup_r+0xd0>)
 800cff0:	429c      	cmp	r4, r3
 800cff2:	d10f      	bne.n	800d014 <__swsetup_r+0x3c>
 800cff4:	686c      	ldr	r4, [r5, #4]
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cffc:	0719      	lsls	r1, r3, #28
 800cffe:	d42c      	bmi.n	800d05a <__swsetup_r+0x82>
 800d000:	06dd      	lsls	r5, r3, #27
 800d002:	d411      	bmi.n	800d028 <__swsetup_r+0x50>
 800d004:	2309      	movs	r3, #9
 800d006:	6033      	str	r3, [r6, #0]
 800d008:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d00c:	81a3      	strh	r3, [r4, #12]
 800d00e:	f04f 30ff 	mov.w	r0, #4294967295
 800d012:	e03e      	b.n	800d092 <__swsetup_r+0xba>
 800d014:	4b25      	ldr	r3, [pc, #148]	; (800d0ac <__swsetup_r+0xd4>)
 800d016:	429c      	cmp	r4, r3
 800d018:	d101      	bne.n	800d01e <__swsetup_r+0x46>
 800d01a:	68ac      	ldr	r4, [r5, #8]
 800d01c:	e7eb      	b.n	800cff6 <__swsetup_r+0x1e>
 800d01e:	4b24      	ldr	r3, [pc, #144]	; (800d0b0 <__swsetup_r+0xd8>)
 800d020:	429c      	cmp	r4, r3
 800d022:	bf08      	it	eq
 800d024:	68ec      	ldreq	r4, [r5, #12]
 800d026:	e7e6      	b.n	800cff6 <__swsetup_r+0x1e>
 800d028:	0758      	lsls	r0, r3, #29
 800d02a:	d512      	bpl.n	800d052 <__swsetup_r+0x7a>
 800d02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d02e:	b141      	cbz	r1, 800d042 <__swsetup_r+0x6a>
 800d030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d034:	4299      	cmp	r1, r3
 800d036:	d002      	beq.n	800d03e <__swsetup_r+0x66>
 800d038:	4630      	mov	r0, r6
 800d03a:	f000 f991 	bl	800d360 <_free_r>
 800d03e:	2300      	movs	r3, #0
 800d040:	6363      	str	r3, [r4, #52]	; 0x34
 800d042:	89a3      	ldrh	r3, [r4, #12]
 800d044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d048:	81a3      	strh	r3, [r4, #12]
 800d04a:	2300      	movs	r3, #0
 800d04c:	6063      	str	r3, [r4, #4]
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	f043 0308 	orr.w	r3, r3, #8
 800d058:	81a3      	strh	r3, [r4, #12]
 800d05a:	6923      	ldr	r3, [r4, #16]
 800d05c:	b94b      	cbnz	r3, 800d072 <__swsetup_r+0x9a>
 800d05e:	89a3      	ldrh	r3, [r4, #12]
 800d060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d068:	d003      	beq.n	800d072 <__swsetup_r+0x9a>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4630      	mov	r0, r6
 800d06e:	f000 f92b 	bl	800d2c8 <__smakebuf_r>
 800d072:	89a0      	ldrh	r0, [r4, #12]
 800d074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d078:	f010 0301 	ands.w	r3, r0, #1
 800d07c:	d00a      	beq.n	800d094 <__swsetup_r+0xbc>
 800d07e:	2300      	movs	r3, #0
 800d080:	60a3      	str	r3, [r4, #8]
 800d082:	6963      	ldr	r3, [r4, #20]
 800d084:	425b      	negs	r3, r3
 800d086:	61a3      	str	r3, [r4, #24]
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	b943      	cbnz	r3, 800d09e <__swsetup_r+0xc6>
 800d08c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d090:	d1ba      	bne.n	800d008 <__swsetup_r+0x30>
 800d092:	bd70      	pop	{r4, r5, r6, pc}
 800d094:	0781      	lsls	r1, r0, #30
 800d096:	bf58      	it	pl
 800d098:	6963      	ldrpl	r3, [r4, #20]
 800d09a:	60a3      	str	r3, [r4, #8]
 800d09c:	e7f4      	b.n	800d088 <__swsetup_r+0xb0>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e7f7      	b.n	800d092 <__swsetup_r+0xba>
 800d0a2:	bf00      	nop
 800d0a4:	20000098 	.word	0x20000098
 800d0a8:	0800f868 	.word	0x0800f868
 800d0ac:	0800f888 	.word	0x0800f888
 800d0b0:	0800f848 	.word	0x0800f848

0800d0b4 <_close_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4d06      	ldr	r5, [pc, #24]	; (800d0d0 <_close_r+0x1c>)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	4608      	mov	r0, r1
 800d0be:	602b      	str	r3, [r5, #0]
 800d0c0:	f7ff fac4 	bl	800c64c <_close>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_close_r+0x1a>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_close_r+0x1a>
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	200050c0 	.word	0x200050c0

0800d0d4 <__sflush_r>:
 800d0d4:	898a      	ldrh	r2, [r1, #12]
 800d0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0da:	4605      	mov	r5, r0
 800d0dc:	0710      	lsls	r0, r2, #28
 800d0de:	460c      	mov	r4, r1
 800d0e0:	d458      	bmi.n	800d194 <__sflush_r+0xc0>
 800d0e2:	684b      	ldr	r3, [r1, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	dc05      	bgt.n	800d0f4 <__sflush_r+0x20>
 800d0e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	dc02      	bgt.n	800d0f4 <__sflush_r+0x20>
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0f6:	2e00      	cmp	r6, #0
 800d0f8:	d0f9      	beq.n	800d0ee <__sflush_r+0x1a>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d100:	682f      	ldr	r7, [r5, #0]
 800d102:	602b      	str	r3, [r5, #0]
 800d104:	d032      	beq.n	800d16c <__sflush_r+0x98>
 800d106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	075a      	lsls	r2, r3, #29
 800d10c:	d505      	bpl.n	800d11a <__sflush_r+0x46>
 800d10e:	6863      	ldr	r3, [r4, #4]
 800d110:	1ac0      	subs	r0, r0, r3
 800d112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d114:	b10b      	cbz	r3, 800d11a <__sflush_r+0x46>
 800d116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d118:	1ac0      	subs	r0, r0, r3
 800d11a:	2300      	movs	r3, #0
 800d11c:	4602      	mov	r2, r0
 800d11e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d120:	6a21      	ldr	r1, [r4, #32]
 800d122:	4628      	mov	r0, r5
 800d124:	47b0      	blx	r6
 800d126:	1c43      	adds	r3, r0, #1
 800d128:	89a3      	ldrh	r3, [r4, #12]
 800d12a:	d106      	bne.n	800d13a <__sflush_r+0x66>
 800d12c:	6829      	ldr	r1, [r5, #0]
 800d12e:	291d      	cmp	r1, #29
 800d130:	d82c      	bhi.n	800d18c <__sflush_r+0xb8>
 800d132:	4a2a      	ldr	r2, [pc, #168]	; (800d1dc <__sflush_r+0x108>)
 800d134:	40ca      	lsrs	r2, r1
 800d136:	07d6      	lsls	r6, r2, #31
 800d138:	d528      	bpl.n	800d18c <__sflush_r+0xb8>
 800d13a:	2200      	movs	r2, #0
 800d13c:	6062      	str	r2, [r4, #4]
 800d13e:	04d9      	lsls	r1, r3, #19
 800d140:	6922      	ldr	r2, [r4, #16]
 800d142:	6022      	str	r2, [r4, #0]
 800d144:	d504      	bpl.n	800d150 <__sflush_r+0x7c>
 800d146:	1c42      	adds	r2, r0, #1
 800d148:	d101      	bne.n	800d14e <__sflush_r+0x7a>
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	b903      	cbnz	r3, 800d150 <__sflush_r+0x7c>
 800d14e:	6560      	str	r0, [r4, #84]	; 0x54
 800d150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d152:	602f      	str	r7, [r5, #0]
 800d154:	2900      	cmp	r1, #0
 800d156:	d0ca      	beq.n	800d0ee <__sflush_r+0x1a>
 800d158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d15c:	4299      	cmp	r1, r3
 800d15e:	d002      	beq.n	800d166 <__sflush_r+0x92>
 800d160:	4628      	mov	r0, r5
 800d162:	f000 f8fd 	bl	800d360 <_free_r>
 800d166:	2000      	movs	r0, #0
 800d168:	6360      	str	r0, [r4, #52]	; 0x34
 800d16a:	e7c1      	b.n	800d0f0 <__sflush_r+0x1c>
 800d16c:	6a21      	ldr	r1, [r4, #32]
 800d16e:	2301      	movs	r3, #1
 800d170:	4628      	mov	r0, r5
 800d172:	47b0      	blx	r6
 800d174:	1c41      	adds	r1, r0, #1
 800d176:	d1c7      	bne.n	800d108 <__sflush_r+0x34>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0c4      	beq.n	800d108 <__sflush_r+0x34>
 800d17e:	2b1d      	cmp	r3, #29
 800d180:	d001      	beq.n	800d186 <__sflush_r+0xb2>
 800d182:	2b16      	cmp	r3, #22
 800d184:	d101      	bne.n	800d18a <__sflush_r+0xb6>
 800d186:	602f      	str	r7, [r5, #0]
 800d188:	e7b1      	b.n	800d0ee <__sflush_r+0x1a>
 800d18a:	89a3      	ldrh	r3, [r4, #12]
 800d18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d190:	81a3      	strh	r3, [r4, #12]
 800d192:	e7ad      	b.n	800d0f0 <__sflush_r+0x1c>
 800d194:	690f      	ldr	r7, [r1, #16]
 800d196:	2f00      	cmp	r7, #0
 800d198:	d0a9      	beq.n	800d0ee <__sflush_r+0x1a>
 800d19a:	0793      	lsls	r3, r2, #30
 800d19c:	680e      	ldr	r6, [r1, #0]
 800d19e:	bf08      	it	eq
 800d1a0:	694b      	ldreq	r3, [r1, #20]
 800d1a2:	600f      	str	r7, [r1, #0]
 800d1a4:	bf18      	it	ne
 800d1a6:	2300      	movne	r3, #0
 800d1a8:	eba6 0807 	sub.w	r8, r6, r7
 800d1ac:	608b      	str	r3, [r1, #8]
 800d1ae:	f1b8 0f00 	cmp.w	r8, #0
 800d1b2:	dd9c      	ble.n	800d0ee <__sflush_r+0x1a>
 800d1b4:	6a21      	ldr	r1, [r4, #32]
 800d1b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1b8:	4643      	mov	r3, r8
 800d1ba:	463a      	mov	r2, r7
 800d1bc:	4628      	mov	r0, r5
 800d1be:	47b0      	blx	r6
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	dc06      	bgt.n	800d1d2 <__sflush_r+0xfe>
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ca:	81a3      	strh	r3, [r4, #12]
 800d1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d0:	e78e      	b.n	800d0f0 <__sflush_r+0x1c>
 800d1d2:	4407      	add	r7, r0
 800d1d4:	eba8 0800 	sub.w	r8, r8, r0
 800d1d8:	e7e9      	b.n	800d1ae <__sflush_r+0xda>
 800d1da:	bf00      	nop
 800d1dc:	20400001 	.word	0x20400001

0800d1e0 <_fflush_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	690b      	ldr	r3, [r1, #16]
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	b913      	cbnz	r3, 800d1f0 <_fflush_r+0x10>
 800d1ea:	2500      	movs	r5, #0
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	b118      	cbz	r0, 800d1fa <_fflush_r+0x1a>
 800d1f2:	6983      	ldr	r3, [r0, #24]
 800d1f4:	b90b      	cbnz	r3, 800d1fa <_fflush_r+0x1a>
 800d1f6:	f7ff fc51 	bl	800ca9c <__sinit>
 800d1fa:	4b14      	ldr	r3, [pc, #80]	; (800d24c <_fflush_r+0x6c>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	d11b      	bne.n	800d238 <_fflush_r+0x58>
 800d200:	686c      	ldr	r4, [r5, #4]
 800d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0ef      	beq.n	800d1ea <_fflush_r+0xa>
 800d20a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d20c:	07d0      	lsls	r0, r2, #31
 800d20e:	d404      	bmi.n	800d21a <_fflush_r+0x3a>
 800d210:	0599      	lsls	r1, r3, #22
 800d212:	d402      	bmi.n	800d21a <_fflush_r+0x3a>
 800d214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d216:	f7ff fd04 	bl	800cc22 <__retarget_lock_acquire_recursive>
 800d21a:	4628      	mov	r0, r5
 800d21c:	4621      	mov	r1, r4
 800d21e:	f7ff ff59 	bl	800d0d4 <__sflush_r>
 800d222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d224:	07da      	lsls	r2, r3, #31
 800d226:	4605      	mov	r5, r0
 800d228:	d4e0      	bmi.n	800d1ec <_fflush_r+0xc>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	059b      	lsls	r3, r3, #22
 800d22e:	d4dd      	bmi.n	800d1ec <_fflush_r+0xc>
 800d230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d232:	f7ff fcf7 	bl	800cc24 <__retarget_lock_release_recursive>
 800d236:	e7d9      	b.n	800d1ec <_fflush_r+0xc>
 800d238:	4b05      	ldr	r3, [pc, #20]	; (800d250 <_fflush_r+0x70>)
 800d23a:	429c      	cmp	r4, r3
 800d23c:	d101      	bne.n	800d242 <_fflush_r+0x62>
 800d23e:	68ac      	ldr	r4, [r5, #8]
 800d240:	e7df      	b.n	800d202 <_fflush_r+0x22>
 800d242:	4b04      	ldr	r3, [pc, #16]	; (800d254 <_fflush_r+0x74>)
 800d244:	429c      	cmp	r4, r3
 800d246:	bf08      	it	eq
 800d248:	68ec      	ldreq	r4, [r5, #12]
 800d24a:	e7da      	b.n	800d202 <_fflush_r+0x22>
 800d24c:	0800f868 	.word	0x0800f868
 800d250:	0800f888 	.word	0x0800f888
 800d254:	0800f848 	.word	0x0800f848

0800d258 <_lseek_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d07      	ldr	r5, [pc, #28]	; (800d278 <_lseek_r+0x20>)
 800d25c:	4604      	mov	r4, r0
 800d25e:	4608      	mov	r0, r1
 800d260:	4611      	mov	r1, r2
 800d262:	2200      	movs	r2, #0
 800d264:	602a      	str	r2, [r5, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	f7ff f9ad 	bl	800c5c6 <_lseek>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_lseek_r+0x1e>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_lseek_r+0x1e>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	200050c0 	.word	0x200050c0

0800d27c <__swhatbuf_r>:
 800d27c:	b570      	push	{r4, r5, r6, lr}
 800d27e:	460e      	mov	r6, r1
 800d280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d284:	2900      	cmp	r1, #0
 800d286:	b096      	sub	sp, #88	; 0x58
 800d288:	4614      	mov	r4, r2
 800d28a:	461d      	mov	r5, r3
 800d28c:	da08      	bge.n	800d2a0 <__swhatbuf_r+0x24>
 800d28e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	061a      	lsls	r2, r3, #24
 800d298:	d410      	bmi.n	800d2bc <__swhatbuf_r+0x40>
 800d29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d29e:	e00e      	b.n	800d2be <__swhatbuf_r+0x42>
 800d2a0:	466a      	mov	r2, sp
 800d2a2:	f000 f8bb 	bl	800d41c <_fstat_r>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	dbf1      	blt.n	800d28e <__swhatbuf_r+0x12>
 800d2aa:	9a01      	ldr	r2, [sp, #4]
 800d2ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2b4:	425a      	negs	r2, r3
 800d2b6:	415a      	adcs	r2, r3
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	e7ee      	b.n	800d29a <__swhatbuf_r+0x1e>
 800d2bc:	2340      	movs	r3, #64	; 0x40
 800d2be:	2000      	movs	r0, #0
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	b016      	add	sp, #88	; 0x58
 800d2c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2c8 <__smakebuf_r>:
 800d2c8:	898b      	ldrh	r3, [r1, #12]
 800d2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2cc:	079d      	lsls	r5, r3, #30
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	d507      	bpl.n	800d2e4 <__smakebuf_r+0x1c>
 800d2d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2d8:	6023      	str	r3, [r4, #0]
 800d2da:	6123      	str	r3, [r4, #16]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	6163      	str	r3, [r4, #20]
 800d2e0:	b002      	add	sp, #8
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	ab01      	add	r3, sp, #4
 800d2e6:	466a      	mov	r2, sp
 800d2e8:	f7ff ffc8 	bl	800d27c <__swhatbuf_r>
 800d2ec:	9900      	ldr	r1, [sp, #0]
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f7ff fccf 	bl	800cc94 <_malloc_r>
 800d2f6:	b948      	cbnz	r0, 800d30c <__smakebuf_r+0x44>
 800d2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2fc:	059a      	lsls	r2, r3, #22
 800d2fe:	d4ef      	bmi.n	800d2e0 <__smakebuf_r+0x18>
 800d300:	f023 0303 	bic.w	r3, r3, #3
 800d304:	f043 0302 	orr.w	r3, r3, #2
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	e7e3      	b.n	800d2d4 <__smakebuf_r+0xc>
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <__smakebuf_r+0x7c>)
 800d30e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	6020      	str	r0, [r4, #0]
 800d314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d318:	81a3      	strh	r3, [r4, #12]
 800d31a:	9b00      	ldr	r3, [sp, #0]
 800d31c:	6163      	str	r3, [r4, #20]
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	6120      	str	r0, [r4, #16]
 800d322:	b15b      	cbz	r3, 800d33c <__smakebuf_r+0x74>
 800d324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d328:	4630      	mov	r0, r6
 800d32a:	f000 f889 	bl	800d440 <_isatty_r>
 800d32e:	b128      	cbz	r0, 800d33c <__smakebuf_r+0x74>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	f043 0301 	orr.w	r3, r3, #1
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	89a0      	ldrh	r0, [r4, #12]
 800d33e:	4305      	orrs	r5, r0
 800d340:	81a5      	strh	r5, [r4, #12]
 800d342:	e7cd      	b.n	800d2e0 <__smakebuf_r+0x18>
 800d344:	0800ca35 	.word	0x0800ca35

0800d348 <__malloc_lock>:
 800d348:	4801      	ldr	r0, [pc, #4]	; (800d350 <__malloc_lock+0x8>)
 800d34a:	f7ff bc6a 	b.w	800cc22 <__retarget_lock_acquire_recursive>
 800d34e:	bf00      	nop
 800d350:	200050b4 	.word	0x200050b4

0800d354 <__malloc_unlock>:
 800d354:	4801      	ldr	r0, [pc, #4]	; (800d35c <__malloc_unlock+0x8>)
 800d356:	f7ff bc65 	b.w	800cc24 <__retarget_lock_release_recursive>
 800d35a:	bf00      	nop
 800d35c:	200050b4 	.word	0x200050b4

0800d360 <_free_r>:
 800d360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d362:	2900      	cmp	r1, #0
 800d364:	d044      	beq.n	800d3f0 <_free_r+0x90>
 800d366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d36a:	9001      	str	r0, [sp, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f1a1 0404 	sub.w	r4, r1, #4
 800d372:	bfb8      	it	lt
 800d374:	18e4      	addlt	r4, r4, r3
 800d376:	f7ff ffe7 	bl	800d348 <__malloc_lock>
 800d37a:	4a1e      	ldr	r2, [pc, #120]	; (800d3f4 <_free_r+0x94>)
 800d37c:	9801      	ldr	r0, [sp, #4]
 800d37e:	6813      	ldr	r3, [r2, #0]
 800d380:	b933      	cbnz	r3, 800d390 <_free_r+0x30>
 800d382:	6063      	str	r3, [r4, #4]
 800d384:	6014      	str	r4, [r2, #0]
 800d386:	b003      	add	sp, #12
 800d388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d38c:	f7ff bfe2 	b.w	800d354 <__malloc_unlock>
 800d390:	42a3      	cmp	r3, r4
 800d392:	d908      	bls.n	800d3a6 <_free_r+0x46>
 800d394:	6825      	ldr	r5, [r4, #0]
 800d396:	1961      	adds	r1, r4, r5
 800d398:	428b      	cmp	r3, r1
 800d39a:	bf01      	itttt	eq
 800d39c:	6819      	ldreq	r1, [r3, #0]
 800d39e:	685b      	ldreq	r3, [r3, #4]
 800d3a0:	1949      	addeq	r1, r1, r5
 800d3a2:	6021      	streq	r1, [r4, #0]
 800d3a4:	e7ed      	b.n	800d382 <_free_r+0x22>
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	b10b      	cbz	r3, 800d3b0 <_free_r+0x50>
 800d3ac:	42a3      	cmp	r3, r4
 800d3ae:	d9fa      	bls.n	800d3a6 <_free_r+0x46>
 800d3b0:	6811      	ldr	r1, [r2, #0]
 800d3b2:	1855      	adds	r5, r2, r1
 800d3b4:	42a5      	cmp	r5, r4
 800d3b6:	d10b      	bne.n	800d3d0 <_free_r+0x70>
 800d3b8:	6824      	ldr	r4, [r4, #0]
 800d3ba:	4421      	add	r1, r4
 800d3bc:	1854      	adds	r4, r2, r1
 800d3be:	42a3      	cmp	r3, r4
 800d3c0:	6011      	str	r1, [r2, #0]
 800d3c2:	d1e0      	bne.n	800d386 <_free_r+0x26>
 800d3c4:	681c      	ldr	r4, [r3, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	6053      	str	r3, [r2, #4]
 800d3ca:	4421      	add	r1, r4
 800d3cc:	6011      	str	r1, [r2, #0]
 800d3ce:	e7da      	b.n	800d386 <_free_r+0x26>
 800d3d0:	d902      	bls.n	800d3d8 <_free_r+0x78>
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	6003      	str	r3, [r0, #0]
 800d3d6:	e7d6      	b.n	800d386 <_free_r+0x26>
 800d3d8:	6825      	ldr	r5, [r4, #0]
 800d3da:	1961      	adds	r1, r4, r5
 800d3dc:	428b      	cmp	r3, r1
 800d3de:	bf04      	itt	eq
 800d3e0:	6819      	ldreq	r1, [r3, #0]
 800d3e2:	685b      	ldreq	r3, [r3, #4]
 800d3e4:	6063      	str	r3, [r4, #4]
 800d3e6:	bf04      	itt	eq
 800d3e8:	1949      	addeq	r1, r1, r5
 800d3ea:	6021      	streq	r1, [r4, #0]
 800d3ec:	6054      	str	r4, [r2, #4]
 800d3ee:	e7ca      	b.n	800d386 <_free_r+0x26>
 800d3f0:	b003      	add	sp, #12
 800d3f2:	bd30      	pop	{r4, r5, pc}
 800d3f4:	200050b8 	.word	0x200050b8

0800d3f8 <_read_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	; (800d418 <_read_r+0x20>)
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	4608      	mov	r0, r1
 800d400:	4611      	mov	r1, r2
 800d402:	2200      	movs	r2, #0
 800d404:	602a      	str	r2, [r5, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f7ff f885 	bl	800c516 <_read>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_read_r+0x1e>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_read_r+0x1e>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	200050c0 	.word	0x200050c0

0800d41c <_fstat_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d07      	ldr	r5, [pc, #28]	; (800d43c <_fstat_r+0x20>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	4611      	mov	r1, r2
 800d428:	602b      	str	r3, [r5, #0]
 800d42a:	f7ff f956 	bl	800c6da <_fstat>
 800d42e:	1c43      	adds	r3, r0, #1
 800d430:	d102      	bne.n	800d438 <_fstat_r+0x1c>
 800d432:	682b      	ldr	r3, [r5, #0]
 800d434:	b103      	cbz	r3, 800d438 <_fstat_r+0x1c>
 800d436:	6023      	str	r3, [r4, #0]
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	bf00      	nop
 800d43c:	200050c0 	.word	0x200050c0

0800d440 <_isatty_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	4d06      	ldr	r5, [pc, #24]	; (800d45c <_isatty_r+0x1c>)
 800d444:	2300      	movs	r3, #0
 800d446:	4604      	mov	r4, r0
 800d448:	4608      	mov	r0, r1
 800d44a:	602b      	str	r3, [r5, #0]
 800d44c:	f7ff faac 	bl	800c9a8 <_isatty>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_isatty_r+0x1a>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_isatty_r+0x1a>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	200050c0 	.word	0x200050c0

0800d460 <_init>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	bf00      	nop
 800d464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d466:	bc08      	pop	{r3}
 800d468:	469e      	mov	lr, r3
 800d46a:	4770      	bx	lr

0800d46c <_fini>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr
